
Obstacle-avoidance-car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001af6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b8  00800060  00001af6  00001b8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  00800118  00800118  00001c42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000468  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000046f2  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000156b  00000000  00000000  0000680a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000025e9  00000000  00000000  00007d75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bd4  00000000  00000000  0000a360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014bf  00000000  00000000  0000af34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029ea  00000000  00000000  0000c3f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  0000eddd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__vector_1>
       8:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__vector_2>
       c:	0c 94 80 08 	jmp	0x1100	; 0x1100 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__vector_5>
      18:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__vector_8>
      24:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 31       	cpi	r26, 0x18	; 24
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a8 e1       	ldi	r26, 0x18	; 24
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 34       	cpi	r26, 0x45	; 69
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 33 05 	call	0xa66	; 0xa66 <main>
      8a:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Speed_50_check>:
	_delay_ms(1000);
}

void Speed_50_check()
{
	if(g_speed_flag == 1)
      92:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <g_speed_flag>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	c9 f5       	brne	.+114    	; 0x10c <Speed_50_check+0x7a>
	{
		
		if (ovf < mode_ovf ){
      9a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <ovf>
      9e:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <ovf+0x1>
      a2:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <ovf+0x2>
      a6:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <ovf+0x3>
      aa:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <mode_ovf>
      ae:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <mode_ovf+0x1>
      b2:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <mode_ovf+0x2>
      b6:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <mode_ovf+0x3>
      ba:	84 17       	cp	r24, r20
      bc:	95 07       	cpc	r25, r21
      be:	a6 07       	cpc	r26, r22
      c0:	b7 07       	cpc	r27, r23
      c2:	64 f4       	brge	.+24     	; 0xdc <Speed_50_check+0x4a>
			ovf++;
      c4:	01 96       	adiw	r24, 0x01	; 1
      c6:	a1 1d       	adc	r26, r1
      c8:	b1 1d       	adc	r27, r1
      ca:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <ovf>
      ce:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <ovf+0x1>
      d2:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <ovf+0x2>
      d6:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <ovf+0x3>
      da:	08 95       	ret
		}
		else if ( ovf == mode_ovf && mode_ovf!=0)
      dc:	84 17       	cp	r24, r20
      de:	95 07       	cpc	r25, r21
      e0:	a6 07       	cpc	r26, r22
      e2:	b7 07       	cpc	r27, r23
      e4:	99 f4       	brne	.+38     	; 0x10c <Speed_50_check+0x7a>
      e6:	45 2b       	or	r20, r21
      e8:	46 2b       	or	r20, r22
      ea:	47 2b       	or	r20, r23
      ec:	79 f0       	breq	.+30     	; 0x10c <Speed_50_check+0x7a>
		{
			ovf =0 ;
      ee:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <ovf>
      f2:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <ovf+0x1>
      f6:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <ovf+0x2>
      fa:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <ovf+0x3>
			if (car_mode ==0)
      fe:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <car_mode>
     102:	81 11       	cpse	r24, r1
     104:	03 c0       	rjmp	.+6      	; 0x10c <Speed_50_check+0x7a>
			{
				car_mode=1;
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <car_mode>
     10c:	08 95       	ret

0000010e <car_Forward_30>:



void car_Forward_30()
{	
	LCD_Clear();
     10e:	0e 94 08 04 	call	0x810	; 0x810 <LCD_Clear>
	PWM_set_duty(30,100);
     112:	44 e6       	ldi	r20, 0x64	; 100
     114:	50 e0       	ldi	r21, 0x00	; 0
     116:	60 e0       	ldi	r22, 0x00	; 0
     118:	70 e0       	ldi	r23, 0x00	; 0
     11a:	8e e1       	ldi	r24, 0x1E	; 30
     11c:	0e 94 0a 09 	call	0x1214	; 0x1214 <PWM_set_duty>
	timer_start(TIMER0_SCALER_8);
     120:	82 e0       	ldi	r24, 0x02	; 2
     122:	0e 94 98 09 	call	0x1330	; 0x1330 <timer_start>
	Car_Moving_FWD();
     126:	0e 94 a2 04 	call	0x944	; 0x944 <Car_Moving_FWD>
	LCD_SetCursor(0,0);
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_SetCursor>
	LCD_WriteString("Speed:30% Dir:	F");
     132:	89 e6       	ldi	r24, 0x69	; 105
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_WriteString>
	LCD_SetCursor(1,0);
     13a:	60 e0       	ldi	r22, 0x00	; 0
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_SetCursor>
	LCD_WriteString("Dist.:");
     142:	8a e7       	ldi	r24, 0x7A	; 122
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_WriteString>
	LCD_WriteNumber(g_distance);
     14a:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <g_distance>
     14e:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <g_distance+0x1>
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 12 04 	call	0x824	; 0x824 <LCD_WriteNumber>
	LCD_WriteString(" Cm");
     15a:	81 e8       	ldi	r24, 0x81	; 129
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_WriteString>
     162:	08 95       	ret

00000164 <car_Forward_50>:
}

void car_Forward_50()
{
	LCD_Clear();
     164:	0e 94 08 04 	call	0x810	; 0x810 <LCD_Clear>
	PWM_set_duty(50,100);
     168:	44 e6       	ldi	r20, 0x64	; 100
     16a:	50 e0       	ldi	r21, 0x00	; 0
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	82 e3       	ldi	r24, 0x32	; 50
     172:	0e 94 0a 09 	call	0x1214	; 0x1214 <PWM_set_duty>
	timer_start(TIMER0_SCALER_8);
     176:	82 e0       	ldi	r24, 0x02	; 2
     178:	0e 94 98 09 	call	0x1330	; 0x1330 <timer_start>
	Car_Moving_FWD();
     17c:	0e 94 a2 04 	call	0x944	; 0x944 <Car_Moving_FWD>
	LCD_SetCursor(0,0);
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_SetCursor>
	LCD_WriteString("Speed:50% Dir:	F");
     188:	85 e8       	ldi	r24, 0x85	; 133
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_WriteString>
	LCD_SetCursor(1,0);
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_SetCursor>
	LCD_WriteString("Dist.:");
     198:	8a e7       	ldi	r24, 0x7A	; 122
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_WriteString>
	LCD_WriteNumber(g_distance);
     1a0:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <g_distance>
     1a4:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <g_distance+0x1>
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 12 04 	call	0x824	; 0x824 <LCD_WriteNumber>
	LCD_WriteString(" Cm");
     1b0:	81 e8       	ldi	r24, 0x81	; 129
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_WriteString>
     1b8:	08 95       	ret

000001ba <car_Rotating>:
}

void car_Rotating()
{
		LCD_Clear();
     1ba:	0e 94 08 04 	call	0x810	; 0x810 <LCD_Clear>
		PWM_set_duty(30,100);
     1be:	44 e6       	ldi	r20, 0x64	; 100
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	8e e1       	ldi	r24, 0x1E	; 30
     1c8:	0e 94 0a 09 	call	0x1214	; 0x1214 <PWM_set_duty>
		timer_start(TIMER0_SCALER_8);
     1cc:	82 e0       	ldi	r24, 0x02	; 2
     1ce:	0e 94 98 09 	call	0x1330	; 0x1330 <timer_start>
		LCD_SetCursor(0,0);
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_SetCursor>
		LCD_WriteString("Speed:30% Dir:	R");
     1da:	86 e9       	ldi	r24, 0x96	; 150
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_WriteString>
		LCD_SetCursor(1,0);
     1e2:	60 e0       	ldi	r22, 0x00	; 0
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_SetCursor>
		LCD_WriteString("Dist.:");
     1ea:	8a e7       	ldi	r24, 0x7A	; 122
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_WriteString>
		LCD_WriteNumber(g_distance);
     1f2:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <g_distance>
     1f6:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <g_distance+0x1>
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 12 04 	call	0x824	; 0x824 <LCD_WriteNumber>
		LCD_WriteString(" Cm");
     202:	81 e8       	ldi	r24, 0x81	; 129
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_WriteString>
		if (g_counter %2 == 0)
     20a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <g_counter>
     20e:	80 fd       	sbrc	r24, 0
     210:	03 c0       	rjmp	.+6      	; 0x218 <car_Rotating+0x5e>
		{
			Car_Rotate_Right();
     212:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <Car_Rotate_Right>
     216:	02 c0       	rjmp	.+4      	; 0x21c <car_Rotating+0x62>
		}
		else
		{
			Car_Rotate_Left();
     218:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <Car_Rotate_Left>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     21c:	2f ef       	ldi	r18, 0xFF	; 255
     21e:	8d e3       	ldi	r24, 0x3D	; 61
     220:	99 e4       	ldi	r25, 0x49	; 73
     222:	21 50       	subi	r18, 0x01	; 1
     224:	80 40       	sbci	r24, 0x00	; 0
     226:	90 40       	sbci	r25, 0x00	; 0
     228:	e1 f7       	brne	.-8      	; 0x222 <car_Rotating+0x68>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <car_Rotating+0x72>
     22c:	00 00       	nop
     22e:	08 95       	ret

00000230 <car_Backword_30>:
		_delay_ms(3000);
}

void car_Backword_30()
{
	while (g_distance <= 20)
     230:	2e c0       	rjmp	.+92     	; 0x28e <car_Backword_30+0x5e>
	{
		US_getdistance(&g_distance);
     232:	8f e3       	ldi	r24, 0x3F	; 63
     234:	91 e0       	ldi	r25, 0x01	; 1
     236:	0e 94 0f 05 	call	0xa1e	; 0xa1e <US_getdistance>
		LCD_Clear();
     23a:	0e 94 08 04 	call	0x810	; 0x810 <LCD_Clear>
		PWM_set_duty(30,100);
     23e:	44 e6       	ldi	r20, 0x64	; 100
     240:	50 e0       	ldi	r21, 0x00	; 0
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	8e e1       	ldi	r24, 0x1E	; 30
     248:	0e 94 0a 09 	call	0x1214	; 0x1214 <PWM_set_duty>
		timer_start(TIMER0_SCALER_8);
     24c:	82 e0       	ldi	r24, 0x02	; 2
     24e:	0e 94 98 09 	call	0x1330	; 0x1330 <timer_start>
		Car_Moving_BWD();
     252:	0e 94 b4 04 	call	0x968	; 0x968 <Car_Moving_BWD>
		LCD_SetCursor(0,0);
     256:	60 e0       	ldi	r22, 0x00	; 0
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_SetCursor>
		LCD_WriteString("Speed:30% Dir:	B");
     25e:	87 ea       	ldi	r24, 0xA7	; 167
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_WriteString>
		LCD_SetCursor(1,0);
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_SetCursor>
		LCD_WriteString("Dist.:");
     26e:	8a e7       	ldi	r24, 0x7A	; 122
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_WriteString>
		LCD_WriteNumber(g_distance);
     276:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <g_distance>
     27a:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <g_distance+0x1>
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 12 04 	call	0x824	; 0x824 <LCD_WriteNumber>
		LCD_WriteString(" Cm");
     286:	81 e8       	ldi	r24, 0x81	; 129
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_WriteString>
		_delay_ms(3000);
}

void car_Backword_30()
{
	while (g_distance <= 20)
     28e:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <g_distance>
     292:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <g_distance+0x1>
     296:	45 97       	sbiw	r24, 0x15	; 21
     298:	60 f2       	brcs	.-104    	; 0x232 <car_Backword_30+0x2>
		LCD_WriteString("Dist.:");
		LCD_WriteNumber(g_distance);
		LCD_WriteString(" Cm");
	}
	
}
     29a:	08 95       	ret

0000029c <Car_Stopping>:


void Car_Stopping()
{
	LCD_Clear();
     29c:	0e 94 08 04 	call	0x810	; 0x810 <LCD_Clear>
	PWM_set_duty(0,100);
     2a0:	44 e6       	ldi	r20, 0x64	; 100
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0e 94 0a 09 	call	0x1214	; 0x1214 <PWM_set_duty>
	timer_start(TIMER0_SCALER_8);
     2ae:	82 e0       	ldi	r24, 0x02	; 2
     2b0:	0e 94 98 09 	call	0x1330	; 0x1330 <timer_start>
	Car_Stop();
     2b4:	0e 94 c6 04 	call	0x98c	; 0x98c <Car_Stop>
	LCD_SetCursor(0,0);
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_SetCursor>
	LCD_WriteString("Speed:00% Dir:	S");
     2c0:	88 eb       	ldi	r24, 0xB8	; 184
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_WriteString>
	LCD_SetCursor(1,0);
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_SetCursor>
	LCD_WriteString("Dist.:");
     2d0:	8a e7       	ldi	r24, 0x7A	; 122
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_WriteString>
	LCD_WriteNumber(g_distance);
     2d8:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <g_distance>
     2dc:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <g_distance+0x1>
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 12 04 	call	0x824	; 0x824 <LCD_WriteNumber>
	LCD_WriteString(" Cm");
     2e8:	81 e8       	ldi	r24, 0x81	; 129
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_WriteString>
     2f0:	2f ef       	ldi	r18, 0xFF	; 255
     2f2:	89 e6       	ldi	r24, 0x69	; 105
     2f4:	98 e1       	ldi	r25, 0x18	; 24
     2f6:	21 50       	subi	r18, 0x01	; 1
     2f8:	80 40       	sbci	r24, 0x00	; 0
     2fa:	90 40       	sbci	r25, 0x00	; 0
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <Car_Stopping+0x5a>
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <Car_Stopping+0x64>
     300:	00 00       	nop
     302:	08 95       	ret

00000304 <startStage>:
		}
	}
}

void startStage(void) 
{
     304:	1f 93       	push	r17
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
     30a:	00 d0       	rcall	.+0      	; 0x30c <startStage+0x8>
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
    u8 keyPressed = 0;								//Used to store the value of the key pressed 
     310:	19 82       	std	Y+1, r1	; 0x01
	u8 buttonCounter = 0;
	Button_State buttonState = 0;
     312:	1a 82       	std	Y+2, r1	; 0x02


	do {							
		KEYPAD_getpressedkey(&keyPressed);
     314:	ce 01       	movw	r24, r28
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	0e 94 b5 02 	call	0x56a	; 0x56a <KEYPAD_getpressedkey>
		} while (keyPressed != '1');				//Key 1 is pressed. 
     31c:	89 81       	ldd	r24, Y+1	; 0x01
     31e:	81 33       	cpi	r24, 0x31	; 49
     320:	c9 f7       	brne	.-14     	; 0x314 <startStage+0x10>
	
	LCD_WriteString("Set Def Rot");
     322:	89 ec       	ldi	r24, 0xC9	; 201
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_WriteString>
	LCD_SetCursor(1, 0);
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_SetCursor>
	LCD_WriteString("Right");
     332:	85 ed       	ldi	r24, 0xD5	; 213
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_WriteString>
	
	mode_ovf = 100000;								//starts 5 seconds timer in ISR
     33a:	80 ea       	ldi	r24, 0xA0	; 160
     33c:	96 e8       	ldi	r25, 0x86	; 134
     33e:	a1 e0       	ldi	r26, 0x01	; 1
     340:	b0 e0       	ldi	r27, 0x00	; 0
     342:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <mode_ovf>
     346:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <mode_ovf+0x1>
     34a:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <mode_ovf+0x2>
     34e:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <mode_ovf+0x3>
}

void startStage(void) 
{
    u8 keyPressed = 0;								//Used to store the value of the key pressed 
	u8 buttonCounter = 0;
     352:	10 e0       	ldi	r17, 0x00	; 0
	LCD_SetCursor(1, 0);
	LCD_WriteString("Right");
	
	mode_ovf = 100000;								//starts 5 seconds timer in ISR
	
	while (car_mode == 0)
     354:	29 c0       	rjmp	.+82     	; 0x3a8 <startStage+0xa4>
	{
		buttonState = Is_pressed(BUTTON_PIN, &buttonState);
     356:	be 01       	movw	r22, r28
     358:	6e 5f       	subi	r22, 0xFE	; 254
     35a:	7f 4f       	sbci	r23, 0xFF	; 255
     35c:	8e e1       	ldi	r24, 0x1E	; 30
     35e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Is_pressed>
     362:	8a 83       	std	Y+2, r24	; 0x02
			if (buttonState == pressed)
     364:	81 30       	cpi	r24, 0x01	; 1
     366:	09 f4       	brne	.+2      	; 0x36a <startStage+0x66>
			{
				buttonCounter++;					//if button is pressed, increase counter
     368:	1f 5f       	subi	r17, 0xFF	; 255
			}
			if (buttonCounter % 2 == 0)
     36a:	10 fd       	sbrc	r17, 0
     36c:	0f c0       	rjmp	.+30     	; 0x38c <startStage+0x88>
			{
				LCD_Clear();
     36e:	0e 94 08 04 	call	0x810	; 0x810 <LCD_Clear>
				LCD_WriteString("Set Def. Rot.");
     372:	8b ed       	ldi	r24, 0xDB	; 219
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_WriteString>
				LCD_SetCursor(1, 0);
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_SetCursor>
				LCD_WriteString("Right");
     382:	85 ed       	ldi	r24, 0xD5	; 213
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_WriteString>
     38a:	0e c0       	rjmp	.+28     	; 0x3a8 <startStage+0xa4>
			} 
			else 
				{
					LCD_Clear();
     38c:	0e 94 08 04 	call	0x810	; 0x810 <LCD_Clear>
					LCD_WriteString("Set Def. Rot.");
     390:	8b ed       	ldi	r24, 0xDB	; 219
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_WriteString>
					LCD_SetCursor(1, 0);
     398:	60 e0       	ldi	r22, 0x00	; 0
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_SetCursor>
					LCD_WriteString("Left");
     3a0:	89 ee       	ldi	r24, 0xE9	; 233
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_WriteString>
	LCD_SetCursor(1, 0);
	LCD_WriteString("Right");
	
	mode_ovf = 100000;								//starts 5 seconds timer in ISR
	
	while (car_mode == 0)
     3a8:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <car_mode>
     3ac:	88 23       	and	r24, r24
     3ae:	99 f2       	breq	.-90     	; 0x356 <startStage+0x52>
     3b0:	2f ef       	ldi	r18, 0xFF	; 255
     3b2:	83 ed       	ldi	r24, 0xD3	; 211
     3b4:	90 e3       	ldi	r25, 0x30	; 48
     3b6:	21 50       	subi	r18, 0x01	; 1
     3b8:	80 40       	sbci	r24, 0x00	; 0
     3ba:	90 40       	sbci	r25, 0x00	; 0
     3bc:	e1 f7       	brne	.-8      	; 0x3b6 <startStage+0xb2>
     3be:	00 c0       	rjmp	.+0      	; 0x3c0 <startStage+0xbc>
     3c0:	00 00       	nop
					LCD_SetCursor(1, 0);
					LCD_WriteString("Left");
				}
	}
	_delay_ms(2000);
	g_start_Flag = 1;
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	car_mode =0;
     3c8:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <car_mode>
	mode_ovf =0;
     3cc:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <mode_ovf>
     3d0:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <mode_ovf+0x1>
     3d4:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <mode_ovf+0x2>
     3d8:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <mode_ovf+0x3>
}
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	1f 91       	pop	r17
     3e6:	08 95       	ret

000003e8 <app_init>:


void app_init()
{
	LCD_PinsInit();
     3e8:	0e 94 73 04 	call	0x8e6	; 0x8e6 <LCD_PinsInit>
	LCD_Init();
     3ec:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_Init>
	GLOBALE_ENABLE();
     3f0:	78 94       	sei
	pwm_init();
     3f2:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <pwm_init>
	Car_Motors_init();
     3f6:	0e 94 90 04 	call	0x920	; 0x920 <Car_Motors_init>
	LCD_Init();
     3fa:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_Init>
	KEYPAD_init();
     3fe:	0e 94 9b 02 	call	0x536	; 0x536 <KEYPAD_init>
	DIO_initpin(PIND6,INPULL);
     402:	62 e0       	ldi	r22, 0x02	; 2
     404:	8e e1       	ldi	r24, 0x1E	; 30
     406:	0e 94 38 05 	call	0xa70	; 0xa70 <DIO_initpin>
	DIO_Init_All();
     40a:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_Init_All>
	US_init();
     40e:	0e 94 0c 05 	call	0xa18	; 0xa18 <US_init>
	TIMER_2_INT();
     412:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <TIMER_2_INT>
	TIMER2_OV_SetCallBack(Speed_50_check);
     416:	89 e4       	ldi	r24, 0x49	; 73
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <TIMER2_OV_SetCallBack>
     41e:	08 95       	ret

00000420 <app_start>:
}

void app_start()
{
	startStage();
     420:	0e 94 82 01 	call	0x304	; 0x304 <startStage>
	
	
	while (g_start_Flag)
     424:	64 c0       	rjmp	.+200    	; 0x4ee <app_start+0xce>
	{
		US_getdistance(&g_distance);
     426:	8f e3       	ldi	r24, 0x3F	; 63
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <US_getdistance>
		if (g_distance > 70 && car_mode == 0)
     42e:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <g_distance>
     432:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <g_distance+0x1>
     436:	87 34       	cpi	r24, 0x47	; 71
     438:	91 05       	cpc	r25, r1
     43a:	b0 f0       	brcs	.+44     	; 0x468 <app_start+0x48>
     43c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <car_mode>
     440:	81 11       	cpse	r24, r1
     442:	12 c0       	rjmp	.+36     	; 0x468 <app_start+0x48>
		{
			car_Forward_30();
     444:	0e 94 87 00 	call	0x10e	; 0x10e <car_Forward_30>
			g_speed_flag = 1;
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <g_speed_flag>
			mode_ovf = 100000;
     44e:	80 ea       	ldi	r24, 0xA0	; 160
     450:	96 e8       	ldi	r25, 0x86	; 134
     452:	a1 e0       	ldi	r26, 0x01	; 1
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <mode_ovf>
     45a:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <mode_ovf+0x1>
     45e:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <mode_ovf+0x2>
     462:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <mode_ovf+0x3>
     466:	43 c0       	rjmp	.+134    	; 0x4ee <app_start+0xce>
		}
		else if (car_mode == 1 && g_distance > 70)
     468:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <car_mode>
     46c:	81 30       	cpi	r24, 0x01	; 1
     46e:	51 f4       	brne	.+20     	; 0x484 <app_start+0x64>
     470:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <g_distance>
     474:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <g_distance+0x1>
     478:	87 34       	cpi	r24, 0x47	; 71
     47a:	91 05       	cpc	r25, r1
     47c:	18 f0       	brcs	.+6      	; 0x484 <app_start+0x64>
		{
			car_Forward_50();
     47e:	0e 94 b2 00 	call	0x164	; 0x164 <car_Forward_50>
     482:	35 c0       	rjmp	.+106    	; 0x4ee <app_start+0xce>
		}
		else if (g_distance <= 70 && g_distance > 30)
     484:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <g_distance>
     488:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <g_distance+0x1>
     48c:	87 34       	cpi	r24, 0x47	; 71
     48e:	91 05       	cpc	r25, r1
     490:	98 f4       	brcc	.+38     	; 0x4b8 <app_start+0x98>
     492:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <g_distance>
     496:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <g_distance+0x1>
     49a:	4f 97       	sbiw	r24, 0x1f	; 31
     49c:	68 f0       	brcs	.+26     	; 0x4b8 <app_start+0x98>
		{
			car_mode = 0;
     49e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <car_mode>
			mode_ovf=0;
     4a2:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <mode_ovf>
     4a6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <mode_ovf+0x1>
     4aa:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <mode_ovf+0x2>
     4ae:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <mode_ovf+0x3>
			car_Forward_30();
     4b2:	0e 94 87 00 	call	0x10e	; 0x10e <car_Forward_30>
     4b6:	1b c0       	rjmp	.+54     	; 0x4ee <app_start+0xce>
		}
		else if (g_distance <= 30 && g_distance > 20)
     4b8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <g_distance>
     4bc:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <g_distance+0x1>
     4c0:	4f 97       	sbiw	r24, 0x1f	; 31
     4c2:	58 f4       	brcc	.+22     	; 0x4da <app_start+0xba>
     4c4:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <g_distance>
     4c8:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <g_distance+0x1>
     4cc:	45 97       	sbiw	r24, 0x15	; 21
     4ce:	28 f0       	brcs	.+10     	; 0x4da <app_start+0xba>
		{
			Car_Stopping();
     4d0:	0e 94 4e 01 	call	0x29c	; 0x29c <Car_Stopping>
			car_Rotating();
     4d4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <car_Rotating>
     4d8:	0a c0       	rjmp	.+20     	; 0x4ee <app_start+0xce>
		}
		else if (g_distance <= 20)
     4da:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <g_distance>
     4de:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <g_distance+0x1>
     4e2:	45 97       	sbiw	r24, 0x15	; 21
     4e4:	20 f4       	brcc	.+8      	; 0x4ee <app_start+0xce>
		{
			Car_Stopping();
     4e6:	0e 94 4e 01 	call	0x29c	; 0x29c <Car_Stopping>
			car_Backword_30();
     4ea:	0e 94 18 01 	call	0x230	; 0x230 <car_Backword_30>
void app_start()
{
	startStage();
	
	
	while (g_start_Flag)
     4ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     4f2:	81 11       	cpse	r24, r1
     4f4:	98 cf       	rjmp	.-208    	; 0x426 <app_start+0x6>
		{
			Car_Stopping();
			car_Backword_30();
		}
	}
     4f6:	08 95       	ret

000004f8 <Is_pressed>:

#include "button_interface.h"
#include "button_config.h"
//static u8 button_press = 0 ; /** GLOBAL VARIABLE TO CHECK THE NUMBER OF PRESSED TIMES **/

Button_State Is_pressed(u8 BUTTON_PIN , u8* value){
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	1f 92       	push	r1
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
     506:	8b 01       	movw	r16, r22
	
	Button_State state = Notpressed; 
	en_dioError_t status_pin = WRONG_VALUE;
	
	u8 value_check = 0 ;
     508:	19 82       	std	Y+1, r1	; 0x01
	
	status_pin =  DIO_readpin (BUTTON_PIN, &value_check);
     50a:	be 01       	movw	r22, r28
     50c:	6f 5f       	subi	r22, 0xFF	; 255
     50e:	7f 4f       	sbci	r23, 0xFF	; 255
     510:	0e 94 ee 06 	call	0xddc	; 0xddc <DIO_readpin>
	
	if (!status_pin)
     514:	81 11       	cpse	r24, r1
     516:	05 c0       	rjmp	.+10     	; 0x522 <Is_pressed+0x2a>
	{
		state = pressed ; 
		*value = value_check ;
     518:	89 81       	ldd	r24, Y+1	; 0x01
     51a:	f8 01       	movw	r30, r16
     51c:	80 83       	st	Z, r24
	
	status_pin =  DIO_readpin (BUTTON_PIN, &value_check);
	
	if (!status_pin)
	{
		state = pressed ; 
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	04 c0       	rjmp	.+8      	; 0x52a <Is_pressed+0x32>
	}
	
	else
	{
		state = Notpressed ; 
		*value = value_check ;
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	f8 01       	movw	r30, r16
     526:	80 83       	st	Z, r24
		*value = value_check ;
	}
	
	else
	{
		state = Notpressed ; 
     528:	80 e0       	ldi	r24, 0x00	; 0
		*value = value_check ;
	}
	
	return state ; 
	
} 
     52a:	0f 90       	pop	r0
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	08 95       	ret

00000536 <KEYPAD_init>:
		{BUTTON7, BUTTON8, BUTTON9}};
			
KEYPAD_initError KEYPAD_init(void){
	
	/*Set Column Initial Values to 1 */
	DIO_writepin (COL_1,HIGH);
     536:	61 e0       	ldi	r22, 0x01	; 1
     538:	88 e1       	ldi	r24, 0x18	; 24
     53a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	DIO_writepin (COL_2,HIGH);
     53e:	61 e0       	ldi	r22, 0x01	; 1
     540:	89 e1       	ldi	r24, 0x19	; 25
     542:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	DIO_writepin (COL_3,HIGH);
     546:	61 e0       	ldi	r22, 0x01	; 1
     548:	8a e1       	ldi	r24, 0x1A	; 26
     54a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	
	/* Enable Pull Up Resistors at Input Rows */
	DIO_writepin (ROW_1,HIGH);
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	84 e0       	ldi	r24, 0x04	; 4
     552:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	DIO_writepin (ROW_2,HIGH);
     556:	61 e0       	ldi	r22, 0x01	; 1
     558:	85 e0       	ldi	r24, 0x05	; 5
     55a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	DIO_writepin (ROW_3,HIGH);
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	86 e0       	ldi	r24, 0x06	; 6
     562:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	
	return KEYPAD_initSuccess;
	
}
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	08 95       	ret

0000056a <KEYPAD_getpressedkey>:


KEYPAD_readError KEYPAD_getpressedkey(u8 *value){
     56a:	cf 92       	push	r12
     56c:	df 92       	push	r13
     56e:	ef 92       	push	r14
     570:	ff 92       	push	r15
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	8c 01       	movw	r16, r24

	// Scan all keypad rows
	for (u8 counter_row = 0; counter_row < KEYPAD_ROWS; counter_row++)
     57c:	d0 e0       	ldi	r29, 0x00	; 0
     57e:	39 c0       	rjmp	.+114    	; 0x5f2 <KEYPAD_getpressedkey+0x88>
	{
		 // set current column pin low to test all row pins to find out which button has been pressed
		DIO_writepin (Row_Arr[counter_row],LOW);
     580:	cd 2e       	mov	r12, r29
     582:	d1 2c       	mov	r13, r1
     584:	f6 01       	movw	r30, r12
     586:	ee 59       	subi	r30, 0x9E	; 158
     588:	ff 4f       	sbci	r31, 0xFF	; 255
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	80 81       	ld	r24, Z
     58e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
		
		//scan and test all keypad columns pins
		 for (u8 counter_col = 0; counter_col < KEYPAD_COLUMNS; counter_col++)
     592:	c0 e0       	ldi	r28, 0x00	; 0
     594:	24 c0       	rjmp	.+72     	; 0x5de <KEYPAD_getpressedkey+0x74>
		 {
			 
			 // check col value if it is 0 then this column and row is connected
			 DIO_readpin (Col_Arr[counter_col],value);
     596:	ec 2e       	mov	r14, r28
     598:	f1 2c       	mov	r15, r1
     59a:	f7 01       	movw	r30, r14
     59c:	eb 59       	subi	r30, 0x9B	; 155
     59e:	ff 4f       	sbci	r31, 0xFF	; 255
     5a0:	b8 01       	movw	r22, r16
     5a2:	80 81       	ld	r24, Z
     5a4:	0e 94 ee 06 	call	0xddc	; 0xddc <DIO_readpin>
			 
			 if(*value == 0){
     5a8:	f8 01       	movw	r30, r16
     5aa:	80 81       	ld	r24, Z
     5ac:	81 11       	cpse	r24, r1
     5ae:	16 c0       	rjmp	.+44     	; 0x5dc <KEYPAD_getpressedkey+0x72>
				 
				 *value= Button_Arr[counter_row][counter_col];
     5b0:	c6 01       	movw	r24, r12
     5b2:	88 0f       	add	r24, r24
     5b4:	99 1f       	adc	r25, r25
     5b6:	8c 0d       	add	r24, r12
     5b8:	9d 1d       	adc	r25, r13
     5ba:	82 51       	subi	r24, 0x12	; 18
     5bc:	9f 4f       	sbci	r25, 0xFF	; 255
     5be:	fc 01       	movw	r30, r24
     5c0:	ee 0d       	add	r30, r14
     5c2:	ff 1d       	adc	r31, r15
     5c4:	80 81       	ld	r24, Z
     5c6:	f8 01       	movw	r30, r16
     5c8:	80 83       	st	Z, r24
				 DIO_writepin (Row_Arr[counter_row],HIGH);
     5ca:	f6 01       	movw	r30, r12
     5cc:	ee 59       	subi	r30, 0x9E	; 158
     5ce:	ff 4f       	sbci	r31, 0xFF	; 255
     5d0:	61 e0       	ldi	r22, 0x01	; 1
     5d2:	80 81       	ld	r24, Z
     5d4:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
				  return KEYPAD_readSuccess;
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	0e c0       	rjmp	.+28     	; 0x5f8 <KEYPAD_getpressedkey+0x8e>
	{
		 // set current column pin low to test all row pins to find out which button has been pressed
		DIO_writepin (Row_Arr[counter_row],LOW);
		
		//scan and test all keypad columns pins
		 for (u8 counter_col = 0; counter_col < KEYPAD_COLUMNS; counter_col++)
     5dc:	cf 5f       	subi	r28, 0xFF	; 255
     5de:	c3 30       	cpi	r28, 0x03	; 3
     5e0:	d0 f2       	brcs	.-76     	; 0x596 <KEYPAD_getpressedkey+0x2c>
			 }

		}
		
		// set current row pin HIGH again
		DIO_writepin (Row_Arr[counter_row],HIGH);
     5e2:	f6 01       	movw	r30, r12
     5e4:	ee 59       	subi	r30, 0x9E	; 158
     5e6:	ff 4f       	sbci	r31, 0xFF	; 255
     5e8:	61 e0       	ldi	r22, 0x01	; 1
     5ea:	80 81       	ld	r24, Z
     5ec:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>


KEYPAD_readError KEYPAD_getpressedkey(u8 *value){

	// Scan all keypad rows
	for (u8 counter_row = 0; counter_row < KEYPAD_ROWS; counter_row++)
     5f0:	df 5f       	subi	r29, 0xFF	; 255
     5f2:	d3 30       	cpi	r29, 0x03	; 3
     5f4:	28 f2       	brcs	.-118    	; 0x580 <KEYPAD_getpressedkey+0x16>
		// set current row pin HIGH again
		DIO_writepin (Row_Arr[counter_row],HIGH);

	}
	
	return KEYPAD_readFail;
     5f6:	81 e0       	ldi	r24, 0x01	; 1

}
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	ff 90       	pop	r15
     602:	ef 90       	pop	r14
     604:	df 90       	pop	r13
     606:	cf 90       	pop	r12
     608:	08 95       	ret

0000060a <WriteIns>:
	for(u8 i=0;i<8;i++)
	{
		WriteData(pattern[i]);
	}
	WriteIns(0x80);
}
     60a:	cf 93       	push	r28
     60c:	c8 2f       	mov	r28, r24
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	81 e1       	ldi	r24, 0x11	; 17
     612:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     616:	6c 2f       	mov	r22, r28
     618:	66 1f       	adc	r22, r22
     61a:	66 27       	eor	r22, r22
     61c:	66 1f       	adc	r22, r22
     61e:	87 e1       	ldi	r24, 0x17	; 23
     620:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     624:	c6 fb       	bst	r28, 6
     626:	66 27       	eor	r22, r22
     628:	60 f9       	bld	r22, 0
     62a:	86 e1       	ldi	r24, 0x16	; 22
     62c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     630:	c5 fb       	bst	r28, 5
     632:	66 27       	eor	r22, r22
     634:	60 f9       	bld	r22, 0
     636:	85 e1       	ldi	r24, 0x15	; 21
     638:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     63c:	c4 fb       	bst	r28, 4
     63e:	66 27       	eor	r22, r22
     640:	60 f9       	bld	r22, 0
     642:	84 e1       	ldi	r24, 0x14	; 20
     644:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     648:	61 e0       	ldi	r22, 0x01	; 1
     64a:	83 e1       	ldi	r24, 0x13	; 19
     64c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     650:	8f e9       	ldi	r24, 0x9F	; 159
     652:	9f e0       	ldi	r25, 0x0F	; 15
     654:	01 97       	sbiw	r24, 0x01	; 1
     656:	f1 f7       	brne	.-4      	; 0x654 <WriteIns+0x4a>
     658:	00 c0       	rjmp	.+0      	; 0x65a <WriteIns+0x50>
     65a:	00 00       	nop
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	83 e1       	ldi	r24, 0x13	; 19
     660:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     664:	8f e9       	ldi	r24, 0x9F	; 159
     666:	9f e0       	ldi	r25, 0x0F	; 15
     668:	01 97       	sbiw	r24, 0x01	; 1
     66a:	f1 f7       	brne	.-4      	; 0x668 <WriteIns+0x5e>
     66c:	00 c0       	rjmp	.+0      	; 0x66e <WriteIns+0x64>
     66e:	00 00       	nop
     670:	c3 fb       	bst	r28, 3
     672:	66 27       	eor	r22, r22
     674:	60 f9       	bld	r22, 0
     676:	87 e1       	ldi	r24, 0x17	; 23
     678:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     67c:	c2 fb       	bst	r28, 2
     67e:	66 27       	eor	r22, r22
     680:	60 f9       	bld	r22, 0
     682:	86 e1       	ldi	r24, 0x16	; 22
     684:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     688:	c1 fb       	bst	r28, 1
     68a:	66 27       	eor	r22, r22
     68c:	60 f9       	bld	r22, 0
     68e:	85 e1       	ldi	r24, 0x15	; 21
     690:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     694:	6c 2f       	mov	r22, r28
     696:	61 70       	andi	r22, 0x01	; 1
     698:	84 e1       	ldi	r24, 0x14	; 20
     69a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     69e:	61 e0       	ldi	r22, 0x01	; 1
     6a0:	83 e1       	ldi	r24, 0x13	; 19
     6a2:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     6a6:	8f e9       	ldi	r24, 0x9F	; 159
     6a8:	9f e0       	ldi	r25, 0x0F	; 15
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <WriteIns+0xa0>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <WriteIns+0xa6>
     6b0:	00 00       	nop
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	83 e1       	ldi	r24, 0x13	; 19
     6b6:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     6ba:	8f e9       	ldi	r24, 0x9F	; 159
     6bc:	9f e0       	ldi	r25, 0x0F	; 15
     6be:	01 97       	sbiw	r24, 0x01	; 1
     6c0:	f1 f7       	brne	.-4      	; 0x6be <WriteIns+0xb4>
     6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <WriteIns+0xba>
     6c4:	00 00       	nop
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <WriteData>:
     6ca:	cf 93       	push	r28
     6cc:	c8 2f       	mov	r28, r24
     6ce:	61 e0       	ldi	r22, 0x01	; 1
     6d0:	81 e1       	ldi	r24, 0x11	; 17
     6d2:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     6d6:	6c 2f       	mov	r22, r28
     6d8:	66 1f       	adc	r22, r22
     6da:	66 27       	eor	r22, r22
     6dc:	66 1f       	adc	r22, r22
     6de:	87 e1       	ldi	r24, 0x17	; 23
     6e0:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     6e4:	c6 fb       	bst	r28, 6
     6e6:	66 27       	eor	r22, r22
     6e8:	60 f9       	bld	r22, 0
     6ea:	86 e1       	ldi	r24, 0x16	; 22
     6ec:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     6f0:	c5 fb       	bst	r28, 5
     6f2:	66 27       	eor	r22, r22
     6f4:	60 f9       	bld	r22, 0
     6f6:	85 e1       	ldi	r24, 0x15	; 21
     6f8:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     6fc:	c4 fb       	bst	r28, 4
     6fe:	66 27       	eor	r22, r22
     700:	60 f9       	bld	r22, 0
     702:	84 e1       	ldi	r24, 0x14	; 20
     704:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	83 e1       	ldi	r24, 0x13	; 19
     70c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     710:	8f e9       	ldi	r24, 0x9F	; 159
     712:	9f e0       	ldi	r25, 0x0F	; 15
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <WriteData+0x4a>
     718:	00 c0       	rjmp	.+0      	; 0x71a <WriteData+0x50>
     71a:	00 00       	nop
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	83 e1       	ldi	r24, 0x13	; 19
     720:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     724:	8f e9       	ldi	r24, 0x9F	; 159
     726:	9f e0       	ldi	r25, 0x0F	; 15
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <WriteData+0x5e>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <WriteData+0x64>
     72e:	00 00       	nop
     730:	c3 fb       	bst	r28, 3
     732:	66 27       	eor	r22, r22
     734:	60 f9       	bld	r22, 0
     736:	87 e1       	ldi	r24, 0x17	; 23
     738:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     73c:	c2 fb       	bst	r28, 2
     73e:	66 27       	eor	r22, r22
     740:	60 f9       	bld	r22, 0
     742:	86 e1       	ldi	r24, 0x16	; 22
     744:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     748:	c1 fb       	bst	r28, 1
     74a:	66 27       	eor	r22, r22
     74c:	60 f9       	bld	r22, 0
     74e:	85 e1       	ldi	r24, 0x15	; 21
     750:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     754:	6c 2f       	mov	r22, r28
     756:	61 70       	andi	r22, 0x01	; 1
     758:	84 e1       	ldi	r24, 0x14	; 20
     75a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     75e:	61 e0       	ldi	r22, 0x01	; 1
     760:	83 e1       	ldi	r24, 0x13	; 19
     762:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     766:	8f e9       	ldi	r24, 0x9F	; 159
     768:	9f e0       	ldi	r25, 0x0F	; 15
     76a:	01 97       	sbiw	r24, 0x01	; 1
     76c:	f1 f7       	brne	.-4      	; 0x76a <WriteData+0xa0>
     76e:	00 c0       	rjmp	.+0      	; 0x770 <WriteData+0xa6>
     770:	00 00       	nop
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	83 e1       	ldi	r24, 0x13	; 19
     776:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
     77a:	8f e9       	ldi	r24, 0x9F	; 159
     77c:	9f e0       	ldi	r25, 0x0F	; 15
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	f1 f7       	brne	.-4      	; 0x77e <WriteData+0xb4>
     782:	00 c0       	rjmp	.+0      	; 0x784 <WriteData+0xba>
     784:	00 00       	nop
     786:	cf 91       	pop	r28
     788:	08 95       	ret

0000078a <LCD_Init>:
     78a:	2f ef       	ldi	r18, 0xFF	; 255
     78c:	80 e7       	ldi	r24, 0x70	; 112
     78e:	92 e0       	ldi	r25, 0x02	; 2
     790:	21 50       	subi	r18, 0x01	; 1
     792:	80 40       	sbci	r24, 0x00	; 0
     794:	90 40       	sbci	r25, 0x00	; 0
     796:	e1 f7       	brne	.-8      	; 0x790 <LCD_Init+0x6>
     798:	00 c0       	rjmp	.+0      	; 0x79a <LCD_Init+0x10>
     79a:	00 00       	nop
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	0e 94 05 03 	call	0x60a	; 0x60a <WriteIns>
     7a2:	88 e2       	ldi	r24, 0x28	; 40
     7a4:	0e 94 05 03 	call	0x60a	; 0x60a <WriteIns>
     7a8:	8c e0       	ldi	r24, 0x0C	; 12
     7aa:	0e 94 05 03 	call	0x60a	; 0x60a <WriteIns>
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	0e 94 05 03 	call	0x60a	; 0x60a <WriteIns>
     7b4:	8f e9       	ldi	r24, 0x9F	; 159
     7b6:	9f e0       	ldi	r25, 0x0F	; 15
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <LCD_Init+0x2e>
     7bc:	00 c0       	rjmp	.+0      	; 0x7be <LCD_Init+0x34>
     7be:	00 00       	nop
     7c0:	86 e0       	ldi	r24, 0x06	; 6
     7c2:	0e 94 05 03 	call	0x60a	; 0x60a <WriteIns>
     7c6:	08 95       	ret

000007c8 <LCD_WriteChar>:
     7c8:	0e 94 65 03 	call	0x6ca	; 0x6ca <WriteData>
     7cc:	08 95       	ret

000007ce <LCD_WriteString>:
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	8c 01       	movw	r16, r24
     7d6:	c0 e0       	ldi	r28, 0x00	; 0
     7d8:	03 c0       	rjmp	.+6      	; 0x7e0 <LCD_WriteString+0x12>
     7da:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_WriteChar>
     7de:	cf 5f       	subi	r28, 0xFF	; 255
     7e0:	f8 01       	movw	r30, r16
     7e2:	ec 0f       	add	r30, r28
     7e4:	f1 1d       	adc	r31, r1
     7e6:	80 81       	ld	r24, Z
     7e8:	81 11       	cpse	r24, r1
     7ea:	f7 cf       	rjmp	.-18     	; 0x7da <LCD_WriteString+0xc>
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	08 95       	ret

000007f4 <LCD_SetCursor>:
     7f4:	81 11       	cpse	r24, r1
     7f6:	05 c0       	rjmp	.+10     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7f8:	86 2f       	mov	r24, r22
     7fa:	80 68       	ori	r24, 0x80	; 128
     7fc:	0e 94 05 03 	call	0x60a	; 0x60a <WriteIns>
     800:	08 95       	ret
     802:	81 30       	cpi	r24, 0x01	; 1
     804:	21 f4       	brne	.+8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     806:	80 ec       	ldi	r24, 0xC0	; 192
     808:	86 0f       	add	r24, r22
     80a:	0e 94 05 03 	call	0x60a	; 0x60a <WriteIns>
     80e:	08 95       	ret

00000810 <LCD_Clear>:
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	0e 94 05 03 	call	0x60a	; 0x60a <WriteIns>
     816:	8f e9       	ldi	r24, 0x9F	; 159
     818:	9f e0       	ldi	r25, 0x0F	; 15
     81a:	01 97       	sbiw	r24, 0x01	; 1
     81c:	f1 f7       	brne	.-4      	; 0x81a <LCD_Clear+0xa>
     81e:	00 c0       	rjmp	.+0      	; 0x820 <LCD_Clear+0x10>
     820:	00 00       	nop
     822:	08 95       	ret

00000824 <LCD_WriteNumber>:
     824:	cf 92       	push	r12
     826:	df 92       	push	r13
     828:	ef 92       	push	r14
     82a:	ff 92       	push	r15
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
     836:	2a 97       	sbiw	r28, 0x0a	; 10
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	f8 94       	cli
     83c:	de bf       	out	0x3e, r29	; 62
     83e:	0f be       	out	0x3f, r0	; 63
     840:	cd bf       	out	0x3d, r28	; 61
     842:	6b 01       	movw	r12, r22
     844:	7c 01       	movw	r14, r24
     846:	61 15       	cp	r22, r1
     848:	71 05       	cpc	r23, r1
     84a:	81 05       	cpc	r24, r1
     84c:	91 05       	cpc	r25, r1
     84e:	21 f4       	brne	.+8      	; 0x858 <LCD_WriteNumber+0x34>
     850:	80 e3       	ldi	r24, 0x30	; 48
     852:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_WriteChar>
     856:	39 c0       	rjmp	.+114    	; 0x8ca <__stack+0x6b>
     858:	99 23       	and	r25, r25
     85a:	5c f4       	brge	.+22     	; 0x872 <__stack+0x13>
     85c:	f0 94       	com	r15
     85e:	e0 94       	com	r14
     860:	d0 94       	com	r13
     862:	c0 94       	com	r12
     864:	c1 1c       	adc	r12, r1
     866:	d1 1c       	adc	r13, r1
     868:	e1 1c       	adc	r14, r1
     86a:	f1 1c       	adc	r15, r1
     86c:	8d e2       	ldi	r24, 0x2D	; 45
     86e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_WriteChar>
     872:	10 e0       	ldi	r17, 0x00	; 0
     874:	15 c0       	rjmp	.+42     	; 0x8a0 <__stack+0x41>
     876:	c7 01       	movw	r24, r14
     878:	b6 01       	movw	r22, r12
     87a:	2a e0       	ldi	r18, 0x0A	; 10
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__divmodsi4>
     886:	e1 e0       	ldi	r30, 0x01	; 1
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	ec 0f       	add	r30, r28
     88c:	fd 1f       	adc	r31, r29
     88e:	e1 0f       	add	r30, r17
     890:	f1 1d       	adc	r31, r1
     892:	60 5d       	subi	r22, 0xD0	; 208
     894:	60 83       	st	Z, r22
     896:	1f 5f       	subi	r17, 0xFF	; 255
     898:	c2 2e       	mov	r12, r18
     89a:	d3 2e       	mov	r13, r19
     89c:	e4 2e       	mov	r14, r20
     89e:	f5 2e       	mov	r15, r21
     8a0:	c1 14       	cp	r12, r1
     8a2:	d1 04       	cpc	r13, r1
     8a4:	e1 04       	cpc	r14, r1
     8a6:	f1 04       	cpc	r15, r1
     8a8:	31 f7       	brne	.-52     	; 0x876 <__stack+0x17>
     8aa:	0d c0       	rjmp	.+26     	; 0x8c6 <__stack+0x67>
     8ac:	e1 2f       	mov	r30, r17
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	31 97       	sbiw	r30, 0x01	; 1
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	8c 0f       	add	r24, r28
     8b8:	9d 1f       	adc	r25, r29
     8ba:	e8 0f       	add	r30, r24
     8bc:	f9 1f       	adc	r31, r25
     8be:	80 81       	ld	r24, Z
     8c0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_WriteChar>
     8c4:	11 50       	subi	r17, 0x01	; 1
     8c6:	11 11       	cpse	r17, r1
     8c8:	f1 cf       	rjmp	.-30     	; 0x8ac <__stack+0x4d>
     8ca:	2a 96       	adiw	r28, 0x0a	; 10
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	f8 94       	cli
     8d0:	de bf       	out	0x3e, r29	; 62
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	cd bf       	out	0x3d, r28	; 61
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	ff 90       	pop	r15
     8de:	ef 90       	pop	r14
     8e0:	df 90       	pop	r13
     8e2:	cf 90       	pop	r12
     8e4:	08 95       	ret

000008e6 <LCD_PinsInit>:
   void LCD_PinsInit ()
   {
	   DIO_initpin(RS,OUTPUT);
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	81 e1       	ldi	r24, 0x11	; 17
     8ea:	0e 94 38 05 	call	0xa70	; 0xa70 <DIO_initpin>
	   DIO_initpin(EN,OUTPUT);
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	83 e1       	ldi	r24, 0x13	; 19
     8f2:	0e 94 38 05 	call	0xa70	; 0xa70 <DIO_initpin>
	   DIO_initpin(RW,OUTPUT);
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	82 e1       	ldi	r24, 0x12	; 18
     8fa:	0e 94 38 05 	call	0xa70	; 0xa70 <DIO_initpin>
	   DIO_initpin(D4,OUTPUT);
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	84 e1       	ldi	r24, 0x14	; 20
     902:	0e 94 38 05 	call	0xa70	; 0xa70 <DIO_initpin>
	   DIO_initpin(D5,OUTPUT);
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	85 e1       	ldi	r24, 0x15	; 21
     90a:	0e 94 38 05 	call	0xa70	; 0xa70 <DIO_initpin>
	   DIO_initpin(D6,OUTPUT);
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	86 e1       	ldi	r24, 0x16	; 22
     912:	0e 94 38 05 	call	0xa70	; 0xa70 <DIO_initpin>
	   DIO_initpin(D7,OUTPUT);
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	87 e1       	ldi	r24, 0x17	; 23
     91a:	0e 94 38 05 	call	0xa70	; 0xa70 <DIO_initpin>
     91e:	08 95       	ret

00000920 <Car_Motors_init>:
/**DESCRIPTION:-
  this function initializes the DIO pins connected to the motors to be output
  **/
en_MotorError_t Car_Motors_init (void)
{
	DIO_initpin(motor1_0,OUTPUT);
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	0e 94 38 05 	call	0xa70	; 0xa70 <DIO_initpin>
	DIO_initpin(motor1_1,OUTPUT);
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	0e 94 38 05 	call	0xa70	; 0xa70 <DIO_initpin>
	DIO_initpin(motor2_0,OUTPUT);
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	82 e0       	ldi	r24, 0x02	; 2
     934:	0e 94 38 05 	call	0xa70	; 0xa70 <DIO_initpin>
	DIO_initpin(motor2_1,OUTPUT);
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	83 e0       	ldi	r24, 0x03	; 3
     93c:	0e 94 38 05 	call	0xa70	; 0xa70 <DIO_initpin>

	return motor_ok;
}
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	08 95       	ret

00000944 <Car_Moving_FWD>:
/**DESCRIPTION:-
this function is used to drive the motor to move in the +VE direction which will lead the car to move FWD
**/
en_MotorError_t Car_Moving_FWD(void)
{
	DIO_writepin(motor1_0,LOW);          //this is used to provide voltage to the +ve pin of the motor 
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	DIO_writepin(motor1_1,HIGH);           //this is used to provide the ground to the -ve pin of 
     94c:	61 e0       	ldi	r22, 0x01	; 1
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	DIO_writepin(motor2_0,LOW);
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	DIO_writepin(motor2_1,HIGH);
     95c:	61 e0       	ldi	r22, 0x01	; 1
     95e:	83 e0       	ldi	r24, 0x03	; 3
     960:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	
	return motor_ok;

}
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	08 95       	ret

00000968 <Car_Moving_BWD>:
/**DESCRIPTION:-
this function is used to drive the motor to move in the -VE direction which will lead the car to move BWD
**/
en_MotorError_t Car_Moving_BWD(void)
{
	DIO_writepin(motor1_0,HIGH);          //this is used to provide voltage to the -ve pin of the motor
     968:	61 e0       	ldi	r22, 0x01	; 1
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	DIO_writepin(motor1_1,LOW);           //this is used to provide the ground to the +ve pin of
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	DIO_writepin(motor2_0,HIGH);
     978:	61 e0       	ldi	r22, 0x01	; 1
     97a:	82 e0       	ldi	r24, 0x02	; 2
     97c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	DIO_writepin(motor2_1,LOW);
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	83 e0       	ldi	r24, 0x03	; 3
     984:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	
	return motor_ok;
}
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	08 95       	ret

0000098c <Car_Stop>:
this function is used to stop the 4 wheels by stopping the 4 motors*/
en_MotorError_t Car_Stop(void)
{
	
	
  DIO_writepin(motor1_0,LOW);          
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
  DIO_writepin(motor1_1,LOW);           
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
  DIO_writepin(motor2_0,LOW);
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	82 e0       	ldi	r24, 0x02	; 2
     9a0:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
  DIO_writepin(motor2_1,LOW);
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	83 e0       	ldi	r24, 0x03	; 3
     9a8:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>

	return motor_ok;
}
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	08 95       	ret

000009b0 <Car_Rotate_Right>:
this function is used to drive the right wheels to move BWD, and the left wheels to move FWD,
which will lead to rotation of the car */
en_MotorError_t Car_Rotate_Right(void)
{
	//this is used to provide the ground to the -ve pin of
	DIO_writepin(motor1_0,HIGH);
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	DIO_writepin(motor1_1,LOW);
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	
	//this is used to provide voltage to the +ve pin of the motor
	DIO_writepin(motor2_0,LOW);
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	82 e0       	ldi	r24, 0x02	; 2
     9c4:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	DIO_writepin(motor2_1,HIGH);
     9c8:	61 e0       	ldi	r22, 0x01	; 1
     9ca:	83 e0       	ldi	r24, 0x03	; 3
     9cc:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>

	return motor_ok;
}
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	08 95       	ret

000009d4 <Car_Rotate_Left>:
this function is used to drive the right wheels to move FWD, and the left wheels to move BWD,
which will lead to rotation of the car */
en_MotorError_t Car_Rotate_Left(void)
{
	//this is used to provide the ground to the +ve pin of
	DIO_writepin(motor1_0,LOW);
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	DIO_writepin(motor1_1,HIGH);
     9dc:	61 e0       	ldi	r22, 0x01	; 1
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	
	//this is used to provide voltage to the -ve pin of the motor
	DIO_writepin(motor2_0,HIGH);
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	DIO_writepin(motor2_1,LOW);
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	83 e0       	ldi	r24, 0x03	; 3
     9f0:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>

	return motor_ok;
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	08 95       	ret

000009f8 <US_trigger>:
	ICU_init();
}

static void US_trigger()
{
	DIO_writepin(ICU_TRIGGER_CH ,HIGH);
     9f8:	61 e0       	ldi	r22, 0x01	; 1
     9fa:	8b e0       	ldi	r24, 0x0B	; 11
     9fc:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a00:	8a e1       	ldi	r24, 0x1A	; 26
     a02:	8a 95       	dec	r24
     a04:	f1 f7       	brne	.-4      	; 0xa02 <US_trigger+0xa>
     a06:	00 c0       	rjmp	.+0      	; 0xa08 <US_trigger+0x10>
	_delay_us(10);
	DIO_writepin(ICU_TRIGGER_CH ,LOW);
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	8b e0       	ldi	r24, 0x0B	; 11
     a0c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
	timer1_setTimerValue(0);
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	0e 94 ab 0a 	call	0x1556	; 0x1556 <timer1_setTimerValue>
     a16:	08 95       	ret

00000a18 <US_init>:
volatile u8 flag=0;
volatile u16 t1,t2,t3;

void US_init()
{
	ICU_init();
     a18:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ICU_init>
     a1c:	08 95       	ret

00000a1e <US_getdistance>:
	timer1_setTimerValue(0);
}


u8 US_getdistance(u16 *pu16_distance)
{
     a1e:	0f 93       	push	r16
     a20:	1f 93       	push	r17
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	00 d0       	rcall	.+0      	; 0xa28 <US_getdistance+0xa>
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	8c 01       	movw	r16, r24
	u16 icu_time;
	US_trigger();
     a2e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <US_trigger>
	ICU_Read(&icu_time);
     a32:	ce 01       	movw	r24, r28
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	0e 94 6c 07 	call	0xed8	; 0xed8 <ICU_Read>
	*pu16_distance =(icu_time/58);   
     a3a:	29 81       	ldd	r18, Y+1	; 0x01
     a3c:	3a 81       	ldd	r19, Y+2	; 0x02
     a3e:	af e9       	ldi	r26, 0x9F	; 159
     a40:	b6 e4       	ldi	r27, 0x46	; 70
     a42:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__umulhisi3>
     a46:	92 95       	swap	r25
     a48:	82 95       	swap	r24
     a4a:	8f 70       	andi	r24, 0x0F	; 15
     a4c:	89 27       	eor	r24, r25
     a4e:	9f 70       	andi	r25, 0x0F	; 15
     a50:	89 27       	eor	r24, r25
     a52:	f8 01       	movw	r30, r16
     a54:	91 83       	std	Z+1, r25	; 0x01
     a56:	80 83       	st	Z, r24
}
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	08 95       	ret

00000a66 <main>:
#include "APP/app.h"

int main(void)
{   
	
	 app_init();
     a66:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <app_init>

    while (1) 
    {
		app_start();
     a6a:	0e 94 10 02 	call	0x420	; 0x420 <app_start>
     a6e:	fd cf       	rjmp	.-6      	; 0xa6a <main+0x4>

00000a70 <DIO_initpin>:
		  DIO_initpin(i,PinsStatusArray[i]);
	  }
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
     a70:	98 2f       	mov	r25, r24
     a72:	96 95       	lsr	r25
     a74:	96 95       	lsr	r25
     a76:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     a78:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error = DIO_OK;
	  
	  if (pin_num < 8)
	  {

		  switch(status)
     a7a:	61 30       	cpi	r22, 0x01	; 1
     a7c:	09 f4       	brne	.+2      	; 0xa80 <DIO_initpin+0x10>
     a7e:	59 c0       	rjmp	.+178    	; 0xb32 <DIO_initpin+0xc2>
     a80:	20 f0       	brcs	.+8      	; 0xa8a <DIO_initpin+0x1a>
     a82:	62 30       	cpi	r22, 0x02	; 2
     a84:	09 f4       	brne	.+2      	; 0xa88 <DIO_initpin+0x18>
     a86:	a9 c0       	rjmp	.+338    	; 0xbda <DIO_initpin+0x16a>
     a88:	fc c0       	rjmp	.+504    	; 0xc82 <DIO_initpin+0x212>
		  {
			  case OUTPUT:
			  switch(port)
     a8a:	91 30       	cpi	r25, 0x01	; 1
     a8c:	c9 f0       	breq	.+50     	; 0xac0 <DIO_initpin+0x50>
     a8e:	28 f0       	brcs	.+10     	; 0xa9a <DIO_initpin+0x2a>
     a90:	92 30       	cpi	r25, 0x02	; 2
     a92:	49 f1       	breq	.+82     	; 0xae6 <DIO_initpin+0x76>
     a94:	93 30       	cpi	r25, 0x03	; 3
     a96:	d1 f1       	breq	.+116    	; 0xb0c <DIO_initpin+0x9c>
     a98:	f6 c0       	rjmp	.+492    	; 0xc86 <DIO_initpin+0x216>
			  {
				  case PA:
				  SET_BIT( DDRA,pin_num);
     a9a:	4a b3       	in	r20, 0x1a	; 26
     a9c:	21 e0       	ldi	r18, 0x01	; 1
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	b9 01       	movw	r22, r18
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <DIO_initpin+0x38>
     aa4:	66 0f       	add	r22, r22
     aa6:	77 1f       	adc	r23, r23
     aa8:	8a 95       	dec	r24
     aaa:	e2 f7       	brpl	.-8      	; 0xaa4 <DIO_initpin+0x34>
     aac:	cb 01       	movw	r24, r22
     aae:	94 2f       	mov	r25, r20
     ab0:	98 2b       	or	r25, r24
     ab2:	9a bb       	out	0x1a, r25	; 26
				  CLR_BIT(PORTA,pin_num);
     ab4:	9b b3       	in	r25, 0x1b	; 27
     ab6:	80 95       	com	r24
     ab8:	89 23       	and	r24, r25
     aba:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     abc:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  SET_BIT( DDRA,pin_num);
				  CLR_BIT(PORTA,pin_num);
				  break;
     abe:	08 95       	ret
				  case PB:
				  SET_BIT( DDRB,pin_num);
     ac0:	47 b3       	in	r20, 0x17	; 23
     ac2:	21 e0       	ldi	r18, 0x01	; 1
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	b9 01       	movw	r22, r18
     ac8:	02 c0       	rjmp	.+4      	; 0xace <DIO_initpin+0x5e>
     aca:	66 0f       	add	r22, r22
     acc:	77 1f       	adc	r23, r23
     ace:	8a 95       	dec	r24
     ad0:	e2 f7       	brpl	.-8      	; 0xaca <DIO_initpin+0x5a>
     ad2:	cb 01       	movw	r24, r22
     ad4:	94 2f       	mov	r25, r20
     ad6:	98 2b       	or	r25, r24
     ad8:	97 bb       	out	0x17, r25	; 23
				  CLR_BIT(PORTB,pin_num);
     ada:	98 b3       	in	r25, 0x18	; 24
     adc:	80 95       	com	r24
     ade:	89 23       	and	r24, r25
     ae0:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     ae2:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  SET_BIT( DDRB,pin_num);
				  CLR_BIT(PORTB,pin_num);
				  break;
     ae4:	08 95       	ret
				  case PC:
				  SET_BIT( DDRC,pin_num);
     ae6:	44 b3       	in	r20, 0x14	; 20
     ae8:	21 e0       	ldi	r18, 0x01	; 1
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	b9 01       	movw	r22, r18
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <DIO_initpin+0x84>
     af0:	66 0f       	add	r22, r22
     af2:	77 1f       	adc	r23, r23
     af4:	8a 95       	dec	r24
     af6:	e2 f7       	brpl	.-8      	; 0xaf0 <DIO_initpin+0x80>
     af8:	cb 01       	movw	r24, r22
     afa:	94 2f       	mov	r25, r20
     afc:	98 2b       	or	r25, r24
     afe:	94 bb       	out	0x14, r25	; 20
				  CLR_BIT(PORTC,pin_num);
     b00:	95 b3       	in	r25, 0x15	; 21
     b02:	80 95       	com	r24
     b04:	89 23       	and	r24, r25
     b06:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     b08:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  SET_BIT( DDRC,pin_num);
				  CLR_BIT(PORTC,pin_num);
				  break;
     b0a:	08 95       	ret
				  case PD:
				  SET_BIT( DDRD,pin_num);
     b0c:	41 b3       	in	r20, 0x11	; 17
     b0e:	21 e0       	ldi	r18, 0x01	; 1
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	b9 01       	movw	r22, r18
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <DIO_initpin+0xaa>
     b16:	66 0f       	add	r22, r22
     b18:	77 1f       	adc	r23, r23
     b1a:	8a 95       	dec	r24
     b1c:	e2 f7       	brpl	.-8      	; 0xb16 <DIO_initpin+0xa6>
     b1e:	cb 01       	movw	r24, r22
     b20:	94 2f       	mov	r25, r20
     b22:	98 2b       	or	r25, r24
     b24:	91 bb       	out	0x11, r25	; 17
				  CLR_BIT(PORTD,pin_num);
     b26:	92 b3       	in	r25, 0x12	; 18
     b28:	80 95       	com	r24
     b2a:	89 23       	and	r24, r25
     b2c:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     b2e:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  SET_BIT( DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
     b30:	08 95       	ret
				  error = WRONG_PORT_NUMBER;
				  break;
			  }
			  break;
			  case INFREE:
			  switch(port)
     b32:	91 30       	cpi	r25, 0x01	; 1
     b34:	c9 f0       	breq	.+50     	; 0xb68 <DIO_initpin+0xf8>
     b36:	28 f0       	brcs	.+10     	; 0xb42 <DIO_initpin+0xd2>
     b38:	92 30       	cpi	r25, 0x02	; 2
     b3a:	49 f1       	breq	.+82     	; 0xb8e <DIO_initpin+0x11e>
     b3c:	93 30       	cpi	r25, 0x03	; 3
     b3e:	d1 f1       	breq	.+116    	; 0xbb4 <DIO_initpin+0x144>
     b40:	a4 c0       	rjmp	.+328    	; 0xc8a <DIO_initpin+0x21a>
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
     b42:	4a b3       	in	r20, 0x1a	; 26
     b44:	21 e0       	ldi	r18, 0x01	; 1
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	b9 01       	movw	r22, r18
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <DIO_initpin+0xe0>
     b4c:	66 0f       	add	r22, r22
     b4e:	77 1f       	adc	r23, r23
     b50:	8a 95       	dec	r24
     b52:	e2 f7       	brpl	.-8      	; 0xb4c <DIO_initpin+0xdc>
     b54:	cb 01       	movw	r24, r22
     b56:	80 95       	com	r24
     b58:	94 2f       	mov	r25, r20
     b5a:	98 23       	and	r25, r24
     b5c:	9a bb       	out	0x1a, r25	; 26
				  CLR_BIT(PORTA,pin_num);
     b5e:	9b b3       	in	r25, 0x1b	; 27
     b60:	89 23       	and	r24, r25
     b62:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     b64:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
				  CLR_BIT(PORTA,pin_num);
				  break;
     b66:	08 95       	ret
				  case PB:
				  CLR_BIT(DDRB,pin_num);
     b68:	47 b3       	in	r20, 0x17	; 23
     b6a:	21 e0       	ldi	r18, 0x01	; 1
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	b9 01       	movw	r22, r18
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <DIO_initpin+0x106>
     b72:	66 0f       	add	r22, r22
     b74:	77 1f       	adc	r23, r23
     b76:	8a 95       	dec	r24
     b78:	e2 f7       	brpl	.-8      	; 0xb72 <DIO_initpin+0x102>
     b7a:	cb 01       	movw	r24, r22
     b7c:	80 95       	com	r24
     b7e:	94 2f       	mov	r25, r20
     b80:	98 23       	and	r25, r24
     b82:	97 bb       	out	0x17, r25	; 23
				  CLR_BIT(PORTB,pin_num);
     b84:	98 b3       	in	r25, 0x18	; 24
     b86:	89 23       	and	r24, r25
     b88:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     b8a:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  CLR_BIT(DDRB,pin_num);
				  CLR_BIT(PORTB,pin_num);
				  break;
     b8c:	08 95       	ret
				  case PC:
				  CLR_BIT(DDRC,pin_num);
     b8e:	44 b3       	in	r20, 0x14	; 20
     b90:	21 e0       	ldi	r18, 0x01	; 1
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	b9 01       	movw	r22, r18
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <DIO_initpin+0x12c>
     b98:	66 0f       	add	r22, r22
     b9a:	77 1f       	adc	r23, r23
     b9c:	8a 95       	dec	r24
     b9e:	e2 f7       	brpl	.-8      	; 0xb98 <DIO_initpin+0x128>
     ba0:	cb 01       	movw	r24, r22
     ba2:	80 95       	com	r24
     ba4:	94 2f       	mov	r25, r20
     ba6:	98 23       	and	r25, r24
     ba8:	94 bb       	out	0x14, r25	; 20
				  CLR_BIT(PORTC,pin_num);
     baa:	95 b3       	in	r25, 0x15	; 21
     bac:	89 23       	and	r24, r25
     bae:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     bb0:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  CLR_BIT(DDRC,pin_num);
				  CLR_BIT(PORTC,pin_num);
				  break;
     bb2:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
     bb4:	41 b3       	in	r20, 0x11	; 17
     bb6:	21 e0       	ldi	r18, 0x01	; 1
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	b9 01       	movw	r22, r18
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <DIO_initpin+0x152>
     bbe:	66 0f       	add	r22, r22
     bc0:	77 1f       	adc	r23, r23
     bc2:	8a 95       	dec	r24
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <DIO_initpin+0x14e>
     bc6:	cb 01       	movw	r24, r22
     bc8:	80 95       	com	r24
     bca:	94 2f       	mov	r25, r20
     bcc:	98 23       	and	r25, r24
     bce:	91 bb       	out	0x11, r25	; 17
				  CLR_BIT(PORTD,pin_num);
     bd0:	92 b3       	in	r25, 0x12	; 18
     bd2:	89 23       	and	r24, r25
     bd4:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     bd6:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
     bd8:	08 95       	ret
				  break;
			  }
			  break;

			  case INPULL:
			  switch(port)
     bda:	91 30       	cpi	r25, 0x01	; 1
     bdc:	c9 f0       	breq	.+50     	; 0xc10 <DIO_initpin+0x1a0>
     bde:	28 f0       	brcs	.+10     	; 0xbea <DIO_initpin+0x17a>
     be0:	92 30       	cpi	r25, 0x02	; 2
     be2:	49 f1       	breq	.+82     	; 0xc36 <DIO_initpin+0x1c6>
     be4:	93 30       	cpi	r25, 0x03	; 3
     be6:	d1 f1       	breq	.+116    	; 0xc5c <DIO_initpin+0x1ec>
     be8:	52 c0       	rjmp	.+164    	; 0xc8e <DIO_initpin+0x21e>
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
     bea:	4a b3       	in	r20, 0x1a	; 26
     bec:	21 e0       	ldi	r18, 0x01	; 1
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	b9 01       	movw	r22, r18
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <DIO_initpin+0x188>
     bf4:	66 0f       	add	r22, r22
     bf6:	77 1f       	adc	r23, r23
     bf8:	8a 95       	dec	r24
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <DIO_initpin+0x184>
     bfc:	cb 01       	movw	r24, r22
     bfe:	96 2f       	mov	r25, r22
     c00:	90 95       	com	r25
     c02:	94 23       	and	r25, r20
     c04:	9a bb       	out	0x1a, r25	; 26
				  SET_BIT(PORTA,pin_num);
     c06:	9b b3       	in	r25, 0x1b	; 27
     c08:	89 2b       	or	r24, r25
     c0a:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     c0c:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
				  SET_BIT(PORTA,pin_num);
				  break;
     c0e:	08 95       	ret
				  case PB:
				  CLR_BIT(DDRB,pin_num);
     c10:	47 b3       	in	r20, 0x17	; 23
     c12:	21 e0       	ldi	r18, 0x01	; 1
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	b9 01       	movw	r22, r18
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <DIO_initpin+0x1ae>
     c1a:	66 0f       	add	r22, r22
     c1c:	77 1f       	adc	r23, r23
     c1e:	8a 95       	dec	r24
     c20:	e2 f7       	brpl	.-8      	; 0xc1a <DIO_initpin+0x1aa>
     c22:	cb 01       	movw	r24, r22
     c24:	96 2f       	mov	r25, r22
     c26:	90 95       	com	r25
     c28:	94 23       	and	r25, r20
     c2a:	97 bb       	out	0x17, r25	; 23
				  SET_BIT(PORTB,pin_num);
     c2c:	98 b3       	in	r25, 0x18	; 24
     c2e:	89 2b       	or	r24, r25
     c30:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     c32:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  CLR_BIT(DDRB,pin_num);
				  SET_BIT(PORTB,pin_num);
				  break;
     c34:	08 95       	ret
				  case PC:
				  CLR_BIT(DDRC,pin_num);
     c36:	44 b3       	in	r20, 0x14	; 20
     c38:	21 e0       	ldi	r18, 0x01	; 1
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	b9 01       	movw	r22, r18
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_initpin+0x1d4>
     c40:	66 0f       	add	r22, r22
     c42:	77 1f       	adc	r23, r23
     c44:	8a 95       	dec	r24
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <DIO_initpin+0x1d0>
     c48:	cb 01       	movw	r24, r22
     c4a:	96 2f       	mov	r25, r22
     c4c:	90 95       	com	r25
     c4e:	94 23       	and	r25, r20
     c50:	94 bb       	out	0x14, r25	; 20
				  SET_BIT(PORTC,pin_num);
     c52:	95 b3       	in	r25, 0x15	; 21
     c54:	89 2b       	or	r24, r25
     c56:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     c58:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  CLR_BIT(DDRC,pin_num);
				  SET_BIT(PORTC,pin_num);
				  break;
     c5a:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
     c5c:	41 b3       	in	r20, 0x11	; 17
     c5e:	21 e0       	ldi	r18, 0x01	; 1
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	b9 01       	movw	r22, r18
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <DIO_initpin+0x1fa>
     c66:	66 0f       	add	r22, r22
     c68:	77 1f       	adc	r23, r23
     c6a:	8a 95       	dec	r24
     c6c:	e2 f7       	brpl	.-8      	; 0xc66 <DIO_initpin+0x1f6>
     c6e:	cb 01       	movw	r24, r22
     c70:	96 2f       	mov	r25, r22
     c72:	90 95       	com	r25
     c74:	94 23       	and	r25, r20
     c76:	91 bb       	out	0x11, r25	; 17
				  SET_BIT(PORTD,pin_num);
     c78:	92 b3       	in	r25, 0x12	; 18
     c7a:	89 2b       	or	r24, r25
     c7c:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     c7e:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  SET_BIT(PORTD,pin_num);
				  break;
     c80:	08 95       	ret
				  error = WRONG_PORT_NUMBER;
				  break;
			  }
			  break;
			  default:
			  error = WRONG_PORT_NUMBER;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	08 95       	ret
				  case PD:
				  SET_BIT( DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  SET_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     c8e:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
     c90:	08 95       	ret

00000c92 <DIO_Init_All>:
	    return error;
    }
//////////////////////////////////////////////////////////////////////*/
//pin MODE
  void DIO_Init_All(void)
  {
     c92:	cf 93       	push	r28
	  DIO_Pin_type i;
	  for (i=PINA0; i<TOTAL_PINS; i++)
     c94:	c0 e0       	ldi	r28, 0x00	; 0
     c96:	09 c0       	rjmp	.+18     	; 0xcaa <DIO_Init_All+0x18>
	  {
		  DIO_initpin(i,PinsStatusArray[i]);
     c98:	ec 2f       	mov	r30, r28
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	e9 50       	subi	r30, 0x09	; 9
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	60 81       	ld	r22, Z
     ca2:	8c 2f       	mov	r24, r28
     ca4:	0e 94 38 05 	call	0xa70	; 0xa70 <DIO_initpin>
//////////////////////////////////////////////////////////////////////*/
//pin MODE
  void DIO_Init_All(void)
  {
	  DIO_Pin_type i;
	  for (i=PINA0; i<TOTAL_PINS; i++)
     ca8:	cf 5f       	subi	r28, 0xFF	; 255
     caa:	c0 32       	cpi	r28, 0x20	; 32
     cac:	a8 f3       	brcs	.-22     	; 0xc98 <DIO_Init_All+0x6>
	  {
		  DIO_initpin(i,PinsStatusArray[i]);
	  }
  }
     cae:	cf 91       	pop	r28
     cb0:	08 95       	ret

00000cb2 <DIO_writepin>:
	  return error;

  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
     cb2:	98 2f       	mov	r25, r24
     cb4:	96 95       	lsr	r25
     cb6:	96 95       	lsr	r25
     cb8:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     cba:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error= DIO_OK;
	  if (pin_num<8)
	  {
		  switch (volt)
     cbc:	66 23       	and	r22, r22
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <DIO_writepin+0x10>
     cc0:	43 c0       	rjmp	.+134    	; 0xd48 <DIO_writepin+0x96>
     cc2:	61 30       	cpi	r22, 0x01	; 1
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <DIO_writepin+0x16>
     cc6:	84 c0       	rjmp	.+264    	; 0xdd0 <DIO_writepin+0x11e>
		  {
			  case HIGH:

			  switch(port)
     cc8:	91 30       	cpi	r25, 0x01	; 1
     cca:	a1 f0       	breq	.+40     	; 0xcf4 <DIO_writepin+0x42>
     ccc:	28 f0       	brcs	.+10     	; 0xcd8 <DIO_writepin+0x26>
     cce:	92 30       	cpi	r25, 0x02	; 2
     cd0:	f9 f0       	breq	.+62     	; 0xd10 <DIO_writepin+0x5e>
     cd2:	93 30       	cpi	r25, 0x03	; 3
     cd4:	59 f1       	breq	.+86     	; 0xd2c <DIO_writepin+0x7a>
     cd6:	7e c0       	rjmp	.+252    	; 0xdd4 <DIO_writepin+0x122>
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
     cd8:	4b b3       	in	r20, 0x1b	; 27
     cda:	21 e0       	ldi	r18, 0x01	; 1
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	b9 01       	movw	r22, r18
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <DIO_writepin+0x34>
     ce2:	66 0f       	add	r22, r22
     ce4:	77 1f       	adc	r23, r23
     ce6:	8a 95       	dec	r24
     ce8:	e2 f7       	brpl	.-8      	; 0xce2 <DIO_writepin+0x30>
     cea:	cb 01       	movw	r24, r22
     cec:	84 2b       	or	r24, r20
     cee:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     cf0:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
				  break;
     cf2:	08 95       	ret
				  case PB:

				  SET_BIT(PORTB,pin_num);
     cf4:	48 b3       	in	r20, 0x18	; 24
     cf6:	21 e0       	ldi	r18, 0x01	; 1
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	b9 01       	movw	r22, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <DIO_writepin+0x50>
     cfe:	66 0f       	add	r22, r22
     d00:	77 1f       	adc	r23, r23
     d02:	8a 95       	dec	r24
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <DIO_writepin+0x4c>
     d06:	cb 01       	movw	r24, r22
     d08:	84 2b       	or	r24, r20
     d0a:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     d0c:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  SET_BIT(PORTB,pin_num);
				  break;
     d0e:	08 95       	ret
				  case PC:

				  SET_BIT(PORTC,pin_num);
     d10:	45 b3       	in	r20, 0x15	; 21
     d12:	21 e0       	ldi	r18, 0x01	; 1
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	b9 01       	movw	r22, r18
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <DIO_writepin+0x6c>
     d1a:	66 0f       	add	r22, r22
     d1c:	77 1f       	adc	r23, r23
     d1e:	8a 95       	dec	r24
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <DIO_writepin+0x68>
     d22:	cb 01       	movw	r24, r22
     d24:	84 2b       	or	r24, r20
     d26:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     d28:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  SET_BIT(PORTC,pin_num);
				  break;
     d2a:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
     d2c:	42 b3       	in	r20, 0x12	; 18
     d2e:	21 e0       	ldi	r18, 0x01	; 1
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	b9 01       	movw	r22, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <DIO_writepin+0x88>
     d36:	66 0f       	add	r22, r22
     d38:	77 1f       	adc	r23, r23
     d3a:	8a 95       	dec	r24
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <DIO_writepin+0x84>
     d3e:	cb 01       	movw	r24, r22
     d40:	84 2b       	or	r24, r20
     d42:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     d44:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
     d46:	08 95       	ret
			  }
			  break;

			  case LOW:

			  switch(port)
     d48:	91 30       	cpi	r25, 0x01	; 1
     d4a:	a9 f0       	breq	.+42     	; 0xd76 <DIO_writepin+0xc4>
     d4c:	28 f0       	brcs	.+10     	; 0xd58 <DIO_writepin+0xa6>
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	09 f1       	breq	.+66     	; 0xd94 <DIO_writepin+0xe2>
     d52:	93 30       	cpi	r25, 0x03	; 3
     d54:	71 f1       	breq	.+92     	; 0xdb2 <DIO_writepin+0x100>
     d56:	40 c0       	rjmp	.+128    	; 0xdd8 <DIO_writepin+0x126>
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
     d58:	4b b3       	in	r20, 0x1b	; 27
     d5a:	21 e0       	ldi	r18, 0x01	; 1
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	b9 01       	movw	r22, r18
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <DIO_writepin+0xb4>
     d62:	66 0f       	add	r22, r22
     d64:	77 1f       	adc	r23, r23
     d66:	8a 95       	dec	r24
     d68:	e2 f7       	brpl	.-8      	; 0xd62 <DIO_writepin+0xb0>
     d6a:	cb 01       	movw	r24, r22
     d6c:	80 95       	com	r24
     d6e:	84 23       	and	r24, r20
     d70:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     d72:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
				  break;
     d74:	08 95       	ret
				  case PB:

				  CLR_BIT(PORTB,pin_num);
     d76:	48 b3       	in	r20, 0x18	; 24
     d78:	21 e0       	ldi	r18, 0x01	; 1
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	b9 01       	movw	r22, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <DIO_writepin+0xd2>
     d80:	66 0f       	add	r22, r22
     d82:	77 1f       	adc	r23, r23
     d84:	8a 95       	dec	r24
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <DIO_writepin+0xce>
     d88:	cb 01       	movw	r24, r22
     d8a:	80 95       	com	r24
     d8c:	84 23       	and	r24, r20
     d8e:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     d90:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  CLR_BIT(PORTB,pin_num);
				  break;
     d92:	08 95       	ret
				  case PC:

				  CLR_BIT(PORTC,pin_num);
     d94:	45 b3       	in	r20, 0x15	; 21
     d96:	21 e0       	ldi	r18, 0x01	; 1
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	b9 01       	movw	r22, r18
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <DIO_writepin+0xf0>
     d9e:	66 0f       	add	r22, r22
     da0:	77 1f       	adc	r23, r23
     da2:	8a 95       	dec	r24
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <DIO_writepin+0xec>
     da6:	cb 01       	movw	r24, r22
     da8:	80 95       	com	r24
     daa:	84 23       	and	r24, r20
     dac:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     dae:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  CLR_BIT(PORTC,pin_num);
				  break;
     db0:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
     db2:	42 b3       	in	r20, 0x12	; 18
     db4:	21 e0       	ldi	r18, 0x01	; 1
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	b9 01       	movw	r22, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <DIO_writepin+0x10e>
     dbc:	66 0f       	add	r22, r22
     dbe:	77 1f       	adc	r23, r23
     dc0:	8a 95       	dec	r24
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <DIO_writepin+0x10a>
     dc4:	cb 01       	movw	r24, r22
     dc6:	80 95       	com	r24
     dc8:	84 23       	and	r24, r20
     dca:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     dcc:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
     dce:	08 95       	ret
			  }

			  break;

			  default:
			  error = WRONG_VALUE;
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
     dda:	08 95       	ret

00000ddc <DIO_readpin>:
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
     ddc:	98 2f       	mov	r25, r24
     dde:	96 95       	lsr	r25
     de0:	96 95       	lsr	r25
     de2:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     de4:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error = DIO_OK;
	  if (pin_num < 8)
	  {

		  switch(port)
     de6:	91 30       	cpi	r25, 0x01	; 1
     de8:	a1 f0       	breq	.+40     	; 0xe12 <DIO_readpin+0x36>
     dea:	28 f0       	brcs	.+10     	; 0xdf6 <DIO_readpin+0x1a>
     dec:	92 30       	cpi	r25, 0x02	; 2
     dee:	f9 f0       	breq	.+62     	; 0xe2e <DIO_readpin+0x52>
     df0:	93 30       	cpi	r25, 0x03	; 3
     df2:	59 f1       	breq	.+86     	; 0xe4a <DIO_readpin+0x6e>
     df4:	38 c0       	rjmp	.+112    	; 0xe66 <DIO_readpin+0x8a>
		  {
			  case PA:

			  *volt=READ_BIT(PINA,pin_num);
     df6:	29 b3       	in	r18, 0x19	; 25
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	a9 01       	movw	r20, r18
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <DIO_readpin+0x26>
     dfe:	55 95       	asr	r21
     e00:	47 95       	ror	r20
     e02:	8a 95       	dec	r24
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <DIO_readpin+0x22>
     e06:	ca 01       	movw	r24, r20
     e08:	81 70       	andi	r24, 0x01	; 1
     e0a:	fb 01       	movw	r30, r22
     e0c:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     e0e:	80 e0       	ldi	r24, 0x00	; 0
		  switch(port)
		  {
			  case PA:

			  *volt=READ_BIT(PINA,pin_num);
			  break;
     e10:	08 95       	ret
			  case PB:

			  *volt=READ_BIT(PINB,pin_num);
     e12:	26 b3       	in	r18, 0x16	; 22
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	a9 01       	movw	r20, r18
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <DIO_readpin+0x42>
     e1a:	55 95       	asr	r21
     e1c:	47 95       	ror	r20
     e1e:	8a 95       	dec	r24
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <DIO_readpin+0x3e>
     e22:	ca 01       	movw	r24, r20
     e24:	81 70       	andi	r24, 0x01	; 1
     e26:	fb 01       	movw	r30, r22
     e28:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     e2a:	80 e0       	ldi	r24, 0x00	; 0
			  *volt=READ_BIT(PINA,pin_num);
			  break;
			  case PB:

			  *volt=READ_BIT(PINB,pin_num);
			  break;
     e2c:	08 95       	ret
			  case PC:

			  *volt=READ_BIT(PINC,pin_num);
     e2e:	23 b3       	in	r18, 0x13	; 19
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	a9 01       	movw	r20, r18
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <DIO_readpin+0x5e>
     e36:	55 95       	asr	r21
     e38:	47 95       	ror	r20
     e3a:	8a 95       	dec	r24
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <DIO_readpin+0x5a>
     e3e:	ca 01       	movw	r24, r20
     e40:	81 70       	andi	r24, 0x01	; 1
     e42:	fb 01       	movw	r30, r22
     e44:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     e46:	80 e0       	ldi	r24, 0x00	; 0
			  *volt=READ_BIT(PINB,pin_num);
			  break;
			  case PC:

			  *volt=READ_BIT(PINC,pin_num);
			  break;
     e48:	08 95       	ret
			  case PD:

			  *volt=READ_BIT(PIND,pin_num);
     e4a:	20 b3       	in	r18, 0x10	; 16
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	a9 01       	movw	r20, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <DIO_readpin+0x7a>
     e52:	55 95       	asr	r21
     e54:	47 95       	ror	r20
     e56:	8a 95       	dec	r24
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <DIO_readpin+0x76>
     e5a:	ca 01       	movw	r24, r20
     e5c:	81 70       	andi	r24, 0x01	; 1
     e5e:	fb 01       	movw	r30, r22
     e60:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     e62:	80 e0       	ldi	r24, 0x00	; 0
			  *volt=READ_BIT(PINC,pin_num);
			  break;
			  case PD:

			  *volt=READ_BIT(PIND,pin_num);
			  break;
     e64:	08 95       	ret
			  default:
			  error = WRONG_PORT_NUMBER;
     e66:	81 e0       	ldi	r24, 0x01	; 1
	  else
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;
  }
     e68:	08 95       	ret

00000e6a <ICU_Read_callbackfun>:

static volatile u16 t1,t2,ICU_flag=0;

static void ICU_Read_callbackfun(void)
{
	if (ICU_flag==0)
     e6a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
     e6e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
     e72:	89 2b       	or	r24, r25
     e74:	79 f4       	brne	.+30     	; 0xe94 <ICU_Read_callbackfun+0x2a>
	{
		timer1_ReadCounts(&t1);
     e76:	8c e1       	ldi	r24, 0x1C	; 28
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	0e 94 a5 0a 	call	0x154a	; 0x154a <timer1_ReadCounts>
		EXI_TriggerEdge(ICU_EXI_INT,FALLING_EDGE);
     e7e:	62 e0       	ldi	r22, 0x02	; 2
     e80:	82 e0       	ldi	r24, 0x02	; 2
     e82:	0e 94 b9 07 	call	0xf72	; 0xf72 <EXI_TriggerEdge>
		ICU_flag=1;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
     e8e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
     e92:	08 95       	ret
	}
	else if (ICU_flag==1)
     e94:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
     e98:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	51 f4       	brne	.+20     	; 0xeb4 <ICU_Read_callbackfun+0x4a>
	{
		timer1_ReadCounts(&t2);
     ea0:	8a e1       	ldi	r24, 0x1A	; 26
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	0e 94 a5 0a 	call	0x154a	; 0x154a <timer1_ReadCounts>
		ICU_flag=2;
     ea8:	82 e0       	ldi	r24, 0x02	; 2
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
     eb0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
     eb4:	08 95       	ret

00000eb6 <ICU_init>:
	}
}
void ICU_init ()
{
	Timer1_Init(TIMER1_NORMAL_MODE,TIMER1_SCALER_8);
     eb6:	62 e0       	ldi	r22, 0x02	; 2
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	0e 94 d6 09 	call	0x13ac	; 0x13ac <Timer1_Init>
	// DIO_initpin(ICU_CH,INFREE);                              // in init all pins
	EXI_Enable(ICU_EXI_INT);
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	0e 94 a7 07 	call	0xf4e	; 0xf4e <EXI_Enable>
	EXI_TriggerEdge(ICU_EXI_INT,RISING_EDGE);
     ec4:	63 e0       	ldi	r22, 0x03	; 3
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	0e 94 b9 07 	call	0xf72	; 0xf72 <EXI_TriggerEdge>
	EXI_SetCallBack(ICU_EXI_INT, ICU_Read_callbackfun );
     ecc:	65 e3       	ldi	r22, 0x35	; 53
     ece:	77 e0       	ldi	r23, 0x07	; 7
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	0e 94 19 08 	call	0x1032	; 0x1032 <EXI_SetCallBack>
     ed6:	08 95       	ret

00000ed8 <ICU_Read>:

}

u8 ICU_Read(u16 *pu16_PeriodTime)
{
     ed8:	0f 93       	push	r16
     eda:	1f 93       	push	r17
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	8c 01       	movw	r16, r24

	u16 timeout ;
	EXI_TriggerEdge(ICU_EXI_INT,RISING_EDGE);
     ee2:	63 e0       	ldi	r22, 0x03	; 3
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	0e 94 b9 07 	call	0xf72	; 0xf72 <EXI_TriggerEdge>
	timer1_setTimerValue(0);
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	0e 94 ab 0a 	call	0x1556	; 0x1556 <timer1_setTimerValue>
	ICU_flag=0;
     ef0:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x1>
     ef4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
		while((ICU_flag<2)&&(timeout<23000))
     ef8:	05 c0       	rjmp	.+10     	; 0xf04 <ICU_Read+0x2c>
		{
			timeout++;
     efa:	21 96       	adiw	r28, 0x01	; 1
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	8a 95       	dec	r24
     f00:	f1 f7       	brne	.-4      	; 0xefe <ICU_Read+0x26>
     f02:	00 c0       	rjmp	.+0      	; 0xf04 <ICU_Read+0x2c>

	u16 timeout ;
	EXI_TriggerEdge(ICU_EXI_INT,RISING_EDGE);
	timer1_setTimerValue(0);
	ICU_flag=0;
		while((ICU_flag<2)&&(timeout<23000))
     f04:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
     f08:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
     f0c:	02 97       	sbiw	r24, 0x02	; 2
     f0e:	20 f4       	brcc	.+8      	; 0xf18 <ICU_Read+0x40>
     f10:	c8 3d       	cpi	r28, 0xD8	; 216
     f12:	e9 e5       	ldi	r30, 0x59	; 89
     f14:	de 07       	cpc	r29, r30
     f16:	88 f3       	brcs	.-30     	; 0xefa <ICU_Read+0x22>
		{
			timeout++;
			_delay_us(1);
		}
		
		if(ICU_flag==2)
     f18:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
     f1c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
     f20:	02 97       	sbiw	r24, 0x02	; 2
     f22:	79 f4       	brne	.+30     	; 0xf42 <ICU_Read+0x6a>
		{
			*pu16_PeriodTime =(t2-t1);
     f24:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <t2>
     f28:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <t2+0x1>
     f2c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <t1>
     f30:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <t1+0x1>
     f34:	82 1b       	sub	r24, r18
     f36:	93 0b       	sbc	r25, r19
     f38:	f8 01       	movw	r30, r16
     f3a:	91 83       	std	Z+1, r25	; 0x01
     f3c:	80 83       	st	Z, r24
			
			return 1 ;    //done
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	01 c0       	rjmp	.+2      	; 0xf44 <ICU_Read+0x6c>
		}
	
	return  0; //timeout
     f42:	80 e0       	ldi	r24, 0x00	; 0
}
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	08 95       	ret

00000f4e <EXI_Enable>:

void EXI_Init(void)
{
	EXI_TriggerEdge(EX_INT0,FALLING_EDGE);
	EXI_TriggerEdge(EX_INT1,FALLING_EDGE);
	EXI_TriggerEdge(EX_INT2,FALLING_EDGE);
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	41 f0       	breq	.+16     	; 0xf62 <EXI_Enable+0x14>
     f52:	18 f0       	brcs	.+6      	; 0xf5a <EXI_Enable+0xc>
     f54:	82 30       	cpi	r24, 0x02	; 2
     f56:	49 f0       	breq	.+18     	; 0xf6a <EXI_Enable+0x1c>
     f58:	08 95       	ret
     f5a:	8b b7       	in	r24, 0x3b	; 59
     f5c:	80 64       	ori	r24, 0x40	; 64
     f5e:	8b bf       	out	0x3b, r24	; 59
     f60:	08 95       	ret
     f62:	8b b7       	in	r24, 0x3b	; 59
     f64:	80 68       	ori	r24, 0x80	; 128
     f66:	8b bf       	out	0x3b, r24	; 59
     f68:	08 95       	ret
     f6a:	8b b7       	in	r24, 0x3b	; 59
     f6c:	80 62       	ori	r24, 0x20	; 32
     f6e:	8b bf       	out	0x3b, r24	; 59
     f70:	08 95       	ret

00000f72 <EXI_TriggerEdge>:
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	49 f1       	breq	.+82     	; 0xfc8 <EXI_TriggerEdge+0x56>
     f76:	20 f0       	brcs	.+8      	; 0xf80 <EXI_TriggerEdge+0xe>
     f78:	82 30       	cpi	r24, 0x02	; 2
     f7a:	09 f4       	brne	.+2      	; 0xf7e <EXI_TriggerEdge+0xc>
     f7c:	49 c0       	rjmp	.+146    	; 0x1010 <EXI_TriggerEdge+0x9e>
     f7e:	08 95       	ret
     f80:	61 30       	cpi	r22, 0x01	; 1
     f82:	69 f0       	breq	.+26     	; 0xf9e <EXI_TriggerEdge+0x2c>
     f84:	28 f0       	brcs	.+10     	; 0xf90 <EXI_TriggerEdge+0x1e>
     f86:	62 30       	cpi	r22, 0x02	; 2
     f88:	89 f0       	breq	.+34     	; 0xfac <EXI_TriggerEdge+0x3a>
     f8a:	63 30       	cpi	r22, 0x03	; 3
     f8c:	b1 f0       	breq	.+44     	; 0xfba <EXI_TriggerEdge+0x48>
     f8e:	08 95       	ret
     f90:	85 b7       	in	r24, 0x35	; 53
     f92:	8e 7f       	andi	r24, 0xFE	; 254
     f94:	85 bf       	out	0x35, r24	; 53
     f96:	85 b7       	in	r24, 0x35	; 53
     f98:	8d 7f       	andi	r24, 0xFD	; 253
     f9a:	85 bf       	out	0x35, r24	; 53
     f9c:	08 95       	ret
     f9e:	85 b7       	in	r24, 0x35	; 53
     fa0:	81 60       	ori	r24, 0x01	; 1
     fa2:	85 bf       	out	0x35, r24	; 53
     fa4:	85 b7       	in	r24, 0x35	; 53
     fa6:	8d 7f       	andi	r24, 0xFD	; 253
     fa8:	85 bf       	out	0x35, r24	; 53
     faa:	08 95       	ret
     fac:	85 b7       	in	r24, 0x35	; 53
     fae:	8e 7f       	andi	r24, 0xFE	; 254
     fb0:	85 bf       	out	0x35, r24	; 53
     fb2:	85 b7       	in	r24, 0x35	; 53
     fb4:	82 60       	ori	r24, 0x02	; 2
     fb6:	85 bf       	out	0x35, r24	; 53
     fb8:	08 95       	ret
     fba:	85 b7       	in	r24, 0x35	; 53
     fbc:	81 60       	ori	r24, 0x01	; 1
     fbe:	85 bf       	out	0x35, r24	; 53
     fc0:	85 b7       	in	r24, 0x35	; 53
     fc2:	82 60       	ori	r24, 0x02	; 2
     fc4:	85 bf       	out	0x35, r24	; 53
     fc6:	08 95       	ret
     fc8:	61 30       	cpi	r22, 0x01	; 1
     fca:	69 f0       	breq	.+26     	; 0xfe6 <EXI_TriggerEdge+0x74>
     fcc:	28 f0       	brcs	.+10     	; 0xfd8 <EXI_TriggerEdge+0x66>
     fce:	62 30       	cpi	r22, 0x02	; 2
     fd0:	89 f0       	breq	.+34     	; 0xff4 <EXI_TriggerEdge+0x82>
     fd2:	63 30       	cpi	r22, 0x03	; 3
     fd4:	b1 f0       	breq	.+44     	; 0x1002 <EXI_TriggerEdge+0x90>
     fd6:	08 95       	ret
     fd8:	85 b7       	in	r24, 0x35	; 53
     fda:	8b 7f       	andi	r24, 0xFB	; 251
     fdc:	85 bf       	out	0x35, r24	; 53
     fde:	85 b7       	in	r24, 0x35	; 53
     fe0:	87 7f       	andi	r24, 0xF7	; 247
     fe2:	85 bf       	out	0x35, r24	; 53
     fe4:	08 95       	ret
     fe6:	85 b7       	in	r24, 0x35	; 53
     fe8:	84 60       	ori	r24, 0x04	; 4
     fea:	85 bf       	out	0x35, r24	; 53
     fec:	85 b7       	in	r24, 0x35	; 53
     fee:	87 7f       	andi	r24, 0xF7	; 247
     ff0:	85 bf       	out	0x35, r24	; 53
     ff2:	08 95       	ret
     ff4:	85 b7       	in	r24, 0x35	; 53
     ff6:	8b 7f       	andi	r24, 0xFB	; 251
     ff8:	85 bf       	out	0x35, r24	; 53
     ffa:	85 b7       	in	r24, 0x35	; 53
     ffc:	88 60       	ori	r24, 0x08	; 8
     ffe:	85 bf       	out	0x35, r24	; 53
    1000:	08 95       	ret
    1002:	85 b7       	in	r24, 0x35	; 53
    1004:	84 60       	ori	r24, 0x04	; 4
    1006:	85 bf       	out	0x35, r24	; 53
    1008:	85 b7       	in	r24, 0x35	; 53
    100a:	88 60       	ori	r24, 0x08	; 8
    100c:	85 bf       	out	0x35, r24	; 53
    100e:	08 95       	ret
    1010:	62 30       	cpi	r22, 0x02	; 2
    1012:	19 f0       	breq	.+6      	; 0x101a <EXI_TriggerEdge+0xa8>
    1014:	63 30       	cpi	r22, 0x03	; 3
    1016:	29 f0       	breq	.+10     	; 0x1022 <EXI_TriggerEdge+0xb0>
    1018:	08 c0       	rjmp	.+16     	; 0x102a <EXI_TriggerEdge+0xb8>
    101a:	84 b7       	in	r24, 0x34	; 52
    101c:	8f 7b       	andi	r24, 0xBF	; 191
    101e:	84 bf       	out	0x34, r24	; 52
    1020:	08 95       	ret
    1022:	84 b7       	in	r24, 0x34	; 52
    1024:	80 64       	ori	r24, 0x40	; 64
    1026:	84 bf       	out	0x34, r24	; 52
    1028:	08 95       	ret
    102a:	84 b7       	in	r24, 0x34	; 52
    102c:	8f 7b       	andi	r24, 0xBF	; 191
    102e:	84 bf       	out	0x34, r24	; 52
    1030:	08 95       	ret

00001032 <EXI_SetCallBack>:
/************************************Call back functions*********************************************/
void EXI_SetCallBack(ExInterruptSource_type Interrupt,void(*LocalPtr)(void))
{
	
	
	switch(Interrupt){
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	49 f0       	breq	.+18     	; 0x1048 <EXI_SetCallBack+0x16>
    1036:	18 f0       	brcs	.+6      	; 0x103e <EXI_SetCallBack+0xc>
    1038:	82 30       	cpi	r24, 0x02	; 2
    103a:	59 f0       	breq	.+22     	; 0x1052 <EXI_SetCallBack+0x20>
    103c:	08 95       	ret
		case EX_INT0:
		INT0_Fptr=LocalPtr;
    103e:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <INT0_Fptr+0x1>
    1042:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <INT0_Fptr>
		break;
    1046:	08 95       	ret
		case EX_INT1:
		INT1_Fptr=LocalPtr;
    1048:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <INT1_Fptr+0x1>
    104c:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <INT1_Fptr>
		break;
    1050:	08 95       	ret
		case EX_INT2:
		INT2_Fptr=LocalPtr;
    1052:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <INT2_Fptr+0x1>
    1056:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <INT2_Fptr>
    105a:	08 95       	ret

0000105c <__vector_1>:




ISR(INT0_vect)
{  
    105c:	1f 92       	push	r1
    105e:	0f 92       	push	r0
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	0f 92       	push	r0
    1064:	11 24       	eor	r1, r1
    1066:	2f 93       	push	r18
    1068:	3f 93       	push	r19
    106a:	4f 93       	push	r20
    106c:	5f 93       	push	r21
    106e:	6f 93       	push	r22
    1070:	7f 93       	push	r23
    1072:	8f 93       	push	r24
    1074:	9f 93       	push	r25
    1076:	af 93       	push	r26
    1078:	bf 93       	push	r27
    107a:	ef 93       	push	r30
    107c:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
    107e:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <INT0_Fptr>
    1082:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <INT0_Fptr+0x1>
    1086:	30 97       	sbiw	r30, 0x00	; 0
    1088:	09 f0       	breq	.+2      	; 0x108c <__vector_1+0x30>
	{
		INT0_Fptr();
    108a:	09 95       	icall
	}
}
    108c:	ff 91       	pop	r31
    108e:	ef 91       	pop	r30
    1090:	bf 91       	pop	r27
    1092:	af 91       	pop	r26
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	7f 91       	pop	r23
    109a:	6f 91       	pop	r22
    109c:	5f 91       	pop	r21
    109e:	4f 91       	pop	r20
    10a0:	3f 91       	pop	r19
    10a2:	2f 91       	pop	r18
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	0f 90       	pop	r0
    10aa:	1f 90       	pop	r1
    10ac:	18 95       	reti

000010ae <__vector_2>:
ISR(INT1_vect)
{
    10ae:	1f 92       	push	r1
    10b0:	0f 92       	push	r0
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	0f 92       	push	r0
    10b6:	11 24       	eor	r1, r1
    10b8:	2f 93       	push	r18
    10ba:	3f 93       	push	r19
    10bc:	4f 93       	push	r20
    10be:	5f 93       	push	r21
    10c0:	6f 93       	push	r22
    10c2:	7f 93       	push	r23
    10c4:	8f 93       	push	r24
    10c6:	9f 93       	push	r25
    10c8:	af 93       	push	r26
    10ca:	bf 93       	push	r27
    10cc:	ef 93       	push	r30
    10ce:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
    10d0:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <INT1_Fptr>
    10d4:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <INT1_Fptr+0x1>
    10d8:	30 97       	sbiw	r30, 0x00	; 0
    10da:	09 f0       	breq	.+2      	; 0x10de <__vector_2+0x30>
	{
		INT1_Fptr();
    10dc:	09 95       	icall
	}
}
    10de:	ff 91       	pop	r31
    10e0:	ef 91       	pop	r30
    10e2:	bf 91       	pop	r27
    10e4:	af 91       	pop	r26
    10e6:	9f 91       	pop	r25
    10e8:	8f 91       	pop	r24
    10ea:	7f 91       	pop	r23
    10ec:	6f 91       	pop	r22
    10ee:	5f 91       	pop	r21
    10f0:	4f 91       	pop	r20
    10f2:	3f 91       	pop	r19
    10f4:	2f 91       	pop	r18
    10f6:	0f 90       	pop	r0
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	0f 90       	pop	r0
    10fc:	1f 90       	pop	r1
    10fe:	18 95       	reti

00001100 <__vector_3>:
ISR(INT2_vect)
{
    1100:	1f 92       	push	r1
    1102:	0f 92       	push	r0
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	0f 92       	push	r0
    1108:	11 24       	eor	r1, r1
    110a:	2f 93       	push	r18
    110c:	3f 93       	push	r19
    110e:	4f 93       	push	r20
    1110:	5f 93       	push	r21
    1112:	6f 93       	push	r22
    1114:	7f 93       	push	r23
    1116:	8f 93       	push	r24
    1118:	9f 93       	push	r25
    111a:	af 93       	push	r26
    111c:	bf 93       	push	r27
    111e:	ef 93       	push	r30
    1120:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
    1122:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <INT2_Fptr>
    1126:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <INT2_Fptr+0x1>
    112a:	30 97       	sbiw	r30, 0x00	; 0
    112c:	09 f0       	breq	.+2      	; 0x1130 <__vector_3+0x30>
	{
		INT2_Fptr();
    112e:	09 95       	icall
	}
}
    1130:	ff 91       	pop	r31
    1132:	ef 91       	pop	r30
    1134:	bf 91       	pop	r27
    1136:	af 91       	pop	r26
    1138:	9f 91       	pop	r25
    113a:	8f 91       	pop	r24
    113c:	7f 91       	pop	r23
    113e:	6f 91       	pop	r22
    1140:	5f 91       	pop	r21
    1142:	4f 91       	pop	r20
    1144:	3f 91       	pop	r19
    1146:	2f 91       	pop	r18
    1148:	0f 90       	pop	r0
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	0f 90       	pop	r0
    114e:	1f 90       	pop	r1
    1150:	18 95       	reti

00001152 <waveGen>:
	TIMER0_OV_SetCallBack(waveGen);
	
} 

void waveGen()
{  static u32 OV=0;
    1152:	0f 93       	push	r16
    1154:	1f 93       	push	r17
	TCNT0=6;
    1156:	86 e0       	ldi	r24, 0x06	; 6
    1158:	82 bf       	out	0x32, r24	; 50
	OV++;
    115a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <OV.2058>
    115e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <OV.2058+0x1>
    1162:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <OV.2058+0x2>
    1166:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <OV.2058+0x3>
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	a1 1d       	adc	r26, r1
    116e:	b1 1d       	adc	r27, r1
    1170:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <OV.2058>
    1174:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <OV.2058+0x1>
    1178:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <OV.2058+0x2>
    117c:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <OV.2058+0x3>
	if (OV==(u32_OFFTicks+1))
    1180:	00 91 28 01 	lds	r16, 0x0128	; 0x800128 <u32_OFFTicks>
    1184:	10 91 29 01 	lds	r17, 0x0129	; 0x800129 <u32_OFFTicks+0x1>
    1188:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <u32_OFFTicks+0x2>
    118c:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <u32_OFFTicks+0x3>
    1190:	b9 01       	movw	r22, r18
    1192:	a8 01       	movw	r20, r16
    1194:	4f 5f       	subi	r20, 0xFF	; 255
    1196:	5f 4f       	sbci	r21, 0xFF	; 255
    1198:	6f 4f       	sbci	r22, 0xFF	; 255
    119a:	7f 4f       	sbci	r23, 0xFF	; 255
    119c:	84 17       	cp	r24, r20
    119e:	95 07       	cpc	r25, r21
    11a0:	a6 07       	cpc	r26, r22
    11a2:	b7 07       	cpc	r27, r23
    11a4:	29 f4       	brne	.+10     	; 0x11b0 <waveGen+0x5e>
	{
		DIO_writepin(PINB0,HIGH);//
    11a6:	61 e0       	ldi	r22, 0x01	; 1
    11a8:	88 e0       	ldi	r24, 0x08	; 8
    11aa:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
    11ae:	21 c0       	rjmp	.+66     	; 0x11f2 <waveGen+0xa0>
	}
	else if (OV==(u32_ONTicks+u32_OFFTicks+2))
    11b0:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <u32_ONTicks>
    11b4:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <u32_ONTicks+0x1>
    11b8:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <u32_ONTicks+0x2>
    11bc:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <u32_ONTicks+0x3>
    11c0:	40 0f       	add	r20, r16
    11c2:	51 1f       	adc	r21, r17
    11c4:	62 1f       	adc	r22, r18
    11c6:	73 1f       	adc	r23, r19
    11c8:	4e 5f       	subi	r20, 0xFE	; 254
    11ca:	5f 4f       	sbci	r21, 0xFF	; 255
    11cc:	6f 4f       	sbci	r22, 0xFF	; 255
    11ce:	7f 4f       	sbci	r23, 0xFF	; 255
    11d0:	84 17       	cp	r24, r20
    11d2:	95 07       	cpc	r25, r21
    11d4:	a6 07       	cpc	r26, r22
    11d6:	b7 07       	cpc	r27, r23
    11d8:	61 f4       	brne	.+24     	; 0x11f2 <waveGen+0xa0>
	{
		DIO_writepin(PINB0,LOW);//
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	88 e0       	ldi	r24, 0x08	; 8
    11de:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
		OV=0;
    11e2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <OV.2058>
    11e6:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <OV.2058+0x1>
    11ea:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <OV.2058+0x2>
    11ee:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <OV.2058+0x3>
	}
	
}
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	08 95       	ret

000011f8 <pwm_init>:
u32 u32_ONTicks=0,u32_OFFTicks=0;


void pwm_init()
{
	DIO_initpin(PINB0,OUTPUT);
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	88 e0       	ldi	r24, 0x08	; 8
    11fc:	0e 94 38 05 	call	0xa70	; 0xa70 <DIO_initpin>
	TIMER0_Init(TIMER0_NORMAL_MODE);
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	0e 94 74 09 	call	0x12e8	; 0x12e8 <TIMER0_Init>
	TIMER0_OV_InterruptEnable();
    1206:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <TIMER0_OV_InterruptEnable>
	TIMER0_OV_SetCallBack(waveGen);
    120a:	89 ea       	ldi	r24, 0xA9	; 169
    120c:	98 e0       	ldi	r25, 0x08	; 8
    120e:	0e 94 a4 09 	call	0x1348	; 0x1348 <TIMER0_OV_SetCallBack>
    1212:	08 95       	ret

00001214 <PWM_set_duty>:
	
}


void PWM_set_duty(u8 u8_DutyCycle,u32 u32_Freq)
{
    1214:	8f 92       	push	r8
    1216:	9f 92       	push	r9
    1218:	af 92       	push	r10
    121a:	bf 92       	push	r11
    121c:	cf 92       	push	r12
    121e:	df 92       	push	r13
    1220:	ef 92       	push	r14
    1222:	ff 92       	push	r15
    1224:	cf 93       	push	r28
    1226:	c8 2f       	mov	r28, r24
	f64 f64_wavePeriodTime = (f32)1 / u32_Freq*1000000;					         // The Periodic Time for the Generated Pulse in Seconds //
    1228:	cb 01       	movw	r24, r22
    122a:	ba 01       	movw	r22, r20
    122c:	0e 94 2e 0c 	call	0x185c	; 0x185c <__floatunsisf>
    1230:	9b 01       	movw	r18, r22
    1232:	ac 01       	movw	r20, r24
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	70 e0       	ldi	r23, 0x00	; 0
    1238:	80 e8       	ldi	r24, 0x80	; 128
    123a:	9f e3       	ldi	r25, 0x3F	; 63
    123c:	0e 94 8d 0b 	call	0x171a	; 0x171a <__divsf3>
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	34 e2       	ldi	r19, 0x24	; 36
    1244:	44 e7       	ldi	r20, 0x74	; 116
    1246:	59 e4       	ldi	r21, 0x49	; 73
    1248:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
    124c:	4b 01       	movw	r8, r22
    124e:	5c 01       	movw	r10, r24
	f64 f64_waveONTime = (f64_wavePeriodTime*u8_DutyCycle) / 100;		// The HIGH Level Time in Seconds //
    1250:	6c 2f       	mov	r22, r28
    1252:	70 e0       	ldi	r23, 0x00	; 0
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	0e 94 30 0c 	call	0x1860	; 0x1860 <__floatsisf>
    125c:	a5 01       	movw	r20, r10
    125e:	94 01       	movw	r18, r8
    1260:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	48 ec       	ldi	r20, 0xC8	; 200
    126a:	52 e4       	ldi	r21, 0x42	; 66
    126c:	0e 94 8d 0b 	call	0x171a	; 0x171a <__divsf3>
    1270:	6b 01       	movw	r12, r22
    1272:	7c 01       	movw	r14, r24
	f64 f64_waveOFFTime = f64_wavePeriodTime - f64_waveONTime;		   // The LOW Level Time in Seconds //
    1274:	9b 01       	movw	r18, r22
    1276:	ac 01       	movw	r20, r24
    1278:	c5 01       	movw	r24, r10
    127a:	b4 01       	movw	r22, r8
    127c:	0e 94 20 0b 	call	0x1640	; 0x1640 <__subsf3>
    1280:	4b 01       	movw	r8, r22
    1282:	5c 01       	movw	r10, r24
	f64 f64_oneTickTime = 0.0;
	f64_oneTickTime = (f64) (((f64)PWM_PRESCALER/(f64)F_CPU)*1000000);   //1u at 8,8
	//LCD_WriteNumber(f64_wavePeriodTime) ;
	f64 f64_max_time = (256*f64_oneTickTime); //256u
	//LCD_WriteNumber( f64_max_time) ;
	u32_ONTicks     =  f64_waveONTime/(f64_max_time-6);
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	4a e7       	ldi	r20, 0x7A	; 122
    128a:	53 e4       	ldi	r21, 0x43	; 67
    128c:	c7 01       	movw	r24, r14
    128e:	b6 01       	movw	r22, r12
    1290:	0e 94 8d 0b 	call	0x171a	; 0x171a <__divsf3>
    1294:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__fixunssfsi>
    1298:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <u32_ONTicks>
    129c:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <u32_ONTicks+0x1>
    12a0:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <u32_ONTicks+0x2>
    12a4:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <u32_ONTicks+0x3>
	u32_OFFTicks    =  f64_waveOFFTime/(f64_max_time-6);
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	4a e7       	ldi	r20, 0x7A	; 122
    12ae:	53 e4       	ldi	r21, 0x43	; 67
    12b0:	c5 01       	movw	r24, r10
    12b2:	b4 01       	movw	r22, r8
    12b4:	0e 94 8d 0b 	call	0x171a	; 0x171a <__divsf3>
    12b8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__fixunssfsi>
    12bc:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <u32_OFFTicks>
    12c0:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <u32_OFFTicks+0x1>
    12c4:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <u32_OFFTicks+0x2>
    12c8:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <u32_OFFTicks+0x3>
	DIO_writepin(PINB0,HIGH);
    12cc:	61 e0       	ldi	r22, 0x01	; 1
    12ce:	88 e0       	ldi	r24, 0x08	; 8
    12d0:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_writepin>
}
    12d4:	cf 91       	pop	r28
    12d6:	ff 90       	pop	r15
    12d8:	ef 90       	pop	r14
    12da:	df 90       	pop	r13
    12dc:	cf 90       	pop	r12
    12de:	bf 90       	pop	r11
    12e0:	af 90       	pop	r10
    12e2:	9f 90       	pop	r9
    12e4:	8f 90       	pop	r8
    12e6:	08 95       	ret

000012e8 <TIMER0_Init>:
{
	SET_BIT(TIMSK,TOIE2);
}
void TIMER2_OV_InterruptDisable(void)
{
	CLR_BIT(TIMSK,TOIE2);
    12e8:	81 30       	cpi	r24, 0x01	; 1
    12ea:	69 f0       	breq	.+26     	; 0x1306 <TIMER0_Init+0x1e>
    12ec:	28 f0       	brcs	.+10     	; 0x12f8 <TIMER0_Init+0x10>
    12ee:	82 30       	cpi	r24, 0x02	; 2
    12f0:	89 f0       	breq	.+34     	; 0x1314 <TIMER0_Init+0x2c>
    12f2:	83 30       	cpi	r24, 0x03	; 3
    12f4:	b1 f0       	breq	.+44     	; 0x1322 <TIMER0_Init+0x3a>
    12f6:	08 95       	ret
    12f8:	83 b7       	in	r24, 0x33	; 51
    12fa:	8f 7b       	andi	r24, 0xBF	; 191
    12fc:	83 bf       	out	0x33, r24	; 51
    12fe:	83 b7       	in	r24, 0x33	; 51
    1300:	87 7f       	andi	r24, 0xF7	; 247
    1302:	83 bf       	out	0x33, r24	; 51
    1304:	08 95       	ret
    1306:	83 b7       	in	r24, 0x33	; 51
    1308:	80 64       	ori	r24, 0x40	; 64
    130a:	83 bf       	out	0x33, r24	; 51
    130c:	83 b7       	in	r24, 0x33	; 51
    130e:	87 7f       	andi	r24, 0xF7	; 247
    1310:	83 bf       	out	0x33, r24	; 51
    1312:	08 95       	ret
    1314:	83 b7       	in	r24, 0x33	; 51
    1316:	8f 7b       	andi	r24, 0xBF	; 191
    1318:	83 bf       	out	0x33, r24	; 51
    131a:	83 b7       	in	r24, 0x33	; 51
    131c:	88 60       	ori	r24, 0x08	; 8
    131e:	83 bf       	out	0x33, r24	; 51
    1320:	08 95       	ret
    1322:	83 b7       	in	r24, 0x33	; 51
    1324:	80 64       	ori	r24, 0x40	; 64
    1326:	83 bf       	out	0x33, r24	; 51
    1328:	83 b7       	in	r24, 0x33	; 51
    132a:	88 60       	ori	r24, 0x08	; 8
    132c:	83 bf       	out	0x33, r24	; 51
    132e:	08 95       	ret

00001330 <timer_start>:
    1330:	88 30       	cpi	r24, 0x08	; 8
    1332:	40 f4       	brcc	.+16     	; 0x1344 <timer_start+0x14>
    1334:	93 b7       	in	r25, 0x33	; 51
    1336:	98 7f       	andi	r25, 0xF8	; 248
    1338:	93 bf       	out	0x33, r25	; 51
    133a:	93 b7       	in	r25, 0x33	; 51
    133c:	89 2b       	or	r24, r25
    133e:	83 bf       	out	0x33, r24	; 51
    1340:	84 e0       	ldi	r24, 0x04	; 4
    1342:	08 95       	ret
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	08 95       	ret

00001348 <TIMER0_OV_SetCallBack>:
    1348:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <Timer0_OVF_Fptr+0x1>
    134c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <Timer0_OVF_Fptr>
    1350:	08 95       	ret

00001352 <__vector_11>:
    1352:	1f 92       	push	r1
    1354:	0f 92       	push	r0
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	0f 92       	push	r0
    135a:	11 24       	eor	r1, r1
    135c:	2f 93       	push	r18
    135e:	3f 93       	push	r19
    1360:	4f 93       	push	r20
    1362:	5f 93       	push	r21
    1364:	6f 93       	push	r22
    1366:	7f 93       	push	r23
    1368:	8f 93       	push	r24
    136a:	9f 93       	push	r25
    136c:	af 93       	push	r26
    136e:	bf 93       	push	r27
    1370:	ef 93       	push	r30
    1372:	ff 93       	push	r31
    1374:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <Timer0_OVF_Fptr>
    1378:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <Timer0_OVF_Fptr+0x1>
    137c:	30 97       	sbiw	r30, 0x00	; 0
    137e:	09 f0       	breq	.+2      	; 0x1382 <__vector_11+0x30>
    1380:	09 95       	icall
    1382:	ff 91       	pop	r31
    1384:	ef 91       	pop	r30
    1386:	bf 91       	pop	r27
    1388:	af 91       	pop	r26
    138a:	9f 91       	pop	r25
    138c:	8f 91       	pop	r24
    138e:	7f 91       	pop	r23
    1390:	6f 91       	pop	r22
    1392:	5f 91       	pop	r21
    1394:	4f 91       	pop	r20
    1396:	3f 91       	pop	r19
    1398:	2f 91       	pop	r18
    139a:	0f 90       	pop	r0
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	0f 90       	pop	r0
    13a0:	1f 90       	pop	r1
    13a2:	18 95       	reti

000013a4 <TIMER0_OV_InterruptEnable>:
    13a4:	89 b7       	in	r24, 0x39	; 57
    13a6:	81 60       	ori	r24, 0x01	; 1
    13a8:	89 bf       	out	0x39, r24	; 57
    13aa:	08 95       	ret

000013ac <Timer1_Init>:
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	29 f1       	breq	.+74     	; 0x13fa <Timer1_Init+0x4e>
    13b0:	28 f4       	brcc	.+10     	; 0x13bc <Timer1_Init+0x10>
    13b2:	88 23       	and	r24, r24
    13b4:	41 f0       	breq	.+16     	; 0x13c6 <Timer1_Init+0x1a>
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	99 f0       	breq	.+38     	; 0x13e0 <Timer1_Init+0x34>
    13ba:	45 c0       	rjmp	.+138    	; 0x1446 <Timer1_Init+0x9a>
    13bc:	83 30       	cpi	r24, 0x03	; 3
    13be:	51 f1       	breq	.+84     	; 0x1414 <Timer1_Init+0x68>
    13c0:	84 30       	cpi	r24, 0x04	; 4
    13c2:	a9 f1       	breq	.+106    	; 0x142e <Timer1_Init+0x82>
    13c4:	40 c0       	rjmp	.+128    	; 0x1446 <Timer1_Init+0x9a>
    13c6:	8f b5       	in	r24, 0x2f	; 47
    13c8:	8e 7f       	andi	r24, 0xFE	; 254
    13ca:	8f bd       	out	0x2f, r24	; 47
    13cc:	8f b5       	in	r24, 0x2f	; 47
    13ce:	8d 7f       	andi	r24, 0xFD	; 253
    13d0:	8f bd       	out	0x2f, r24	; 47
    13d2:	8e b5       	in	r24, 0x2e	; 46
    13d4:	87 7f       	andi	r24, 0xF7	; 247
    13d6:	8e bd       	out	0x2e, r24	; 46
    13d8:	8e b5       	in	r24, 0x2e	; 46
    13da:	8f 7e       	andi	r24, 0xEF	; 239
    13dc:	8e bd       	out	0x2e, r24	; 46
    13de:	33 c0       	rjmp	.+102    	; 0x1446 <Timer1_Init+0x9a>
    13e0:	8f b5       	in	r24, 0x2f	; 47
    13e2:	8e 7f       	andi	r24, 0xFE	; 254
    13e4:	8f bd       	out	0x2f, r24	; 47
    13e6:	8f b5       	in	r24, 0x2f	; 47
    13e8:	8d 7f       	andi	r24, 0xFD	; 253
    13ea:	8f bd       	out	0x2f, r24	; 47
    13ec:	8e b5       	in	r24, 0x2e	; 46
    13ee:	88 60       	ori	r24, 0x08	; 8
    13f0:	8e bd       	out	0x2e, r24	; 46
    13f2:	8e b5       	in	r24, 0x2e	; 46
    13f4:	80 61       	ori	r24, 0x10	; 16
    13f6:	8e bd       	out	0x2e, r24	; 46
    13f8:	26 c0       	rjmp	.+76     	; 0x1446 <Timer1_Init+0x9a>
    13fa:	8f b5       	in	r24, 0x2f	; 47
    13fc:	8e 7f       	andi	r24, 0xFE	; 254
    13fe:	8f bd       	out	0x2f, r24	; 47
    1400:	8f b5       	in	r24, 0x2f	; 47
    1402:	8d 7f       	andi	r24, 0xFD	; 253
    1404:	8f bd       	out	0x2f, r24	; 47
    1406:	8e b5       	in	r24, 0x2e	; 46
    1408:	88 60       	ori	r24, 0x08	; 8
    140a:	8e bd       	out	0x2e, r24	; 46
    140c:	8e b5       	in	r24, 0x2e	; 46
    140e:	8f 7e       	andi	r24, 0xEF	; 239
    1410:	8e bd       	out	0x2e, r24	; 46
    1412:	19 c0       	rjmp	.+50     	; 0x1446 <Timer1_Init+0x9a>
    1414:	8f b5       	in	r24, 0x2f	; 47
    1416:	8e 7f       	andi	r24, 0xFE	; 254
    1418:	8f bd       	out	0x2f, r24	; 47
    141a:	8f b5       	in	r24, 0x2f	; 47
    141c:	82 60       	ori	r24, 0x02	; 2
    141e:	8f bd       	out	0x2f, r24	; 47
    1420:	8e b5       	in	r24, 0x2e	; 46
    1422:	88 60       	ori	r24, 0x08	; 8
    1424:	8e bd       	out	0x2e, r24	; 46
    1426:	8e b5       	in	r24, 0x2e	; 46
    1428:	80 61       	ori	r24, 0x10	; 16
    142a:	8e bd       	out	0x2e, r24	; 46
    142c:	0c c0       	rjmp	.+24     	; 0x1446 <Timer1_Init+0x9a>
    142e:	8f b5       	in	r24, 0x2f	; 47
    1430:	81 60       	ori	r24, 0x01	; 1
    1432:	8f bd       	out	0x2f, r24	; 47
    1434:	8f b5       	in	r24, 0x2f	; 47
    1436:	82 60       	ori	r24, 0x02	; 2
    1438:	8f bd       	out	0x2f, r24	; 47
    143a:	8e b5       	in	r24, 0x2e	; 46
    143c:	88 60       	ori	r24, 0x08	; 8
    143e:	8e bd       	out	0x2e, r24	; 46
    1440:	8e b5       	in	r24, 0x2e	; 46
    1442:	80 61       	ori	r24, 0x10	; 16
    1444:	8e bd       	out	0x2e, r24	; 46
    1446:	8e b5       	in	r24, 0x2e	; 46
    1448:	88 7f       	andi	r24, 0xF8	; 248
    144a:	8e bd       	out	0x2e, r24	; 46
    144c:	8e b5       	in	r24, 0x2e	; 46
    144e:	68 2b       	or	r22, r24
    1450:	6e bd       	out	0x2e, r22	; 46
    1452:	08 95       	ret

00001454 <__vector_9>:
    1454:	1f 92       	push	r1
    1456:	0f 92       	push	r0
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	0f 92       	push	r0
    145c:	11 24       	eor	r1, r1
    145e:	2f 93       	push	r18
    1460:	3f 93       	push	r19
    1462:	4f 93       	push	r20
    1464:	5f 93       	push	r21
    1466:	6f 93       	push	r22
    1468:	7f 93       	push	r23
    146a:	8f 93       	push	r24
    146c:	9f 93       	push	r25
    146e:	af 93       	push	r26
    1470:	bf 93       	push	r27
    1472:	ef 93       	push	r30
    1474:	ff 93       	push	r31
    1476:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <Timer1_OVF_Fptr>
    147a:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <Timer1_OVF_Fptr+0x1>
    147e:	30 97       	sbiw	r30, 0x00	; 0
    1480:	09 f0       	breq	.+2      	; 0x1484 <__vector_9+0x30>
    1482:	09 95       	icall
    1484:	ff 91       	pop	r31
    1486:	ef 91       	pop	r30
    1488:	bf 91       	pop	r27
    148a:	af 91       	pop	r26
    148c:	9f 91       	pop	r25
    148e:	8f 91       	pop	r24
    1490:	7f 91       	pop	r23
    1492:	6f 91       	pop	r22
    1494:	5f 91       	pop	r21
    1496:	4f 91       	pop	r20
    1498:	3f 91       	pop	r19
    149a:	2f 91       	pop	r18
    149c:	0f 90       	pop	r0
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	0f 90       	pop	r0
    14a2:	1f 90       	pop	r1
    14a4:	18 95       	reti

000014a6 <__vector_8>:
    14a6:	1f 92       	push	r1
    14a8:	0f 92       	push	r0
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	0f 92       	push	r0
    14ae:	11 24       	eor	r1, r1
    14b0:	2f 93       	push	r18
    14b2:	3f 93       	push	r19
    14b4:	4f 93       	push	r20
    14b6:	5f 93       	push	r21
    14b8:	6f 93       	push	r22
    14ba:	7f 93       	push	r23
    14bc:	8f 93       	push	r24
    14be:	9f 93       	push	r25
    14c0:	af 93       	push	r26
    14c2:	bf 93       	push	r27
    14c4:	ef 93       	push	r30
    14c6:	ff 93       	push	r31
    14c8:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <Timer1_OCB_Fptr>
    14cc:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <Timer1_OCB_Fptr+0x1>
    14d0:	30 97       	sbiw	r30, 0x00	; 0
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <__vector_8+0x30>
    14d4:	09 95       	icall
    14d6:	ff 91       	pop	r31
    14d8:	ef 91       	pop	r30
    14da:	bf 91       	pop	r27
    14dc:	af 91       	pop	r26
    14de:	9f 91       	pop	r25
    14e0:	8f 91       	pop	r24
    14e2:	7f 91       	pop	r23
    14e4:	6f 91       	pop	r22
    14e6:	5f 91       	pop	r21
    14e8:	4f 91       	pop	r20
    14ea:	3f 91       	pop	r19
    14ec:	2f 91       	pop	r18
    14ee:	0f 90       	pop	r0
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	0f 90       	pop	r0
    14f4:	1f 90       	pop	r1
    14f6:	18 95       	reti

000014f8 <__vector_6>:
    14f8:	1f 92       	push	r1
    14fa:	0f 92       	push	r0
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	0f 92       	push	r0
    1500:	11 24       	eor	r1, r1
    1502:	2f 93       	push	r18
    1504:	3f 93       	push	r19
    1506:	4f 93       	push	r20
    1508:	5f 93       	push	r21
    150a:	6f 93       	push	r22
    150c:	7f 93       	push	r23
    150e:	8f 93       	push	r24
    1510:	9f 93       	push	r25
    1512:	af 93       	push	r26
    1514:	bf 93       	push	r27
    1516:	ef 93       	push	r30
    1518:	ff 93       	push	r31
    151a:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Timer1_ICU_Fptr>
    151e:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Timer1_ICU_Fptr+0x1>
    1522:	30 97       	sbiw	r30, 0x00	; 0
    1524:	09 f0       	breq	.+2      	; 0x1528 <__vector_6+0x30>
    1526:	09 95       	icall
    1528:	ff 91       	pop	r31
    152a:	ef 91       	pop	r30
    152c:	bf 91       	pop	r27
    152e:	af 91       	pop	r26
    1530:	9f 91       	pop	r25
    1532:	8f 91       	pop	r24
    1534:	7f 91       	pop	r23
    1536:	6f 91       	pop	r22
    1538:	5f 91       	pop	r21
    153a:	4f 91       	pop	r20
    153c:	3f 91       	pop	r19
    153e:	2f 91       	pop	r18
    1540:	0f 90       	pop	r0
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	0f 90       	pop	r0
    1546:	1f 90       	pop	r1
    1548:	18 95       	reti

0000154a <timer1_ReadCounts>:
    154a:	2c b5       	in	r18, 0x2c	; 44
    154c:	3d b5       	in	r19, 0x2d	; 45
    154e:	fc 01       	movw	r30, r24
    1550:	31 83       	std	Z+1, r19	; 0x01
    1552:	20 83       	st	Z, r18
    1554:	08 95       	ret

00001556 <timer1_setTimerValue>:
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	9d bd       	out	0x2d, r25	; 45
    155a:	8c bd       	out	0x2c, r24	; 44
    155c:	08 95       	ret

0000155e <TIMER2_Init>:
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	69 f0       	breq	.+26     	; 0x157c <TIMER2_Init+0x1e>
    1562:	28 f0       	brcs	.+10     	; 0x156e <TIMER2_Init+0x10>
    1564:	82 30       	cpi	r24, 0x02	; 2
    1566:	89 f0       	breq	.+34     	; 0x158a <TIMER2_Init+0x2c>
    1568:	83 30       	cpi	r24, 0x03	; 3
    156a:	b1 f0       	breq	.+44     	; 0x1598 <TIMER2_Init+0x3a>
    156c:	08 95       	ret
    156e:	85 b5       	in	r24, 0x25	; 37
    1570:	8f 7b       	andi	r24, 0xBF	; 191
    1572:	85 bd       	out	0x25, r24	; 37
    1574:	85 b5       	in	r24, 0x25	; 37
    1576:	87 7f       	andi	r24, 0xF7	; 247
    1578:	85 bd       	out	0x25, r24	; 37
    157a:	08 95       	ret
    157c:	85 b5       	in	r24, 0x25	; 37
    157e:	80 64       	ori	r24, 0x40	; 64
    1580:	85 bd       	out	0x25, r24	; 37
    1582:	85 b5       	in	r24, 0x25	; 37
    1584:	87 7f       	andi	r24, 0xF7	; 247
    1586:	85 bd       	out	0x25, r24	; 37
    1588:	08 95       	ret
    158a:	85 b5       	in	r24, 0x25	; 37
    158c:	8f 7b       	andi	r24, 0xBF	; 191
    158e:	85 bd       	out	0x25, r24	; 37
    1590:	85 b5       	in	r24, 0x25	; 37
    1592:	88 60       	ori	r24, 0x08	; 8
    1594:	85 bd       	out	0x25, r24	; 37
    1596:	08 95       	ret
    1598:	85 b5       	in	r24, 0x25	; 37
    159a:	80 64       	ori	r24, 0x40	; 64
    159c:	85 bd       	out	0x25, r24	; 37
    159e:	85 b5       	in	r24, 0x25	; 37
    15a0:	88 60       	ori	r24, 0x08	; 8
    15a2:	85 bd       	out	0x25, r24	; 37
    15a4:	08 95       	ret

000015a6 <TIMER_2_setIntialValue>:
    15a6:	84 bd       	out	0x24, r24	; 36
    15a8:	84 e0       	ldi	r24, 0x04	; 4
    15aa:	08 95       	ret

000015ac <timer2_start>:
    15ac:	88 30       	cpi	r24, 0x08	; 8
    15ae:	40 f4       	brcc	.+16     	; 0x15c0 <timer2_start+0x14>
    15b0:	95 b5       	in	r25, 0x25	; 37
    15b2:	98 7f       	andi	r25, 0xF8	; 248
    15b4:	95 bd       	out	0x25, r25	; 37
    15b6:	95 b5       	in	r25, 0x25	; 37
    15b8:	89 2b       	or	r24, r25
    15ba:	85 bd       	out	0x25, r24	; 37
    15bc:	84 e0       	ldi	r24, 0x04	; 4
    15be:	08 95       	ret
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	08 95       	ret

000015c4 <TIMER2_OV_InterruptEnable>:
    15c4:	89 b7       	in	r24, 0x39	; 57
    15c6:	80 64       	ori	r24, 0x40	; 64
    15c8:	89 bf       	out	0x39, r24	; 57
    15ca:	08 95       	ret

000015cc <TIMER_2_INT>:
    15cc:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <TIMER2_OV_InterruptEnable>
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	0e 94 af 0a 	call	0x155e	; 0x155e <TIMER2_Init>
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <TIMER_2_setIntialValue>
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <timer2_start>
    15e2:	08 95       	ret

000015e4 <TIMER2_OV_SetCallBack>:
}

////////////////////////////////////////////Timer 2 Call Back functions///////////////////////////////////////
void TIMER2_OV_SetCallBack(void(*LocalFptr)(void))
{
	Timer2_OVF_Fptr=LocalFptr;
    15e4:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <Timer2_OVF_Fptr+0x1>
    15e8:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Timer2_OVF_Fptr>
    15ec:	08 95       	ret

000015ee <__vector_5>:
}



ISR(TIMER2_OV_vect)
{
    15ee:	1f 92       	push	r1
    15f0:	0f 92       	push	r0
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	0f 92       	push	r0
    15f6:	11 24       	eor	r1, r1
    15f8:	2f 93       	push	r18
    15fa:	3f 93       	push	r19
    15fc:	4f 93       	push	r20
    15fe:	5f 93       	push	r21
    1600:	6f 93       	push	r22
    1602:	7f 93       	push	r23
    1604:	8f 93       	push	r24
    1606:	9f 93       	push	r25
    1608:	af 93       	push	r26
    160a:	bf 93       	push	r27
    160c:	ef 93       	push	r30
    160e:	ff 93       	push	r31
	if(Timer2_OVF_Fptr!=NULLPTR)
    1610:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Timer2_OVF_Fptr>
    1614:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Timer2_OVF_Fptr+0x1>
    1618:	30 97       	sbiw	r30, 0x00	; 0
    161a:	09 f0       	breq	.+2      	; 0x161e <__vector_5+0x30>
	{
		Timer2_OVF_Fptr();
    161c:	09 95       	icall
	}
}
    161e:	ff 91       	pop	r31
    1620:	ef 91       	pop	r30
    1622:	bf 91       	pop	r27
    1624:	af 91       	pop	r26
    1626:	9f 91       	pop	r25
    1628:	8f 91       	pop	r24
    162a:	7f 91       	pop	r23
    162c:	6f 91       	pop	r22
    162e:	5f 91       	pop	r21
    1630:	4f 91       	pop	r20
    1632:	3f 91       	pop	r19
    1634:	2f 91       	pop	r18
    1636:	0f 90       	pop	r0
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	0f 90       	pop	r0
    163c:	1f 90       	pop	r1
    163e:	18 95       	reti

00001640 <__subsf3>:
    1640:	50 58       	subi	r21, 0x80	; 128

00001642 <__addsf3>:
    1642:	bb 27       	eor	r27, r27
    1644:	aa 27       	eor	r26, r26
    1646:	0e 94 38 0b 	call	0x1670	; 0x1670 <__addsf3x>
    164a:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <__fp_round>
    164e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__fp_pscA>
    1652:	38 f0       	brcs	.+14     	; 0x1662 <__addsf3+0x20>
    1654:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__fp_pscB>
    1658:	20 f0       	brcs	.+8      	; 0x1662 <__addsf3+0x20>
    165a:	39 f4       	brne	.+14     	; 0x166a <__addsf3+0x28>
    165c:	9f 3f       	cpi	r25, 0xFF	; 255
    165e:	19 f4       	brne	.+6      	; 0x1666 <__addsf3+0x24>
    1660:	26 f4       	brtc	.+8      	; 0x166a <__addsf3+0x28>
    1662:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__fp_nan>
    1666:	0e f4       	brtc	.+2      	; 0x166a <__addsf3+0x28>
    1668:	e0 95       	com	r30
    166a:	e7 fb       	bst	r30, 7
    166c:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__fp_inf>

00001670 <__addsf3x>:
    1670:	e9 2f       	mov	r30, r25
    1672:	0e 94 93 0c 	call	0x1926	; 0x1926 <__fp_split3>
    1676:	58 f3       	brcs	.-42     	; 0x164e <__addsf3+0xc>
    1678:	ba 17       	cp	r27, r26
    167a:	62 07       	cpc	r22, r18
    167c:	73 07       	cpc	r23, r19
    167e:	84 07       	cpc	r24, r20
    1680:	95 07       	cpc	r25, r21
    1682:	20 f0       	brcs	.+8      	; 0x168c <__addsf3x+0x1c>
    1684:	79 f4       	brne	.+30     	; 0x16a4 <__addsf3x+0x34>
    1686:	a6 f5       	brtc	.+104    	; 0x16f0 <__addsf3x+0x80>
    1688:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__fp_zero>
    168c:	0e f4       	brtc	.+2      	; 0x1690 <__addsf3x+0x20>
    168e:	e0 95       	com	r30
    1690:	0b 2e       	mov	r0, r27
    1692:	ba 2f       	mov	r27, r26
    1694:	a0 2d       	mov	r26, r0
    1696:	0b 01       	movw	r0, r22
    1698:	b9 01       	movw	r22, r18
    169a:	90 01       	movw	r18, r0
    169c:	0c 01       	movw	r0, r24
    169e:	ca 01       	movw	r24, r20
    16a0:	a0 01       	movw	r20, r0
    16a2:	11 24       	eor	r1, r1
    16a4:	ff 27       	eor	r31, r31
    16a6:	59 1b       	sub	r21, r25
    16a8:	99 f0       	breq	.+38     	; 0x16d0 <__addsf3x+0x60>
    16aa:	59 3f       	cpi	r21, 0xF9	; 249
    16ac:	50 f4       	brcc	.+20     	; 0x16c2 <__addsf3x+0x52>
    16ae:	50 3e       	cpi	r21, 0xE0	; 224
    16b0:	68 f1       	brcs	.+90     	; 0x170c <__addsf3x+0x9c>
    16b2:	1a 16       	cp	r1, r26
    16b4:	f0 40       	sbci	r31, 0x00	; 0
    16b6:	a2 2f       	mov	r26, r18
    16b8:	23 2f       	mov	r18, r19
    16ba:	34 2f       	mov	r19, r20
    16bc:	44 27       	eor	r20, r20
    16be:	58 5f       	subi	r21, 0xF8	; 248
    16c0:	f3 cf       	rjmp	.-26     	; 0x16a8 <__addsf3x+0x38>
    16c2:	46 95       	lsr	r20
    16c4:	37 95       	ror	r19
    16c6:	27 95       	ror	r18
    16c8:	a7 95       	ror	r26
    16ca:	f0 40       	sbci	r31, 0x00	; 0
    16cc:	53 95       	inc	r21
    16ce:	c9 f7       	brne	.-14     	; 0x16c2 <__addsf3x+0x52>
    16d0:	7e f4       	brtc	.+30     	; 0x16f0 <__addsf3x+0x80>
    16d2:	1f 16       	cp	r1, r31
    16d4:	ba 0b       	sbc	r27, r26
    16d6:	62 0b       	sbc	r22, r18
    16d8:	73 0b       	sbc	r23, r19
    16da:	84 0b       	sbc	r24, r20
    16dc:	ba f0       	brmi	.+46     	; 0x170c <__addsf3x+0x9c>
    16de:	91 50       	subi	r25, 0x01	; 1
    16e0:	a1 f0       	breq	.+40     	; 0x170a <__addsf3x+0x9a>
    16e2:	ff 0f       	add	r31, r31
    16e4:	bb 1f       	adc	r27, r27
    16e6:	66 1f       	adc	r22, r22
    16e8:	77 1f       	adc	r23, r23
    16ea:	88 1f       	adc	r24, r24
    16ec:	c2 f7       	brpl	.-16     	; 0x16de <__addsf3x+0x6e>
    16ee:	0e c0       	rjmp	.+28     	; 0x170c <__addsf3x+0x9c>
    16f0:	ba 0f       	add	r27, r26
    16f2:	62 1f       	adc	r22, r18
    16f4:	73 1f       	adc	r23, r19
    16f6:	84 1f       	adc	r24, r20
    16f8:	48 f4       	brcc	.+18     	; 0x170c <__addsf3x+0x9c>
    16fa:	87 95       	ror	r24
    16fc:	77 95       	ror	r23
    16fe:	67 95       	ror	r22
    1700:	b7 95       	ror	r27
    1702:	f7 95       	ror	r31
    1704:	9e 3f       	cpi	r25, 0xFE	; 254
    1706:	08 f0       	brcs	.+2      	; 0x170a <__addsf3x+0x9a>
    1708:	b0 cf       	rjmp	.-160    	; 0x166a <__addsf3+0x28>
    170a:	93 95       	inc	r25
    170c:	88 0f       	add	r24, r24
    170e:	08 f0       	brcs	.+2      	; 0x1712 <__addsf3x+0xa2>
    1710:	99 27       	eor	r25, r25
    1712:	ee 0f       	add	r30, r30
    1714:	97 95       	ror	r25
    1716:	87 95       	ror	r24
    1718:	08 95       	ret

0000171a <__divsf3>:
    171a:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__divsf3x>
    171e:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <__fp_round>
    1722:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__fp_pscB>
    1726:	58 f0       	brcs	.+22     	; 0x173e <__divsf3+0x24>
    1728:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__fp_pscA>
    172c:	40 f0       	brcs	.+16     	; 0x173e <__divsf3+0x24>
    172e:	29 f4       	brne	.+10     	; 0x173a <__divsf3+0x20>
    1730:	5f 3f       	cpi	r21, 0xFF	; 255
    1732:	29 f0       	breq	.+10     	; 0x173e <__divsf3+0x24>
    1734:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__fp_inf>
    1738:	51 11       	cpse	r21, r1
    173a:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__fp_szero>
    173e:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__fp_nan>

00001742 <__divsf3x>:
    1742:	0e 94 93 0c 	call	0x1926	; 0x1926 <__fp_split3>
    1746:	68 f3       	brcs	.-38     	; 0x1722 <__divsf3+0x8>

00001748 <__divsf3_pse>:
    1748:	99 23       	and	r25, r25
    174a:	b1 f3       	breq	.-20     	; 0x1738 <__divsf3+0x1e>
    174c:	55 23       	and	r21, r21
    174e:	91 f3       	breq	.-28     	; 0x1734 <__divsf3+0x1a>
    1750:	95 1b       	sub	r25, r21
    1752:	55 0b       	sbc	r21, r21
    1754:	bb 27       	eor	r27, r27
    1756:	aa 27       	eor	r26, r26
    1758:	62 17       	cp	r22, r18
    175a:	73 07       	cpc	r23, r19
    175c:	84 07       	cpc	r24, r20
    175e:	38 f0       	brcs	.+14     	; 0x176e <__divsf3_pse+0x26>
    1760:	9f 5f       	subi	r25, 0xFF	; 255
    1762:	5f 4f       	sbci	r21, 0xFF	; 255
    1764:	22 0f       	add	r18, r18
    1766:	33 1f       	adc	r19, r19
    1768:	44 1f       	adc	r20, r20
    176a:	aa 1f       	adc	r26, r26
    176c:	a9 f3       	breq	.-22     	; 0x1758 <__divsf3_pse+0x10>
    176e:	35 d0       	rcall	.+106    	; 0x17da <__divsf3_pse+0x92>
    1770:	0e 2e       	mov	r0, r30
    1772:	3a f0       	brmi	.+14     	; 0x1782 <__divsf3_pse+0x3a>
    1774:	e0 e8       	ldi	r30, 0x80	; 128
    1776:	32 d0       	rcall	.+100    	; 0x17dc <__divsf3_pse+0x94>
    1778:	91 50       	subi	r25, 0x01	; 1
    177a:	50 40       	sbci	r21, 0x00	; 0
    177c:	e6 95       	lsr	r30
    177e:	00 1c       	adc	r0, r0
    1780:	ca f7       	brpl	.-14     	; 0x1774 <__divsf3_pse+0x2c>
    1782:	2b d0       	rcall	.+86     	; 0x17da <__divsf3_pse+0x92>
    1784:	fe 2f       	mov	r31, r30
    1786:	29 d0       	rcall	.+82     	; 0x17da <__divsf3_pse+0x92>
    1788:	66 0f       	add	r22, r22
    178a:	77 1f       	adc	r23, r23
    178c:	88 1f       	adc	r24, r24
    178e:	bb 1f       	adc	r27, r27
    1790:	26 17       	cp	r18, r22
    1792:	37 07       	cpc	r19, r23
    1794:	48 07       	cpc	r20, r24
    1796:	ab 07       	cpc	r26, r27
    1798:	b0 e8       	ldi	r27, 0x80	; 128
    179a:	09 f0       	breq	.+2      	; 0x179e <__divsf3_pse+0x56>
    179c:	bb 0b       	sbc	r27, r27
    179e:	80 2d       	mov	r24, r0
    17a0:	bf 01       	movw	r22, r30
    17a2:	ff 27       	eor	r31, r31
    17a4:	93 58       	subi	r25, 0x83	; 131
    17a6:	5f 4f       	sbci	r21, 0xFF	; 255
    17a8:	3a f0       	brmi	.+14     	; 0x17b8 <__divsf3_pse+0x70>
    17aa:	9e 3f       	cpi	r25, 0xFE	; 254
    17ac:	51 05       	cpc	r21, r1
    17ae:	78 f0       	brcs	.+30     	; 0x17ce <__divsf3_pse+0x86>
    17b0:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__fp_inf>
    17b4:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__fp_szero>
    17b8:	5f 3f       	cpi	r21, 0xFF	; 255
    17ba:	e4 f3       	brlt	.-8      	; 0x17b4 <__divsf3_pse+0x6c>
    17bc:	98 3e       	cpi	r25, 0xE8	; 232
    17be:	d4 f3       	brlt	.-12     	; 0x17b4 <__divsf3_pse+0x6c>
    17c0:	86 95       	lsr	r24
    17c2:	77 95       	ror	r23
    17c4:	67 95       	ror	r22
    17c6:	b7 95       	ror	r27
    17c8:	f7 95       	ror	r31
    17ca:	9f 5f       	subi	r25, 0xFF	; 255
    17cc:	c9 f7       	brne	.-14     	; 0x17c0 <__divsf3_pse+0x78>
    17ce:	88 0f       	add	r24, r24
    17d0:	91 1d       	adc	r25, r1
    17d2:	96 95       	lsr	r25
    17d4:	87 95       	ror	r24
    17d6:	97 f9       	bld	r25, 7
    17d8:	08 95       	ret
    17da:	e1 e0       	ldi	r30, 0x01	; 1
    17dc:	66 0f       	add	r22, r22
    17de:	77 1f       	adc	r23, r23
    17e0:	88 1f       	adc	r24, r24
    17e2:	bb 1f       	adc	r27, r27
    17e4:	62 17       	cp	r22, r18
    17e6:	73 07       	cpc	r23, r19
    17e8:	84 07       	cpc	r24, r20
    17ea:	ba 07       	cpc	r27, r26
    17ec:	20 f0       	brcs	.+8      	; 0x17f6 <__divsf3_pse+0xae>
    17ee:	62 1b       	sub	r22, r18
    17f0:	73 0b       	sbc	r23, r19
    17f2:	84 0b       	sbc	r24, r20
    17f4:	ba 0b       	sbc	r27, r26
    17f6:	ee 1f       	adc	r30, r30
    17f8:	88 f7       	brcc	.-30     	; 0x17dc <__divsf3_pse+0x94>
    17fa:	e0 95       	com	r30
    17fc:	08 95       	ret

000017fe <__fixunssfsi>:
    17fe:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__fp_splitA>
    1802:	88 f0       	brcs	.+34     	; 0x1826 <__fixunssfsi+0x28>
    1804:	9f 57       	subi	r25, 0x7F	; 127
    1806:	98 f0       	brcs	.+38     	; 0x182e <__fixunssfsi+0x30>
    1808:	b9 2f       	mov	r27, r25
    180a:	99 27       	eor	r25, r25
    180c:	b7 51       	subi	r27, 0x17	; 23
    180e:	b0 f0       	brcs	.+44     	; 0x183c <__fixunssfsi+0x3e>
    1810:	e1 f0       	breq	.+56     	; 0x184a <__fixunssfsi+0x4c>
    1812:	66 0f       	add	r22, r22
    1814:	77 1f       	adc	r23, r23
    1816:	88 1f       	adc	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	1a f0       	brmi	.+6      	; 0x1822 <__fixunssfsi+0x24>
    181c:	ba 95       	dec	r27
    181e:	c9 f7       	brne	.-14     	; 0x1812 <__fixunssfsi+0x14>
    1820:	14 c0       	rjmp	.+40     	; 0x184a <__fixunssfsi+0x4c>
    1822:	b1 30       	cpi	r27, 0x01	; 1
    1824:	91 f0       	breq	.+36     	; 0x184a <__fixunssfsi+0x4c>
    1826:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fp_zero>
    182a:	b1 e0       	ldi	r27, 0x01	; 1
    182c:	08 95       	ret
    182e:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__fp_zero>
    1832:	67 2f       	mov	r22, r23
    1834:	78 2f       	mov	r23, r24
    1836:	88 27       	eor	r24, r24
    1838:	b8 5f       	subi	r27, 0xF8	; 248
    183a:	39 f0       	breq	.+14     	; 0x184a <__fixunssfsi+0x4c>
    183c:	b9 3f       	cpi	r27, 0xF9	; 249
    183e:	cc f3       	brlt	.-14     	; 0x1832 <__fixunssfsi+0x34>
    1840:	86 95       	lsr	r24
    1842:	77 95       	ror	r23
    1844:	67 95       	ror	r22
    1846:	b3 95       	inc	r27
    1848:	d9 f7       	brne	.-10     	; 0x1840 <__fixunssfsi+0x42>
    184a:	3e f4       	brtc	.+14     	; 0x185a <__fixunssfsi+0x5c>
    184c:	90 95       	com	r25
    184e:	80 95       	com	r24
    1850:	70 95       	com	r23
    1852:	61 95       	neg	r22
    1854:	7f 4f       	sbci	r23, 0xFF	; 255
    1856:	8f 4f       	sbci	r24, 0xFF	; 255
    1858:	9f 4f       	sbci	r25, 0xFF	; 255
    185a:	08 95       	ret

0000185c <__floatunsisf>:
    185c:	e8 94       	clt
    185e:	09 c0       	rjmp	.+18     	; 0x1872 <__floatsisf+0x12>

00001860 <__floatsisf>:
    1860:	97 fb       	bst	r25, 7
    1862:	3e f4       	brtc	.+14     	; 0x1872 <__floatsisf+0x12>
    1864:	90 95       	com	r25
    1866:	80 95       	com	r24
    1868:	70 95       	com	r23
    186a:	61 95       	neg	r22
    186c:	7f 4f       	sbci	r23, 0xFF	; 255
    186e:	8f 4f       	sbci	r24, 0xFF	; 255
    1870:	9f 4f       	sbci	r25, 0xFF	; 255
    1872:	99 23       	and	r25, r25
    1874:	a9 f0       	breq	.+42     	; 0x18a0 <__floatsisf+0x40>
    1876:	f9 2f       	mov	r31, r25
    1878:	96 e9       	ldi	r25, 0x96	; 150
    187a:	bb 27       	eor	r27, r27
    187c:	93 95       	inc	r25
    187e:	f6 95       	lsr	r31
    1880:	87 95       	ror	r24
    1882:	77 95       	ror	r23
    1884:	67 95       	ror	r22
    1886:	b7 95       	ror	r27
    1888:	f1 11       	cpse	r31, r1
    188a:	f8 cf       	rjmp	.-16     	; 0x187c <__floatsisf+0x1c>
    188c:	fa f4       	brpl	.+62     	; 0x18cc <__floatsisf+0x6c>
    188e:	bb 0f       	add	r27, r27
    1890:	11 f4       	brne	.+4      	; 0x1896 <__floatsisf+0x36>
    1892:	60 ff       	sbrs	r22, 0
    1894:	1b c0       	rjmp	.+54     	; 0x18cc <__floatsisf+0x6c>
    1896:	6f 5f       	subi	r22, 0xFF	; 255
    1898:	7f 4f       	sbci	r23, 0xFF	; 255
    189a:	8f 4f       	sbci	r24, 0xFF	; 255
    189c:	9f 4f       	sbci	r25, 0xFF	; 255
    189e:	16 c0       	rjmp	.+44     	; 0x18cc <__floatsisf+0x6c>
    18a0:	88 23       	and	r24, r24
    18a2:	11 f0       	breq	.+4      	; 0x18a8 <__floatsisf+0x48>
    18a4:	96 e9       	ldi	r25, 0x96	; 150
    18a6:	11 c0       	rjmp	.+34     	; 0x18ca <__floatsisf+0x6a>
    18a8:	77 23       	and	r23, r23
    18aa:	21 f0       	breq	.+8      	; 0x18b4 <__floatsisf+0x54>
    18ac:	9e e8       	ldi	r25, 0x8E	; 142
    18ae:	87 2f       	mov	r24, r23
    18b0:	76 2f       	mov	r23, r22
    18b2:	05 c0       	rjmp	.+10     	; 0x18be <__floatsisf+0x5e>
    18b4:	66 23       	and	r22, r22
    18b6:	71 f0       	breq	.+28     	; 0x18d4 <__floatsisf+0x74>
    18b8:	96 e8       	ldi	r25, 0x86	; 134
    18ba:	86 2f       	mov	r24, r22
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	2a f0       	brmi	.+10     	; 0x18cc <__floatsisf+0x6c>
    18c2:	9a 95       	dec	r25
    18c4:	66 0f       	add	r22, r22
    18c6:	77 1f       	adc	r23, r23
    18c8:	88 1f       	adc	r24, r24
    18ca:	da f7       	brpl	.-10     	; 0x18c2 <__floatsisf+0x62>
    18cc:	88 0f       	add	r24, r24
    18ce:	96 95       	lsr	r25
    18d0:	87 95       	ror	r24
    18d2:	97 f9       	bld	r25, 7
    18d4:	08 95       	ret

000018d6 <__fp_inf>:
    18d6:	97 f9       	bld	r25, 7
    18d8:	9f 67       	ori	r25, 0x7F	; 127
    18da:	80 e8       	ldi	r24, 0x80	; 128
    18dc:	70 e0       	ldi	r23, 0x00	; 0
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	08 95       	ret

000018e2 <__fp_nan>:
    18e2:	9f ef       	ldi	r25, 0xFF	; 255
    18e4:	80 ec       	ldi	r24, 0xC0	; 192
    18e6:	08 95       	ret

000018e8 <__fp_pscA>:
    18e8:	00 24       	eor	r0, r0
    18ea:	0a 94       	dec	r0
    18ec:	16 16       	cp	r1, r22
    18ee:	17 06       	cpc	r1, r23
    18f0:	18 06       	cpc	r1, r24
    18f2:	09 06       	cpc	r0, r25
    18f4:	08 95       	ret

000018f6 <__fp_pscB>:
    18f6:	00 24       	eor	r0, r0
    18f8:	0a 94       	dec	r0
    18fa:	12 16       	cp	r1, r18
    18fc:	13 06       	cpc	r1, r19
    18fe:	14 06       	cpc	r1, r20
    1900:	05 06       	cpc	r0, r21
    1902:	08 95       	ret

00001904 <__fp_round>:
    1904:	09 2e       	mov	r0, r25
    1906:	03 94       	inc	r0
    1908:	00 0c       	add	r0, r0
    190a:	11 f4       	brne	.+4      	; 0x1910 <__fp_round+0xc>
    190c:	88 23       	and	r24, r24
    190e:	52 f0       	brmi	.+20     	; 0x1924 <__fp_round+0x20>
    1910:	bb 0f       	add	r27, r27
    1912:	40 f4       	brcc	.+16     	; 0x1924 <__fp_round+0x20>
    1914:	bf 2b       	or	r27, r31
    1916:	11 f4       	brne	.+4      	; 0x191c <__fp_round+0x18>
    1918:	60 ff       	sbrs	r22, 0
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <__fp_round+0x20>
    191c:	6f 5f       	subi	r22, 0xFF	; 255
    191e:	7f 4f       	sbci	r23, 0xFF	; 255
    1920:	8f 4f       	sbci	r24, 0xFF	; 255
    1922:	9f 4f       	sbci	r25, 0xFF	; 255
    1924:	08 95       	ret

00001926 <__fp_split3>:
    1926:	57 fd       	sbrc	r21, 7
    1928:	90 58       	subi	r25, 0x80	; 128
    192a:	44 0f       	add	r20, r20
    192c:	55 1f       	adc	r21, r21
    192e:	59 f0       	breq	.+22     	; 0x1946 <__fp_splitA+0x10>
    1930:	5f 3f       	cpi	r21, 0xFF	; 255
    1932:	71 f0       	breq	.+28     	; 0x1950 <__fp_splitA+0x1a>
    1934:	47 95       	ror	r20

00001936 <__fp_splitA>:
    1936:	88 0f       	add	r24, r24
    1938:	97 fb       	bst	r25, 7
    193a:	99 1f       	adc	r25, r25
    193c:	61 f0       	breq	.+24     	; 0x1956 <__fp_splitA+0x20>
    193e:	9f 3f       	cpi	r25, 0xFF	; 255
    1940:	79 f0       	breq	.+30     	; 0x1960 <__fp_splitA+0x2a>
    1942:	87 95       	ror	r24
    1944:	08 95       	ret
    1946:	12 16       	cp	r1, r18
    1948:	13 06       	cpc	r1, r19
    194a:	14 06       	cpc	r1, r20
    194c:	55 1f       	adc	r21, r21
    194e:	f2 cf       	rjmp	.-28     	; 0x1934 <__fp_split3+0xe>
    1950:	46 95       	lsr	r20
    1952:	f1 df       	rcall	.-30     	; 0x1936 <__fp_splitA>
    1954:	08 c0       	rjmp	.+16     	; 0x1966 <__fp_splitA+0x30>
    1956:	16 16       	cp	r1, r22
    1958:	17 06       	cpc	r1, r23
    195a:	18 06       	cpc	r1, r24
    195c:	99 1f       	adc	r25, r25
    195e:	f1 cf       	rjmp	.-30     	; 0x1942 <__fp_splitA+0xc>
    1960:	86 95       	lsr	r24
    1962:	71 05       	cpc	r23, r1
    1964:	61 05       	cpc	r22, r1
    1966:	08 94       	sec
    1968:	08 95       	ret

0000196a <__fp_zero>:
    196a:	e8 94       	clt

0000196c <__fp_szero>:
    196c:	bb 27       	eor	r27, r27
    196e:	66 27       	eor	r22, r22
    1970:	77 27       	eor	r23, r23
    1972:	cb 01       	movw	r24, r22
    1974:	97 f9       	bld	r25, 7
    1976:	08 95       	ret

00001978 <__mulsf3>:
    1978:	0e 94 cf 0c 	call	0x199e	; 0x199e <__mulsf3x>
    197c:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <__fp_round>
    1980:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__fp_pscA>
    1984:	38 f0       	brcs	.+14     	; 0x1994 <__mulsf3+0x1c>
    1986:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__fp_pscB>
    198a:	20 f0       	brcs	.+8      	; 0x1994 <__mulsf3+0x1c>
    198c:	95 23       	and	r25, r21
    198e:	11 f0       	breq	.+4      	; 0x1994 <__mulsf3+0x1c>
    1990:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__fp_inf>
    1994:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__fp_nan>
    1998:	11 24       	eor	r1, r1
    199a:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__fp_szero>

0000199e <__mulsf3x>:
    199e:	0e 94 93 0c 	call	0x1926	; 0x1926 <__fp_split3>
    19a2:	70 f3       	brcs	.-36     	; 0x1980 <__mulsf3+0x8>

000019a4 <__mulsf3_pse>:
    19a4:	95 9f       	mul	r25, r21
    19a6:	c1 f3       	breq	.-16     	; 0x1998 <__mulsf3+0x20>
    19a8:	95 0f       	add	r25, r21
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	55 1f       	adc	r21, r21
    19ae:	62 9f       	mul	r22, r18
    19b0:	f0 01       	movw	r30, r0
    19b2:	72 9f       	mul	r23, r18
    19b4:	bb 27       	eor	r27, r27
    19b6:	f0 0d       	add	r31, r0
    19b8:	b1 1d       	adc	r27, r1
    19ba:	63 9f       	mul	r22, r19
    19bc:	aa 27       	eor	r26, r26
    19be:	f0 0d       	add	r31, r0
    19c0:	b1 1d       	adc	r27, r1
    19c2:	aa 1f       	adc	r26, r26
    19c4:	64 9f       	mul	r22, r20
    19c6:	66 27       	eor	r22, r22
    19c8:	b0 0d       	add	r27, r0
    19ca:	a1 1d       	adc	r26, r1
    19cc:	66 1f       	adc	r22, r22
    19ce:	82 9f       	mul	r24, r18
    19d0:	22 27       	eor	r18, r18
    19d2:	b0 0d       	add	r27, r0
    19d4:	a1 1d       	adc	r26, r1
    19d6:	62 1f       	adc	r22, r18
    19d8:	73 9f       	mul	r23, r19
    19da:	b0 0d       	add	r27, r0
    19dc:	a1 1d       	adc	r26, r1
    19de:	62 1f       	adc	r22, r18
    19e0:	83 9f       	mul	r24, r19
    19e2:	a0 0d       	add	r26, r0
    19e4:	61 1d       	adc	r22, r1
    19e6:	22 1f       	adc	r18, r18
    19e8:	74 9f       	mul	r23, r20
    19ea:	33 27       	eor	r19, r19
    19ec:	a0 0d       	add	r26, r0
    19ee:	61 1d       	adc	r22, r1
    19f0:	23 1f       	adc	r18, r19
    19f2:	84 9f       	mul	r24, r20
    19f4:	60 0d       	add	r22, r0
    19f6:	21 1d       	adc	r18, r1
    19f8:	82 2f       	mov	r24, r18
    19fa:	76 2f       	mov	r23, r22
    19fc:	6a 2f       	mov	r22, r26
    19fe:	11 24       	eor	r1, r1
    1a00:	9f 57       	subi	r25, 0x7F	; 127
    1a02:	50 40       	sbci	r21, 0x00	; 0
    1a04:	9a f0       	brmi	.+38     	; 0x1a2c <__mulsf3_pse+0x88>
    1a06:	f1 f0       	breq	.+60     	; 0x1a44 <__mulsf3_pse+0xa0>
    1a08:	88 23       	and	r24, r24
    1a0a:	4a f0       	brmi	.+18     	; 0x1a1e <__mulsf3_pse+0x7a>
    1a0c:	ee 0f       	add	r30, r30
    1a0e:	ff 1f       	adc	r31, r31
    1a10:	bb 1f       	adc	r27, r27
    1a12:	66 1f       	adc	r22, r22
    1a14:	77 1f       	adc	r23, r23
    1a16:	88 1f       	adc	r24, r24
    1a18:	91 50       	subi	r25, 0x01	; 1
    1a1a:	50 40       	sbci	r21, 0x00	; 0
    1a1c:	a9 f7       	brne	.-22     	; 0x1a08 <__mulsf3_pse+0x64>
    1a1e:	9e 3f       	cpi	r25, 0xFE	; 254
    1a20:	51 05       	cpc	r21, r1
    1a22:	80 f0       	brcs	.+32     	; 0x1a44 <__mulsf3_pse+0xa0>
    1a24:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__fp_inf>
    1a28:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__fp_szero>
    1a2c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a2e:	e4 f3       	brlt	.-8      	; 0x1a28 <__mulsf3_pse+0x84>
    1a30:	98 3e       	cpi	r25, 0xE8	; 232
    1a32:	d4 f3       	brlt	.-12     	; 0x1a28 <__mulsf3_pse+0x84>
    1a34:	86 95       	lsr	r24
    1a36:	77 95       	ror	r23
    1a38:	67 95       	ror	r22
    1a3a:	b7 95       	ror	r27
    1a3c:	f7 95       	ror	r31
    1a3e:	e7 95       	ror	r30
    1a40:	9f 5f       	subi	r25, 0xFF	; 255
    1a42:	c1 f7       	brne	.-16     	; 0x1a34 <__mulsf3_pse+0x90>
    1a44:	fe 2b       	or	r31, r30
    1a46:	88 0f       	add	r24, r24
    1a48:	91 1d       	adc	r25, r1
    1a4a:	96 95       	lsr	r25
    1a4c:	87 95       	ror	r24
    1a4e:	97 f9       	bld	r25, 7
    1a50:	08 95       	ret

00001a52 <__divmodsi4>:
    1a52:	05 2e       	mov	r0, r21
    1a54:	97 fb       	bst	r25, 7
    1a56:	1e f4       	brtc	.+6      	; 0x1a5e <__divmodsi4+0xc>
    1a58:	00 94       	com	r0
    1a5a:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__negsi2>
    1a5e:	57 fd       	sbrc	r21, 7
    1a60:	07 d0       	rcall	.+14     	; 0x1a70 <__divmodsi4_neg2>
    1a62:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__udivmodsi4>
    1a66:	07 fc       	sbrc	r0, 7
    1a68:	03 d0       	rcall	.+6      	; 0x1a70 <__divmodsi4_neg2>
    1a6a:	4e f4       	brtc	.+18     	; 0x1a7e <__divmodsi4_exit>
    1a6c:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__negsi2>

00001a70 <__divmodsi4_neg2>:
    1a70:	50 95       	com	r21
    1a72:	40 95       	com	r20
    1a74:	30 95       	com	r19
    1a76:	21 95       	neg	r18
    1a78:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7a:	4f 4f       	sbci	r20, 0xFF	; 255
    1a7c:	5f 4f       	sbci	r21, 0xFF	; 255

00001a7e <__divmodsi4_exit>:
    1a7e:	08 95       	ret

00001a80 <__negsi2>:
    1a80:	90 95       	com	r25
    1a82:	80 95       	com	r24
    1a84:	70 95       	com	r23
    1a86:	61 95       	neg	r22
    1a88:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8e:	08 95       	ret

00001a90 <__umulhisi3>:
    1a90:	a2 9f       	mul	r26, r18
    1a92:	b0 01       	movw	r22, r0
    1a94:	b3 9f       	mul	r27, r19
    1a96:	c0 01       	movw	r24, r0
    1a98:	a3 9f       	mul	r26, r19
    1a9a:	70 0d       	add	r23, r0
    1a9c:	81 1d       	adc	r24, r1
    1a9e:	11 24       	eor	r1, r1
    1aa0:	91 1d       	adc	r25, r1
    1aa2:	b2 9f       	mul	r27, r18
    1aa4:	70 0d       	add	r23, r0
    1aa6:	81 1d       	adc	r24, r1
    1aa8:	11 24       	eor	r1, r1
    1aaa:	91 1d       	adc	r25, r1
    1aac:	08 95       	ret

00001aae <__udivmodsi4>:
    1aae:	a1 e2       	ldi	r26, 0x21	; 33
    1ab0:	1a 2e       	mov	r1, r26
    1ab2:	aa 1b       	sub	r26, r26
    1ab4:	bb 1b       	sub	r27, r27
    1ab6:	fd 01       	movw	r30, r26
    1ab8:	0d c0       	rjmp	.+26     	; 0x1ad4 <__udivmodsi4_ep>

00001aba <__udivmodsi4_loop>:
    1aba:	aa 1f       	adc	r26, r26
    1abc:	bb 1f       	adc	r27, r27
    1abe:	ee 1f       	adc	r30, r30
    1ac0:	ff 1f       	adc	r31, r31
    1ac2:	a2 17       	cp	r26, r18
    1ac4:	b3 07       	cpc	r27, r19
    1ac6:	e4 07       	cpc	r30, r20
    1ac8:	f5 07       	cpc	r31, r21
    1aca:	20 f0       	brcs	.+8      	; 0x1ad4 <__udivmodsi4_ep>
    1acc:	a2 1b       	sub	r26, r18
    1ace:	b3 0b       	sbc	r27, r19
    1ad0:	e4 0b       	sbc	r30, r20
    1ad2:	f5 0b       	sbc	r31, r21

00001ad4 <__udivmodsi4_ep>:
    1ad4:	66 1f       	adc	r22, r22
    1ad6:	77 1f       	adc	r23, r23
    1ad8:	88 1f       	adc	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	1a 94       	dec	r1
    1ade:	69 f7       	brne	.-38     	; 0x1aba <__udivmodsi4_loop>
    1ae0:	60 95       	com	r22
    1ae2:	70 95       	com	r23
    1ae4:	80 95       	com	r24
    1ae6:	90 95       	com	r25
    1ae8:	9b 01       	movw	r18, r22
    1aea:	ac 01       	movw	r20, r24
    1aec:	bd 01       	movw	r22, r26
    1aee:	cf 01       	movw	r24, r30
    1af0:	08 95       	ret

00001af2 <_exit>:
    1af2:	f8 94       	cli

00001af4 <__stop_program>:
    1af4:	ff cf       	rjmp	.-2      	; 0x1af4 <__stop_program>
