
Obstacle-avoidance-car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b8  00800060  00001b00  00001b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  00800118  00800118  00001c4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000468  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000046f2  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000156b  00000000  00000000  00006812  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000025f5  00000000  00000000  00007d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bd4  00000000  00000000  0000a374  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014bf  00000000  00000000  0000af48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029ea  00000000  00000000  0000c407  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  0000edf1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__vector_1>
       8:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__vector_2>
       c:	0c 94 85 08 	jmp	0x110a	; 0x110a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__vector_5>
      18:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <__vector_8>
      24:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 ae 09 	jmp	0x135c	; 0x135c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 31       	cpi	r26, 0x18	; 24
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a8 e1       	ldi	r26, 0x18	; 24
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 34       	cpi	r26, 0x45	; 69
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 38 05 	call	0xa70	; 0xa70 <main>
      8a:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Speed_50_check>:
	_delay_ms(1000);
}

void Speed_50_check()
{
	if(g_speed_flag == 1)
      92:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <g_speed_flag>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	c9 f5       	brne	.+114    	; 0x10c <Speed_50_check+0x7a>
	{
		
		if (ovf < mode_ovf ){
      9a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <ovf>
      9e:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <ovf+0x1>
      a2:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <ovf+0x2>
      a6:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <ovf+0x3>
      aa:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <mode_ovf>
      ae:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <mode_ovf+0x1>
      b2:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <mode_ovf+0x2>
      b6:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <mode_ovf+0x3>
      ba:	84 17       	cp	r24, r20
      bc:	95 07       	cpc	r25, r21
      be:	a6 07       	cpc	r26, r22
      c0:	b7 07       	cpc	r27, r23
      c2:	64 f4       	brge	.+24     	; 0xdc <Speed_50_check+0x4a>
			ovf++;
      c4:	01 96       	adiw	r24, 0x01	; 1
      c6:	a1 1d       	adc	r26, r1
      c8:	b1 1d       	adc	r27, r1
      ca:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <ovf>
      ce:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <ovf+0x1>
      d2:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <ovf+0x2>
      d6:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <ovf+0x3>
      da:	08 95       	ret
		}
		else if ( ovf == mode_ovf && mode_ovf!=0)
      dc:	84 17       	cp	r24, r20
      de:	95 07       	cpc	r25, r21
      e0:	a6 07       	cpc	r26, r22
      e2:	b7 07       	cpc	r27, r23
      e4:	99 f4       	brne	.+38     	; 0x10c <Speed_50_check+0x7a>
      e6:	45 2b       	or	r20, r21
      e8:	46 2b       	or	r20, r22
      ea:	47 2b       	or	r20, r23
      ec:	79 f0       	breq	.+30     	; 0x10c <Speed_50_check+0x7a>
		{
			ovf =0 ;
      ee:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <ovf>
      f2:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <ovf+0x1>
      f6:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <ovf+0x2>
      fa:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <ovf+0x3>
			if (car_mode ==0)
      fe:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <car_mode>
     102:	81 11       	cpse	r24, r1
     104:	03 c0       	rjmp	.+6      	; 0x10c <Speed_50_check+0x7a>
			{
				car_mode=1;
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <car_mode>
     10c:	08 95       	ret

0000010e <car_Forward_30>:



void car_Forward_30()
{	
	LCD_Clear();
     10e:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_Clear>
	PWM_set_duty(30,100);
     112:	44 e6       	ldi	r20, 0x64	; 100
     114:	50 e0       	ldi	r21, 0x00	; 0
     116:	60 e0       	ldi	r22, 0x00	; 0
     118:	70 e0       	ldi	r23, 0x00	; 0
     11a:	8e e1       	ldi	r24, 0x1E	; 30
     11c:	0e 94 0f 09 	call	0x121e	; 0x121e <PWM_set_duty>
	timer_start(TIMER0_SCALER_8);
     120:	82 e0       	ldi	r24, 0x02	; 2
     122:	0e 94 9d 09 	call	0x133a	; 0x133a <timer_start>
	Car_Moving_FWD();
     126:	0e 94 a7 04 	call	0x94e	; 0x94e <Car_Moving_FWD>
	LCD_SetCursor(0,0);
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCD_SetCursor>
	LCD_WriteString("Speed:30% Dir:	F");
     132:	89 e6       	ldi	r24, 0x69	; 105
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_WriteString>
	LCD_SetCursor(1,0);
     13a:	60 e0       	ldi	r22, 0x00	; 0
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCD_SetCursor>
	LCD_WriteString("Dist.:");
     142:	8a e7       	ldi	r24, 0x7A	; 122
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_WriteString>
	LCD_WriteNumber(g_distance);
     14a:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <g_distance>
     14e:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <g_distance+0x1>
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 17 04 	call	0x82e	; 0x82e <LCD_WriteNumber>
	LCD_WriteString(" Cm");
     15a:	81 e8       	ldi	r24, 0x81	; 129
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_WriteString>
     162:	08 95       	ret

00000164 <car_Forward_50>:
}

void car_Forward_50()
{
	LCD_Clear();
     164:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_Clear>
	PWM_set_duty(50,100);
     168:	44 e6       	ldi	r20, 0x64	; 100
     16a:	50 e0       	ldi	r21, 0x00	; 0
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	82 e3       	ldi	r24, 0x32	; 50
     172:	0e 94 0f 09 	call	0x121e	; 0x121e <PWM_set_duty>
	timer_start(TIMER0_SCALER_8);
     176:	82 e0       	ldi	r24, 0x02	; 2
     178:	0e 94 9d 09 	call	0x133a	; 0x133a <timer_start>
	Car_Moving_FWD();
     17c:	0e 94 a7 04 	call	0x94e	; 0x94e <Car_Moving_FWD>
	LCD_SetCursor(0,0);
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCD_SetCursor>
	LCD_WriteString("Speed:50% Dir:	F");
     188:	85 e8       	ldi	r24, 0x85	; 133
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_WriteString>
	LCD_SetCursor(1,0);
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCD_SetCursor>
	LCD_WriteString("Dist.:");
     198:	8a e7       	ldi	r24, 0x7A	; 122
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_WriteString>
	LCD_WriteNumber(g_distance);
     1a0:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <g_distance>
     1a4:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <g_distance+0x1>
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 17 04 	call	0x82e	; 0x82e <LCD_WriteNumber>
	LCD_WriteString(" Cm");
     1b0:	81 e8       	ldi	r24, 0x81	; 129
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_WriteString>
     1b8:	08 95       	ret

000001ba <car_Rotating>:
}

void car_Rotating()
{
		LCD_Clear();
     1ba:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_Clear>
		PWM_set_duty(30,100);
     1be:	44 e6       	ldi	r20, 0x64	; 100
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	8e e1       	ldi	r24, 0x1E	; 30
     1c8:	0e 94 0f 09 	call	0x121e	; 0x121e <PWM_set_duty>
		timer_start(TIMER0_SCALER_8);
     1cc:	82 e0       	ldi	r24, 0x02	; 2
     1ce:	0e 94 9d 09 	call	0x133a	; 0x133a <timer_start>
		LCD_SetCursor(0,0);
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCD_SetCursor>
		LCD_WriteString("Speed:30% Dir:	R");
     1da:	86 e9       	ldi	r24, 0x96	; 150
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_WriteString>
		LCD_SetCursor(1,0);
     1e2:	60 e0       	ldi	r22, 0x00	; 0
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCD_SetCursor>
		LCD_WriteString("Dist.:");
     1ea:	8a e7       	ldi	r24, 0x7A	; 122
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_WriteString>
		LCD_WriteNumber(g_distance);
     1f2:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <g_distance>
     1f6:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <g_distance+0x1>
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 17 04 	call	0x82e	; 0x82e <LCD_WriteNumber>
		LCD_WriteString(" Cm");
     202:	81 e8       	ldi	r24, 0x81	; 129
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_WriteString>
		if (g_counter %2 == 0)
     20a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <g_counter>
     20e:	80 fd       	sbrc	r24, 0
     210:	03 c0       	rjmp	.+6      	; 0x218 <car_Rotating+0x5e>
		{
			Car_Rotate_Right();
     212:	0e 94 dd 04 	call	0x9ba	; 0x9ba <Car_Rotate_Right>
     216:	02 c0       	rjmp	.+4      	; 0x21c <car_Rotating+0x62>
		}
		else
		{
			Car_Rotate_Left();
     218:	0e 94 ef 04 	call	0x9de	; 0x9de <Car_Rotate_Left>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     21c:	2f ef       	ldi	r18, 0xFF	; 255
     21e:	8d e3       	ldi	r24, 0x3D	; 61
     220:	99 e4       	ldi	r25, 0x49	; 73
     222:	21 50       	subi	r18, 0x01	; 1
     224:	80 40       	sbci	r24, 0x00	; 0
     226:	90 40       	sbci	r25, 0x00	; 0
     228:	e1 f7       	brne	.-8      	; 0x222 <car_Rotating+0x68>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <car_Rotating+0x72>
     22c:	00 00       	nop
     22e:	08 95       	ret

00000230 <car_Backword_30>:
		_delay_ms(3000);
}

void car_Backword_30()
{
	while (g_distance <= 20)
     230:	2e c0       	rjmp	.+92     	; 0x28e <car_Backword_30+0x5e>
	{
		US_getdistance(&g_distance);
     232:	8f e3       	ldi	r24, 0x3F	; 63
     234:	91 e0       	ldi	r25, 0x01	; 1
     236:	0e 94 14 05 	call	0xa28	; 0xa28 <US_getdistance>
		LCD_Clear();
     23a:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_Clear>
		PWM_set_duty(30,100);
     23e:	44 e6       	ldi	r20, 0x64	; 100
     240:	50 e0       	ldi	r21, 0x00	; 0
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	8e e1       	ldi	r24, 0x1E	; 30
     248:	0e 94 0f 09 	call	0x121e	; 0x121e <PWM_set_duty>
		timer_start(TIMER0_SCALER_8);
     24c:	82 e0       	ldi	r24, 0x02	; 2
     24e:	0e 94 9d 09 	call	0x133a	; 0x133a <timer_start>
		Car_Moving_BWD();
     252:	0e 94 b9 04 	call	0x972	; 0x972 <Car_Moving_BWD>
		LCD_SetCursor(0,0);
     256:	60 e0       	ldi	r22, 0x00	; 0
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCD_SetCursor>
		LCD_WriteString("Speed:30% Dir:	B");
     25e:	87 ea       	ldi	r24, 0xA7	; 167
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_WriteString>
		LCD_SetCursor(1,0);
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCD_SetCursor>
		LCD_WriteString("Dist.:");
     26e:	8a e7       	ldi	r24, 0x7A	; 122
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_WriteString>
		LCD_WriteNumber(g_distance);
     276:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <g_distance>
     27a:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <g_distance+0x1>
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 17 04 	call	0x82e	; 0x82e <LCD_WriteNumber>
		LCD_WriteString(" Cm");
     286:	81 e8       	ldi	r24, 0x81	; 129
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_WriteString>
		_delay_ms(3000);
}

void car_Backword_30()
{
	while (g_distance <= 20)
     28e:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <g_distance>
     292:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <g_distance+0x1>
     296:	45 97       	sbiw	r24, 0x15	; 21
     298:	60 f2       	brcs	.-104    	; 0x232 <car_Backword_30+0x2>
		LCD_WriteString("Dist.:");
		LCD_WriteNumber(g_distance);
		LCD_WriteString(" Cm");
	}
	
}
     29a:	08 95       	ret

0000029c <Car_Stopping>:


void Car_Stopping()
{
	LCD_Clear();
     29c:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_Clear>
	PWM_set_duty(0,100);
     2a0:	44 e6       	ldi	r20, 0x64	; 100
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0e 94 0f 09 	call	0x121e	; 0x121e <PWM_set_duty>
	timer_start(TIMER0_SCALER_8);
     2ae:	82 e0       	ldi	r24, 0x02	; 2
     2b0:	0e 94 9d 09 	call	0x133a	; 0x133a <timer_start>
	Car_Stop();
     2b4:	0e 94 cb 04 	call	0x996	; 0x996 <Car_Stop>
	LCD_SetCursor(0,0);
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCD_SetCursor>
	LCD_WriteString("Speed:00% Dir:	S");
     2c0:	88 eb       	ldi	r24, 0xB8	; 184
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_WriteString>
	LCD_SetCursor(1,0);
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCD_SetCursor>
	LCD_WriteString("Dist.:");
     2d0:	8a e7       	ldi	r24, 0x7A	; 122
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_WriteString>
	LCD_WriteNumber(g_distance);
     2d8:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <g_distance>
     2dc:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <g_distance+0x1>
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 17 04 	call	0x82e	; 0x82e <LCD_WriteNumber>
	LCD_WriteString(" Cm");
     2e8:	81 e8       	ldi	r24, 0x81	; 129
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_WriteString>
     2f0:	2f ef       	ldi	r18, 0xFF	; 255
     2f2:	89 e6       	ldi	r24, 0x69	; 105
     2f4:	98 e1       	ldi	r25, 0x18	; 24
     2f6:	21 50       	subi	r18, 0x01	; 1
     2f8:	80 40       	sbci	r24, 0x00	; 0
     2fa:	90 40       	sbci	r25, 0x00	; 0
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <Car_Stopping+0x5a>
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <Car_Stopping+0x64>
     300:	00 00       	nop
     302:	08 95       	ret

00000304 <startStage>:
		}
	}
}

void startStage(void) 
{
     304:	1f 93       	push	r17
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
     30a:	00 d0       	rcall	.+0      	; 0x30c <startStage+0x8>
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
    u8 keyPressed = 0;								//Used to store the value of the key pressed 
     310:	19 82       	std	Y+1, r1	; 0x01
	u8 buttonCounter = 0;
	Button_State buttonState = 0;
     312:	1a 82       	std	Y+2, r1	; 0x02


	do {							
		KEYPAD_getpressedkey(&keyPressed);
     314:	ce 01       	movw	r24, r28
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	0e 94 ba 02 	call	0x574	; 0x574 <KEYPAD_getpressedkey>
		} while (keyPressed != '1');				//Key 1 is pressed. 
     31c:	89 81       	ldd	r24, Y+1	; 0x01
     31e:	81 33       	cpi	r24, 0x31	; 49
     320:	c9 f7       	brne	.-14     	; 0x314 <startStage+0x10>
	
	LCD_WriteString("Set Def Rot");
     322:	89 ec       	ldi	r24, 0xC9	; 201
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_WriteString>
	LCD_SetCursor(1, 0);
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCD_SetCursor>
	LCD_WriteString("Right");
     332:	85 ed       	ldi	r24, 0xD5	; 213
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_WriteString>
	
	mode_ovf = 100000;								//starts 5 seconds timer in ISR
     33a:	80 ea       	ldi	r24, 0xA0	; 160
     33c:	96 e8       	ldi	r25, 0x86	; 134
     33e:	a1 e0       	ldi	r26, 0x01	; 1
     340:	b0 e0       	ldi	r27, 0x00	; 0
     342:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <mode_ovf>
     346:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <mode_ovf+0x1>
     34a:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <mode_ovf+0x2>
     34e:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <mode_ovf+0x3>
	g_speed_flag = 1;
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <g_speed_flag>
}

void startStage(void) 
{
    u8 keyPressed = 0;								//Used to store the value of the key pressed 
	u8 buttonCounter = 0;
     358:	10 e0       	ldi	r17, 0x00	; 0
	LCD_WriteString("Right");
	
	mode_ovf = 100000;								//starts 5 seconds timer in ISR
	g_speed_flag = 1;
	
	while (car_mode == 0)
     35a:	29 c0       	rjmp	.+82     	; 0x3ae <startStage+0xaa>
	{
		buttonState = Is_pressed(BUTTON_PIN, &buttonState);
     35c:	be 01       	movw	r22, r28
     35e:	6e 5f       	subi	r22, 0xFE	; 254
     360:	7f 4f       	sbci	r23, 0xFF	; 255
     362:	8e e1       	ldi	r24, 0x1E	; 30
     364:	0e 94 81 02 	call	0x502	; 0x502 <Is_pressed>
     368:	8a 83       	std	Y+2, r24	; 0x02
			if (buttonState == pressed)
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	09 f4       	brne	.+2      	; 0x370 <startStage+0x6c>
			{
				buttonCounter++;					//if button is pressed, increase counter
     36e:	1f 5f       	subi	r17, 0xFF	; 255
			}
			if (buttonCounter % 2 == 0)
     370:	10 fd       	sbrc	r17, 0
     372:	0f c0       	rjmp	.+30     	; 0x392 <startStage+0x8e>
			{
				LCD_Clear();
     374:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_Clear>
				LCD_WriteString("Set Def. Rot.");
     378:	8b ed       	ldi	r24, 0xDB	; 219
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_WriteString>
				LCD_SetCursor(1, 0);
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCD_SetCursor>
				LCD_WriteString("Right");
     388:	85 ed       	ldi	r24, 0xD5	; 213
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_WriteString>
     390:	0e c0       	rjmp	.+28     	; 0x3ae <startStage+0xaa>
			} 
			else 
				{
					LCD_Clear();
     392:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_Clear>
					LCD_WriteString("Set Def. Rot.");
     396:	8b ed       	ldi	r24, 0xDB	; 219
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_WriteString>
					LCD_SetCursor(1, 0);
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCD_SetCursor>
					LCD_WriteString("Left");
     3a6:	89 ee       	ldi	r24, 0xE9	; 233
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_WriteString>
	LCD_WriteString("Right");
	
	mode_ovf = 100000;								//starts 5 seconds timer in ISR
	g_speed_flag = 1;
	
	while (car_mode == 0)
     3ae:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <car_mode>
     3b2:	88 23       	and	r24, r24
     3b4:	99 f2       	breq	.-90     	; 0x35c <startStage+0x58>
     3b6:	2f ef       	ldi	r18, 0xFF	; 255
     3b8:	83 ed       	ldi	r24, 0xD3	; 211
     3ba:	90 e3       	ldi	r25, 0x30	; 48
     3bc:	21 50       	subi	r18, 0x01	; 1
     3be:	80 40       	sbci	r24, 0x00	; 0
     3c0:	90 40       	sbci	r25, 0x00	; 0
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <startStage+0xb8>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <startStage+0xc2>
     3c6:	00 00       	nop
					LCD_SetCursor(1, 0);
					LCD_WriteString("Left");
				}
	}
	_delay_ms(2000);
	g_start_Flag = 1;
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	car_mode =0;
     3ce:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <car_mode>
	mode_ovf =0;
     3d2:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <mode_ovf>
     3d6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <mode_ovf+0x1>
     3da:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <mode_ovf+0x2>
     3de:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <mode_ovf+0x3>
	g_speed_flag=0;
     3e2:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <g_speed_flag>
}
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	08 95       	ret

000003f2 <app_init>:


void app_init()
{
	LCD_PinsInit();
     3f2:	0e 94 78 04 	call	0x8f0	; 0x8f0 <LCD_PinsInit>
	LCD_Init();
     3f6:	0e 94 ca 03 	call	0x794	; 0x794 <LCD_Init>
	GLOBALE_ENABLE();
     3fa:	78 94       	sei
	pwm_init();
     3fc:	0e 94 01 09 	call	0x1202	; 0x1202 <pwm_init>
	Car_Motors_init();
     400:	0e 94 95 04 	call	0x92a	; 0x92a <Car_Motors_init>
	LCD_Init();
     404:	0e 94 ca 03 	call	0x794	; 0x794 <LCD_Init>
	KEYPAD_init();
     408:	0e 94 a0 02 	call	0x540	; 0x540 <KEYPAD_init>
	DIO_initpin(PIND6,INPULL);
     40c:	62 e0       	ldi	r22, 0x02	; 2
     40e:	8e e1       	ldi	r24, 0x1E	; 30
     410:	0e 94 3d 05 	call	0xa7a	; 0xa7a <DIO_initpin>
	DIO_Init_All();
     414:	0e 94 4e 06 	call	0xc9c	; 0xc9c <DIO_Init_All>
	US_init();
     418:	0e 94 11 05 	call	0xa22	; 0xa22 <US_init>
	TIMER_2_INT();
     41c:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <TIMER_2_INT>
	TIMER2_OV_SetCallBack(Speed_50_check);
     420:	89 e4       	ldi	r24, 0x49	; 73
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <TIMER2_OV_SetCallBack>
     428:	08 95       	ret

0000042a <app_start>:
}

void app_start()
{
	startStage();
     42a:	0e 94 82 01 	call	0x304	; 0x304 <startStage>
	
	
	while (g_start_Flag)
     42e:	64 c0       	rjmp	.+200    	; 0x4f8 <app_start+0xce>
	{
		US_getdistance(&g_distance);
     430:	8f e3       	ldi	r24, 0x3F	; 63
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	0e 94 14 05 	call	0xa28	; 0xa28 <US_getdistance>
		if (g_distance > 70 && car_mode == 0)
     438:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <g_distance>
     43c:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <g_distance+0x1>
     440:	87 34       	cpi	r24, 0x47	; 71
     442:	91 05       	cpc	r25, r1
     444:	b0 f0       	brcs	.+44     	; 0x472 <app_start+0x48>
     446:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <car_mode>
     44a:	81 11       	cpse	r24, r1
     44c:	12 c0       	rjmp	.+36     	; 0x472 <app_start+0x48>
		{
			car_Forward_30();
     44e:	0e 94 87 00 	call	0x10e	; 0x10e <car_Forward_30>
			g_speed_flag = 1;
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <g_speed_flag>
			mode_ovf = 100000;
     458:	80 ea       	ldi	r24, 0xA0	; 160
     45a:	96 e8       	ldi	r25, 0x86	; 134
     45c:	a1 e0       	ldi	r26, 0x01	; 1
     45e:	b0 e0       	ldi	r27, 0x00	; 0
     460:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <mode_ovf>
     464:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <mode_ovf+0x1>
     468:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <mode_ovf+0x2>
     46c:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <mode_ovf+0x3>
     470:	43 c0       	rjmp	.+134    	; 0x4f8 <app_start+0xce>
		}
		else if (car_mode == 1 && g_distance > 70)
     472:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <car_mode>
     476:	81 30       	cpi	r24, 0x01	; 1
     478:	51 f4       	brne	.+20     	; 0x48e <app_start+0x64>
     47a:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <g_distance>
     47e:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <g_distance+0x1>
     482:	87 34       	cpi	r24, 0x47	; 71
     484:	91 05       	cpc	r25, r1
     486:	18 f0       	brcs	.+6      	; 0x48e <app_start+0x64>
		{
			car_Forward_50();
     488:	0e 94 b2 00 	call	0x164	; 0x164 <car_Forward_50>
     48c:	35 c0       	rjmp	.+106    	; 0x4f8 <app_start+0xce>
		}
		else if (g_distance <= 70 && g_distance > 30)
     48e:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <g_distance>
     492:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <g_distance+0x1>
     496:	87 34       	cpi	r24, 0x47	; 71
     498:	91 05       	cpc	r25, r1
     49a:	98 f4       	brcc	.+38     	; 0x4c2 <app_start+0x98>
     49c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <g_distance>
     4a0:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <g_distance+0x1>
     4a4:	4f 97       	sbiw	r24, 0x1f	; 31
     4a6:	68 f0       	brcs	.+26     	; 0x4c2 <app_start+0x98>
		{
			car_mode = 0;
     4a8:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <car_mode>
			mode_ovf=0;
     4ac:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <mode_ovf>
     4b0:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <mode_ovf+0x1>
     4b4:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <mode_ovf+0x2>
     4b8:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <mode_ovf+0x3>
			car_Forward_30();
     4bc:	0e 94 87 00 	call	0x10e	; 0x10e <car_Forward_30>
     4c0:	1b c0       	rjmp	.+54     	; 0x4f8 <app_start+0xce>
		}
		else if (g_distance <= 30 && g_distance > 20)
     4c2:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <g_distance>
     4c6:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <g_distance+0x1>
     4ca:	4f 97       	sbiw	r24, 0x1f	; 31
     4cc:	58 f4       	brcc	.+22     	; 0x4e4 <app_start+0xba>
     4ce:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <g_distance>
     4d2:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <g_distance+0x1>
     4d6:	45 97       	sbiw	r24, 0x15	; 21
     4d8:	28 f0       	brcs	.+10     	; 0x4e4 <app_start+0xba>
		{
			Car_Stopping();
     4da:	0e 94 4e 01 	call	0x29c	; 0x29c <Car_Stopping>
			car_Rotating();
     4de:	0e 94 dd 00 	call	0x1ba	; 0x1ba <car_Rotating>
     4e2:	0a c0       	rjmp	.+20     	; 0x4f8 <app_start+0xce>
		}
		else if (g_distance <= 20)
     4e4:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <g_distance>
     4e8:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <g_distance+0x1>
     4ec:	45 97       	sbiw	r24, 0x15	; 21
     4ee:	20 f4       	brcc	.+8      	; 0x4f8 <app_start+0xce>
		{
			Car_Stopping();
     4f0:	0e 94 4e 01 	call	0x29c	; 0x29c <Car_Stopping>
			car_Backword_30();
     4f4:	0e 94 18 01 	call	0x230	; 0x230 <car_Backword_30>
void app_start()
{
	startStage();
	
	
	while (g_start_Flag)
     4f8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     4fc:	81 11       	cpse	r24, r1
     4fe:	98 cf       	rjmp	.-208    	; 0x430 <app_start+0x6>
		{
			Car_Stopping();
			car_Backword_30();
		}
	}
     500:	08 95       	ret

00000502 <Is_pressed>:

#include "button_interface.h"
#include "button_config.h"
//static u8 button_press = 0 ; /** GLOBAL VARIABLE TO CHECK THE NUMBER OF PRESSED TIMES **/

Button_State Is_pressed(u8 BUTTON_PIN , u8* value){
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	1f 92       	push	r1
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	8b 01       	movw	r16, r22
	
	Button_State state = Notpressed; 
	en_dioError_t status_pin = WRONG_VALUE;
	
	u8 value_check = 0 ;
     512:	19 82       	std	Y+1, r1	; 0x01
	
	status_pin =  DIO_readpin (BUTTON_PIN, &value_check);
     514:	be 01       	movw	r22, r28
     516:	6f 5f       	subi	r22, 0xFF	; 255
     518:	7f 4f       	sbci	r23, 0xFF	; 255
     51a:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_readpin>
	
	if (!status_pin)
     51e:	81 11       	cpse	r24, r1
     520:	05 c0       	rjmp	.+10     	; 0x52c <Is_pressed+0x2a>
	{
		state = pressed ; 
		*value = value_check ;
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	f8 01       	movw	r30, r16
     526:	80 83       	st	Z, r24
	
	status_pin =  DIO_readpin (BUTTON_PIN, &value_check);
	
	if (!status_pin)
	{
		state = pressed ; 
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	04 c0       	rjmp	.+8      	; 0x534 <Is_pressed+0x32>
	}
	
	else
	{
		state = Notpressed ; 
		*value = value_check ;
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	f8 01       	movw	r30, r16
     530:	80 83       	st	Z, r24
		*value = value_check ;
	}
	
	else
	{
		state = Notpressed ; 
     532:	80 e0       	ldi	r24, 0x00	; 0
		*value = value_check ;
	}
	
	return state ; 
	
} 
     534:	0f 90       	pop	r0
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	08 95       	ret

00000540 <KEYPAD_init>:
		{BUTTON7, BUTTON8, BUTTON9}};
			
KEYPAD_initError KEYPAD_init(void){
	
	/*Set Column Initial Values to 1 */
	DIO_writepin (COL_1,HIGH);
     540:	61 e0       	ldi	r22, 0x01	; 1
     542:	88 e1       	ldi	r24, 0x18	; 24
     544:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	DIO_writepin (COL_2,HIGH);
     548:	61 e0       	ldi	r22, 0x01	; 1
     54a:	89 e1       	ldi	r24, 0x19	; 25
     54c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	DIO_writepin (COL_3,HIGH);
     550:	61 e0       	ldi	r22, 0x01	; 1
     552:	8a e1       	ldi	r24, 0x1A	; 26
     554:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	
	/* Enable Pull Up Resistors at Input Rows */
	DIO_writepin (ROW_1,HIGH);
     558:	61 e0       	ldi	r22, 0x01	; 1
     55a:	84 e0       	ldi	r24, 0x04	; 4
     55c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	DIO_writepin (ROW_2,HIGH);
     560:	61 e0       	ldi	r22, 0x01	; 1
     562:	85 e0       	ldi	r24, 0x05	; 5
     564:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	DIO_writepin (ROW_3,HIGH);
     568:	61 e0       	ldi	r22, 0x01	; 1
     56a:	86 e0       	ldi	r24, 0x06	; 6
     56c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	
	return KEYPAD_initSuccess;
	
}
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	08 95       	ret

00000574 <KEYPAD_getpressedkey>:


KEYPAD_readError KEYPAD_getpressedkey(u8 *value){
     574:	cf 92       	push	r12
     576:	df 92       	push	r13
     578:	ef 92       	push	r14
     57a:	ff 92       	push	r15
     57c:	0f 93       	push	r16
     57e:	1f 93       	push	r17
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	8c 01       	movw	r16, r24

	// Scan all keypad rows
	for (u8 counter_row = 0; counter_row < KEYPAD_ROWS; counter_row++)
     586:	d0 e0       	ldi	r29, 0x00	; 0
     588:	39 c0       	rjmp	.+114    	; 0x5fc <KEYPAD_getpressedkey+0x88>
	{
		 // set current column pin low to test all row pins to find out which button has been pressed
		DIO_writepin (Row_Arr[counter_row],LOW);
     58a:	cd 2e       	mov	r12, r29
     58c:	d1 2c       	mov	r13, r1
     58e:	f6 01       	movw	r30, r12
     590:	ee 59       	subi	r30, 0x9E	; 158
     592:	ff 4f       	sbci	r31, 0xFF	; 255
     594:	60 e0       	ldi	r22, 0x00	; 0
     596:	80 81       	ld	r24, Z
     598:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
		
		//scan and test all keypad columns pins
		 for (u8 counter_col = 0; counter_col < KEYPAD_COLUMNS; counter_col++)
     59c:	c0 e0       	ldi	r28, 0x00	; 0
     59e:	24 c0       	rjmp	.+72     	; 0x5e8 <KEYPAD_getpressedkey+0x74>
		 {
			 
			 // check col value if it is 0 then this column and row is connected
			 DIO_readpin (Col_Arr[counter_col],value);
     5a0:	ec 2e       	mov	r14, r28
     5a2:	f1 2c       	mov	r15, r1
     5a4:	f7 01       	movw	r30, r14
     5a6:	eb 59       	subi	r30, 0x9B	; 155
     5a8:	ff 4f       	sbci	r31, 0xFF	; 255
     5aa:	b8 01       	movw	r22, r16
     5ac:	80 81       	ld	r24, Z
     5ae:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_readpin>
			 
			 if(*value == 0){
     5b2:	f8 01       	movw	r30, r16
     5b4:	80 81       	ld	r24, Z
     5b6:	81 11       	cpse	r24, r1
     5b8:	16 c0       	rjmp	.+44     	; 0x5e6 <KEYPAD_getpressedkey+0x72>
				 
				 *value= Button_Arr[counter_row][counter_col];
     5ba:	c6 01       	movw	r24, r12
     5bc:	88 0f       	add	r24, r24
     5be:	99 1f       	adc	r25, r25
     5c0:	8c 0d       	add	r24, r12
     5c2:	9d 1d       	adc	r25, r13
     5c4:	82 51       	subi	r24, 0x12	; 18
     5c6:	9f 4f       	sbci	r25, 0xFF	; 255
     5c8:	fc 01       	movw	r30, r24
     5ca:	ee 0d       	add	r30, r14
     5cc:	ff 1d       	adc	r31, r15
     5ce:	80 81       	ld	r24, Z
     5d0:	f8 01       	movw	r30, r16
     5d2:	80 83       	st	Z, r24
				 DIO_writepin (Row_Arr[counter_row],HIGH);
     5d4:	f6 01       	movw	r30, r12
     5d6:	ee 59       	subi	r30, 0x9E	; 158
     5d8:	ff 4f       	sbci	r31, 0xFF	; 255
     5da:	61 e0       	ldi	r22, 0x01	; 1
     5dc:	80 81       	ld	r24, Z
     5de:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
				  return KEYPAD_readSuccess;
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	0e c0       	rjmp	.+28     	; 0x602 <KEYPAD_getpressedkey+0x8e>
	{
		 // set current column pin low to test all row pins to find out which button has been pressed
		DIO_writepin (Row_Arr[counter_row],LOW);
		
		//scan and test all keypad columns pins
		 for (u8 counter_col = 0; counter_col < KEYPAD_COLUMNS; counter_col++)
     5e6:	cf 5f       	subi	r28, 0xFF	; 255
     5e8:	c3 30       	cpi	r28, 0x03	; 3
     5ea:	d0 f2       	brcs	.-76     	; 0x5a0 <KEYPAD_getpressedkey+0x2c>
			 }

		}
		
		// set current row pin HIGH again
		DIO_writepin (Row_Arr[counter_row],HIGH);
     5ec:	f6 01       	movw	r30, r12
     5ee:	ee 59       	subi	r30, 0x9E	; 158
     5f0:	ff 4f       	sbci	r31, 0xFF	; 255
     5f2:	61 e0       	ldi	r22, 0x01	; 1
     5f4:	80 81       	ld	r24, Z
     5f6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>


KEYPAD_readError KEYPAD_getpressedkey(u8 *value){

	// Scan all keypad rows
	for (u8 counter_row = 0; counter_row < KEYPAD_ROWS; counter_row++)
     5fa:	df 5f       	subi	r29, 0xFF	; 255
     5fc:	d3 30       	cpi	r29, 0x03	; 3
     5fe:	28 f2       	brcs	.-118    	; 0x58a <KEYPAD_getpressedkey+0x16>
		// set current row pin HIGH again
		DIO_writepin (Row_Arr[counter_row],HIGH);

	}
	
	return KEYPAD_readFail;
     600:	81 e0       	ldi	r24, 0x01	; 1

}
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	1f 91       	pop	r17
     608:	0f 91       	pop	r16
     60a:	ff 90       	pop	r15
     60c:	ef 90       	pop	r14
     60e:	df 90       	pop	r13
     610:	cf 90       	pop	r12
     612:	08 95       	ret

00000614 <WriteIns>:
	for(u8 i=0;i<8;i++)
	{
		WriteData(pattern[i]);
	}
	WriteIns(0x80);
}
     614:	cf 93       	push	r28
     616:	c8 2f       	mov	r28, r24
     618:	60 e0       	ldi	r22, 0x00	; 0
     61a:	81 e1       	ldi	r24, 0x11	; 17
     61c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     620:	6c 2f       	mov	r22, r28
     622:	66 1f       	adc	r22, r22
     624:	66 27       	eor	r22, r22
     626:	66 1f       	adc	r22, r22
     628:	87 e1       	ldi	r24, 0x17	; 23
     62a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     62e:	c6 fb       	bst	r28, 6
     630:	66 27       	eor	r22, r22
     632:	60 f9       	bld	r22, 0
     634:	86 e1       	ldi	r24, 0x16	; 22
     636:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     63a:	c5 fb       	bst	r28, 5
     63c:	66 27       	eor	r22, r22
     63e:	60 f9       	bld	r22, 0
     640:	85 e1       	ldi	r24, 0x15	; 21
     642:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     646:	c4 fb       	bst	r28, 4
     648:	66 27       	eor	r22, r22
     64a:	60 f9       	bld	r22, 0
     64c:	84 e1       	ldi	r24, 0x14	; 20
     64e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     652:	61 e0       	ldi	r22, 0x01	; 1
     654:	83 e1       	ldi	r24, 0x13	; 19
     656:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     65a:	8f e9       	ldi	r24, 0x9F	; 159
     65c:	9f e0       	ldi	r25, 0x0F	; 15
     65e:	01 97       	sbiw	r24, 0x01	; 1
     660:	f1 f7       	brne	.-4      	; 0x65e <WriteIns+0x4a>
     662:	00 c0       	rjmp	.+0      	; 0x664 <WriteIns+0x50>
     664:	00 00       	nop
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	83 e1       	ldi	r24, 0x13	; 19
     66a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     66e:	8f e9       	ldi	r24, 0x9F	; 159
     670:	9f e0       	ldi	r25, 0x0F	; 15
     672:	01 97       	sbiw	r24, 0x01	; 1
     674:	f1 f7       	brne	.-4      	; 0x672 <WriteIns+0x5e>
     676:	00 c0       	rjmp	.+0      	; 0x678 <WriteIns+0x64>
     678:	00 00       	nop
     67a:	c3 fb       	bst	r28, 3
     67c:	66 27       	eor	r22, r22
     67e:	60 f9       	bld	r22, 0
     680:	87 e1       	ldi	r24, 0x17	; 23
     682:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     686:	c2 fb       	bst	r28, 2
     688:	66 27       	eor	r22, r22
     68a:	60 f9       	bld	r22, 0
     68c:	86 e1       	ldi	r24, 0x16	; 22
     68e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     692:	c1 fb       	bst	r28, 1
     694:	66 27       	eor	r22, r22
     696:	60 f9       	bld	r22, 0
     698:	85 e1       	ldi	r24, 0x15	; 21
     69a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     69e:	6c 2f       	mov	r22, r28
     6a0:	61 70       	andi	r22, 0x01	; 1
     6a2:	84 e1       	ldi	r24, 0x14	; 20
     6a4:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	83 e1       	ldi	r24, 0x13	; 19
     6ac:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     6b0:	8f e9       	ldi	r24, 0x9F	; 159
     6b2:	9f e0       	ldi	r25, 0x0F	; 15
     6b4:	01 97       	sbiw	r24, 0x01	; 1
     6b6:	f1 f7       	brne	.-4      	; 0x6b4 <WriteIns+0xa0>
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <WriteIns+0xa6>
     6ba:	00 00       	nop
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	83 e1       	ldi	r24, 0x13	; 19
     6c0:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     6c4:	8f e9       	ldi	r24, 0x9F	; 159
     6c6:	9f e0       	ldi	r25, 0x0F	; 15
     6c8:	01 97       	sbiw	r24, 0x01	; 1
     6ca:	f1 f7       	brne	.-4      	; 0x6c8 <WriteIns+0xb4>
     6cc:	00 c0       	rjmp	.+0      	; 0x6ce <WriteIns+0xba>
     6ce:	00 00       	nop
     6d0:	cf 91       	pop	r28
     6d2:	08 95       	ret

000006d4 <WriteData>:
     6d4:	cf 93       	push	r28
     6d6:	c8 2f       	mov	r28, r24
     6d8:	61 e0       	ldi	r22, 0x01	; 1
     6da:	81 e1       	ldi	r24, 0x11	; 17
     6dc:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     6e0:	6c 2f       	mov	r22, r28
     6e2:	66 1f       	adc	r22, r22
     6e4:	66 27       	eor	r22, r22
     6e6:	66 1f       	adc	r22, r22
     6e8:	87 e1       	ldi	r24, 0x17	; 23
     6ea:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     6ee:	c6 fb       	bst	r28, 6
     6f0:	66 27       	eor	r22, r22
     6f2:	60 f9       	bld	r22, 0
     6f4:	86 e1       	ldi	r24, 0x16	; 22
     6f6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     6fa:	c5 fb       	bst	r28, 5
     6fc:	66 27       	eor	r22, r22
     6fe:	60 f9       	bld	r22, 0
     700:	85 e1       	ldi	r24, 0x15	; 21
     702:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     706:	c4 fb       	bst	r28, 4
     708:	66 27       	eor	r22, r22
     70a:	60 f9       	bld	r22, 0
     70c:	84 e1       	ldi	r24, 0x14	; 20
     70e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	83 e1       	ldi	r24, 0x13	; 19
     716:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     71a:	8f e9       	ldi	r24, 0x9F	; 159
     71c:	9f e0       	ldi	r25, 0x0F	; 15
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	f1 f7       	brne	.-4      	; 0x71e <WriteData+0x4a>
     722:	00 c0       	rjmp	.+0      	; 0x724 <WriteData+0x50>
     724:	00 00       	nop
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	83 e1       	ldi	r24, 0x13	; 19
     72a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     72e:	8f e9       	ldi	r24, 0x9F	; 159
     730:	9f e0       	ldi	r25, 0x0F	; 15
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	f1 f7       	brne	.-4      	; 0x732 <WriteData+0x5e>
     736:	00 c0       	rjmp	.+0      	; 0x738 <WriteData+0x64>
     738:	00 00       	nop
     73a:	c3 fb       	bst	r28, 3
     73c:	66 27       	eor	r22, r22
     73e:	60 f9       	bld	r22, 0
     740:	87 e1       	ldi	r24, 0x17	; 23
     742:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     746:	c2 fb       	bst	r28, 2
     748:	66 27       	eor	r22, r22
     74a:	60 f9       	bld	r22, 0
     74c:	86 e1       	ldi	r24, 0x16	; 22
     74e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     752:	c1 fb       	bst	r28, 1
     754:	66 27       	eor	r22, r22
     756:	60 f9       	bld	r22, 0
     758:	85 e1       	ldi	r24, 0x15	; 21
     75a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     75e:	6c 2f       	mov	r22, r28
     760:	61 70       	andi	r22, 0x01	; 1
     762:	84 e1       	ldi	r24, 0x14	; 20
     764:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     768:	61 e0       	ldi	r22, 0x01	; 1
     76a:	83 e1       	ldi	r24, 0x13	; 19
     76c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     770:	8f e9       	ldi	r24, 0x9F	; 159
     772:	9f e0       	ldi	r25, 0x0F	; 15
     774:	01 97       	sbiw	r24, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <WriteData+0xa0>
     778:	00 c0       	rjmp	.+0      	; 0x77a <WriteData+0xa6>
     77a:	00 00       	nop
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	83 e1       	ldi	r24, 0x13	; 19
     780:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
     784:	8f e9       	ldi	r24, 0x9F	; 159
     786:	9f e0       	ldi	r25, 0x0F	; 15
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	f1 f7       	brne	.-4      	; 0x788 <WriteData+0xb4>
     78c:	00 c0       	rjmp	.+0      	; 0x78e <WriteData+0xba>
     78e:	00 00       	nop
     790:	cf 91       	pop	r28
     792:	08 95       	ret

00000794 <LCD_Init>:
     794:	2f ef       	ldi	r18, 0xFF	; 255
     796:	80 e7       	ldi	r24, 0x70	; 112
     798:	92 e0       	ldi	r25, 0x02	; 2
     79a:	21 50       	subi	r18, 0x01	; 1
     79c:	80 40       	sbci	r24, 0x00	; 0
     79e:	90 40       	sbci	r25, 0x00	; 0
     7a0:	e1 f7       	brne	.-8      	; 0x79a <LCD_Init+0x6>
     7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <LCD_Init+0x10>
     7a4:	00 00       	nop
     7a6:	82 e0       	ldi	r24, 0x02	; 2
     7a8:	0e 94 0a 03 	call	0x614	; 0x614 <WriteIns>
     7ac:	88 e2       	ldi	r24, 0x28	; 40
     7ae:	0e 94 0a 03 	call	0x614	; 0x614 <WriteIns>
     7b2:	8c e0       	ldi	r24, 0x0C	; 12
     7b4:	0e 94 0a 03 	call	0x614	; 0x614 <WriteIns>
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	0e 94 0a 03 	call	0x614	; 0x614 <WriteIns>
     7be:	8f e9       	ldi	r24, 0x9F	; 159
     7c0:	9f e0       	ldi	r25, 0x0F	; 15
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	f1 f7       	brne	.-4      	; 0x7c2 <LCD_Init+0x2e>
     7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <LCD_Init+0x34>
     7c8:	00 00       	nop
     7ca:	86 e0       	ldi	r24, 0x06	; 6
     7cc:	0e 94 0a 03 	call	0x614	; 0x614 <WriteIns>
     7d0:	08 95       	ret

000007d2 <LCD_WriteChar>:
     7d2:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <WriteData>
     7d6:	08 95       	ret

000007d8 <LCD_WriteString>:
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	cf 93       	push	r28
     7de:	8c 01       	movw	r16, r24
     7e0:	c0 e0       	ldi	r28, 0x00	; 0
     7e2:	03 c0       	rjmp	.+6      	; 0x7ea <LCD_WriteString+0x12>
     7e4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_WriteChar>
     7e8:	cf 5f       	subi	r28, 0xFF	; 255
     7ea:	f8 01       	movw	r30, r16
     7ec:	ec 0f       	add	r30, r28
     7ee:	f1 1d       	adc	r31, r1
     7f0:	80 81       	ld	r24, Z
     7f2:	81 11       	cpse	r24, r1
     7f4:	f7 cf       	rjmp	.-18     	; 0x7e4 <LCD_WriteString+0xc>
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	08 95       	ret

000007fe <LCD_SetCursor>:
     7fe:	81 11       	cpse	r24, r1
     800:	05 c0       	rjmp	.+10     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     802:	86 2f       	mov	r24, r22
     804:	80 68       	ori	r24, 0x80	; 128
     806:	0e 94 0a 03 	call	0x614	; 0x614 <WriteIns>
     80a:	08 95       	ret
     80c:	81 30       	cpi	r24, 0x01	; 1
     80e:	21 f4       	brne	.+8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     810:	80 ec       	ldi	r24, 0xC0	; 192
     812:	86 0f       	add	r24, r22
     814:	0e 94 0a 03 	call	0x614	; 0x614 <WriteIns>
     818:	08 95       	ret

0000081a <LCD_Clear>:
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	0e 94 0a 03 	call	0x614	; 0x614 <WriteIns>
     820:	8f e9       	ldi	r24, 0x9F	; 159
     822:	9f e0       	ldi	r25, 0x0F	; 15
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <LCD_Clear+0xa>
     828:	00 c0       	rjmp	.+0      	; 0x82a <LCD_Clear+0x10>
     82a:	00 00       	nop
     82c:	08 95       	ret

0000082e <LCD_WriteNumber>:
     82e:	cf 92       	push	r12
     830:	df 92       	push	r13
     832:	ef 92       	push	r14
     834:	ff 92       	push	r15
     836:	1f 93       	push	r17
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
     840:	2a 97       	sbiw	r28, 0x0a	; 10
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	f8 94       	cli
     846:	de bf       	out	0x3e, r29	; 62
     848:	0f be       	out	0x3f, r0	; 63
     84a:	cd bf       	out	0x3d, r28	; 61
     84c:	6b 01       	movw	r12, r22
     84e:	7c 01       	movw	r14, r24
     850:	61 15       	cp	r22, r1
     852:	71 05       	cpc	r23, r1
     854:	81 05       	cpc	r24, r1
     856:	91 05       	cpc	r25, r1
     858:	21 f4       	brne	.+8      	; 0x862 <__stack+0x3>
     85a:	80 e3       	ldi	r24, 0x30	; 48
     85c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_WriteChar>
     860:	39 c0       	rjmp	.+114    	; 0x8d4 <__stack+0x75>
     862:	99 23       	and	r25, r25
     864:	5c f4       	brge	.+22     	; 0x87c <__stack+0x1d>
     866:	f0 94       	com	r15
     868:	e0 94       	com	r14
     86a:	d0 94       	com	r13
     86c:	c0 94       	com	r12
     86e:	c1 1c       	adc	r12, r1
     870:	d1 1c       	adc	r13, r1
     872:	e1 1c       	adc	r14, r1
     874:	f1 1c       	adc	r15, r1
     876:	8d e2       	ldi	r24, 0x2D	; 45
     878:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_WriteChar>
     87c:	10 e0       	ldi	r17, 0x00	; 0
     87e:	15 c0       	rjmp	.+42     	; 0x8aa <__stack+0x4b>
     880:	c7 01       	movw	r24, r14
     882:	b6 01       	movw	r22, r12
     884:	2a e0       	ldi	r18, 0x0A	; 10
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	50 e0       	ldi	r21, 0x00	; 0
     88c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__divmodsi4>
     890:	e1 e0       	ldi	r30, 0x01	; 1
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	ec 0f       	add	r30, r28
     896:	fd 1f       	adc	r31, r29
     898:	e1 0f       	add	r30, r17
     89a:	f1 1d       	adc	r31, r1
     89c:	60 5d       	subi	r22, 0xD0	; 208
     89e:	60 83       	st	Z, r22
     8a0:	1f 5f       	subi	r17, 0xFF	; 255
     8a2:	c2 2e       	mov	r12, r18
     8a4:	d3 2e       	mov	r13, r19
     8a6:	e4 2e       	mov	r14, r20
     8a8:	f5 2e       	mov	r15, r21
     8aa:	c1 14       	cp	r12, r1
     8ac:	d1 04       	cpc	r13, r1
     8ae:	e1 04       	cpc	r14, r1
     8b0:	f1 04       	cpc	r15, r1
     8b2:	31 f7       	brne	.-52     	; 0x880 <__stack+0x21>
     8b4:	0d c0       	rjmp	.+26     	; 0x8d0 <__stack+0x71>
     8b6:	e1 2f       	mov	r30, r17
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	31 97       	sbiw	r30, 0x01	; 1
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	8c 0f       	add	r24, r28
     8c2:	9d 1f       	adc	r25, r29
     8c4:	e8 0f       	add	r30, r24
     8c6:	f9 1f       	adc	r31, r25
     8c8:	80 81       	ld	r24, Z
     8ca:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_WriteChar>
     8ce:	11 50       	subi	r17, 0x01	; 1
     8d0:	11 11       	cpse	r17, r1
     8d2:	f1 cf       	rjmp	.-30     	; 0x8b6 <__stack+0x57>
     8d4:	2a 96       	adiw	r28, 0x0a	; 10
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	de bf       	out	0x3e, r29	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	cd bf       	out	0x3d, r28	; 61
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	1f 91       	pop	r17
     8e6:	ff 90       	pop	r15
     8e8:	ef 90       	pop	r14
     8ea:	df 90       	pop	r13
     8ec:	cf 90       	pop	r12
     8ee:	08 95       	ret

000008f0 <LCD_PinsInit>:
   void LCD_PinsInit ()
   {
	   DIO_initpin(RS,OUTPUT);
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	81 e1       	ldi	r24, 0x11	; 17
     8f4:	0e 94 3d 05 	call	0xa7a	; 0xa7a <DIO_initpin>
	   DIO_initpin(EN,OUTPUT);
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	83 e1       	ldi	r24, 0x13	; 19
     8fc:	0e 94 3d 05 	call	0xa7a	; 0xa7a <DIO_initpin>
	   DIO_initpin(RW,OUTPUT);
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	82 e1       	ldi	r24, 0x12	; 18
     904:	0e 94 3d 05 	call	0xa7a	; 0xa7a <DIO_initpin>
	   DIO_initpin(D4,OUTPUT);
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	84 e1       	ldi	r24, 0x14	; 20
     90c:	0e 94 3d 05 	call	0xa7a	; 0xa7a <DIO_initpin>
	   DIO_initpin(D5,OUTPUT);
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	85 e1       	ldi	r24, 0x15	; 21
     914:	0e 94 3d 05 	call	0xa7a	; 0xa7a <DIO_initpin>
	   DIO_initpin(D6,OUTPUT);
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	86 e1       	ldi	r24, 0x16	; 22
     91c:	0e 94 3d 05 	call	0xa7a	; 0xa7a <DIO_initpin>
	   DIO_initpin(D7,OUTPUT);
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	87 e1       	ldi	r24, 0x17	; 23
     924:	0e 94 3d 05 	call	0xa7a	; 0xa7a <DIO_initpin>
     928:	08 95       	ret

0000092a <Car_Motors_init>:
/**DESCRIPTION:-
  this function initializes the DIO pins connected to the motors to be output
  **/
en_MotorError_t Car_Motors_init (void)
{
	DIO_initpin(motor1_0,OUTPUT);
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	0e 94 3d 05 	call	0xa7a	; 0xa7a <DIO_initpin>
	DIO_initpin(motor1_1,OUTPUT);
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	0e 94 3d 05 	call	0xa7a	; 0xa7a <DIO_initpin>
	DIO_initpin(motor2_0,OUTPUT);
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	0e 94 3d 05 	call	0xa7a	; 0xa7a <DIO_initpin>
	DIO_initpin(motor2_1,OUTPUT);
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	83 e0       	ldi	r24, 0x03	; 3
     946:	0e 94 3d 05 	call	0xa7a	; 0xa7a <DIO_initpin>

	return motor_ok;
}
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	08 95       	ret

0000094e <Car_Moving_FWD>:
/**DESCRIPTION:-
this function is used to drive the motor to move in the +VE direction which will lead the car to move FWD
**/
en_MotorError_t Car_Moving_FWD(void)
{
	DIO_writepin(motor1_0,LOW);          //this is used to provide voltage to the +ve pin of the motor 
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	DIO_writepin(motor1_1,HIGH);           //this is used to provide the ground to the -ve pin of 
     956:	61 e0       	ldi	r22, 0x01	; 1
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	DIO_writepin(motor2_0,LOW);
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	82 e0       	ldi	r24, 0x02	; 2
     962:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	DIO_writepin(motor2_1,HIGH);
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	83 e0       	ldi	r24, 0x03	; 3
     96a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	
	return motor_ok;

}
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	08 95       	ret

00000972 <Car_Moving_BWD>:
/**DESCRIPTION:-
this function is used to drive the motor to move in the -VE direction which will lead the car to move BWD
**/
en_MotorError_t Car_Moving_BWD(void)
{
	DIO_writepin(motor1_0,HIGH);          //this is used to provide voltage to the -ve pin of the motor
     972:	61 e0       	ldi	r22, 0x01	; 1
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	DIO_writepin(motor1_1,LOW);           //this is used to provide the ground to the +ve pin of
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	DIO_writepin(motor2_0,HIGH);
     982:	61 e0       	ldi	r22, 0x01	; 1
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	DIO_writepin(motor2_1,LOW);
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	83 e0       	ldi	r24, 0x03	; 3
     98e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	
	return motor_ok;
}
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	08 95       	ret

00000996 <Car_Stop>:
this function is used to stop the 4 wheels by stopping the 4 motors*/
en_MotorError_t Car_Stop(void)
{
	
	
  DIO_writepin(motor1_0,LOW);          
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
  DIO_writepin(motor1_1,LOW);           
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
  DIO_writepin(motor2_0,LOW);
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	82 e0       	ldi	r24, 0x02	; 2
     9aa:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
  DIO_writepin(motor2_1,LOW);
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	83 e0       	ldi	r24, 0x03	; 3
     9b2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>

	return motor_ok;
}
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	08 95       	ret

000009ba <Car_Rotate_Right>:
this function is used to drive the right wheels to move BWD, and the left wheels to move FWD,
which will lead to rotation of the car */
en_MotorError_t Car_Rotate_Right(void)
{
	//this is used to provide the ground to the -ve pin of
	DIO_writepin(motor1_0,HIGH);
     9ba:	61 e0       	ldi	r22, 0x01	; 1
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	DIO_writepin(motor1_1,LOW);
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	
	//this is used to provide voltage to the +ve pin of the motor
	DIO_writepin(motor2_0,LOW);
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	DIO_writepin(motor2_1,HIGH);
     9d2:	61 e0       	ldi	r22, 0x01	; 1
     9d4:	83 e0       	ldi	r24, 0x03	; 3
     9d6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>

	return motor_ok;
}
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	08 95       	ret

000009de <Car_Rotate_Left>:
this function is used to drive the right wheels to move FWD, and the left wheels to move BWD,
which will lead to rotation of the car */
en_MotorError_t Car_Rotate_Left(void)
{
	//this is used to provide the ground to the +ve pin of
	DIO_writepin(motor1_0,LOW);
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	DIO_writepin(motor1_1,HIGH);
     9e6:	61 e0       	ldi	r22, 0x01	; 1
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	
	//this is used to provide voltage to the -ve pin of the motor
	DIO_writepin(motor2_0,HIGH);
     9ee:	61 e0       	ldi	r22, 0x01	; 1
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	DIO_writepin(motor2_1,LOW);
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	83 e0       	ldi	r24, 0x03	; 3
     9fa:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>

	return motor_ok;
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	08 95       	ret

00000a02 <US_trigger>:
	ICU_init();
}

static void US_trigger()
{
	DIO_writepin(ICU_TRIGGER_CH ,HIGH);
     a02:	61 e0       	ldi	r22, 0x01	; 1
     a04:	8b e0       	ldi	r24, 0x0B	; 11
     a06:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a0a:	8a e1       	ldi	r24, 0x1A	; 26
     a0c:	8a 95       	dec	r24
     a0e:	f1 f7       	brne	.-4      	; 0xa0c <US_trigger+0xa>
     a10:	00 c0       	rjmp	.+0      	; 0xa12 <US_trigger+0x10>
	_delay_us(10);
	DIO_writepin(ICU_TRIGGER_CH ,LOW);
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	8b e0       	ldi	r24, 0x0B	; 11
     a16:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
	timer1_setTimerValue(0);
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <timer1_setTimerValue>
     a20:	08 95       	ret

00000a22 <US_init>:
volatile u8 flag=0;
volatile u16 t1,t2,t3;

void US_init()
{
	ICU_init();
     a22:	0e 94 60 07 	call	0xec0	; 0xec0 <ICU_init>
     a26:	08 95       	ret

00000a28 <US_getdistance>:
	timer1_setTimerValue(0);
}


u8 US_getdistance(u16 *pu16_distance)
{
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	00 d0       	rcall	.+0      	; 0xa32 <US_getdistance+0xa>
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
     a36:	8c 01       	movw	r16, r24
	u16 icu_time;
	US_trigger();
     a38:	0e 94 01 05 	call	0xa02	; 0xa02 <US_trigger>
	ICU_Read(&icu_time);
     a3c:	ce 01       	movw	r24, r28
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	0e 94 71 07 	call	0xee2	; 0xee2 <ICU_Read>
	*pu16_distance =(icu_time/58);   
     a44:	29 81       	ldd	r18, Y+1	; 0x01
     a46:	3a 81       	ldd	r19, Y+2	; 0x02
     a48:	af e9       	ldi	r26, 0x9F	; 159
     a4a:	b6 e4       	ldi	r27, 0x46	; 70
     a4c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__umulhisi3>
     a50:	92 95       	swap	r25
     a52:	82 95       	swap	r24
     a54:	8f 70       	andi	r24, 0x0F	; 15
     a56:	89 27       	eor	r24, r25
     a58:	9f 70       	andi	r25, 0x0F	; 15
     a5a:	89 27       	eor	r24, r25
     a5c:	f8 01       	movw	r30, r16
     a5e:	91 83       	std	Z+1, r25	; 0x01
     a60:	80 83       	st	Z, r24
}
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	08 95       	ret

00000a70 <main>:
#include "APP/app.h"

int main(void)
{   
	
	 app_init();
     a70:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <app_init>

    while (1) 
    {
		app_start();
     a74:	0e 94 15 02 	call	0x42a	; 0x42a <app_start>
     a78:	fd cf       	rjmp	.-6      	; 0xa74 <main+0x4>

00000a7a <DIO_initpin>:
		  DIO_initpin(i,PinsStatusArray[i]);
	  }
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
     a7a:	98 2f       	mov	r25, r24
     a7c:	96 95       	lsr	r25
     a7e:	96 95       	lsr	r25
     a80:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     a82:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error = DIO_OK;
	  
	  if (pin_num < 8)
	  {

		  switch(status)
     a84:	61 30       	cpi	r22, 0x01	; 1
     a86:	09 f4       	brne	.+2      	; 0xa8a <DIO_initpin+0x10>
     a88:	59 c0       	rjmp	.+178    	; 0xb3c <DIO_initpin+0xc2>
     a8a:	20 f0       	brcs	.+8      	; 0xa94 <DIO_initpin+0x1a>
     a8c:	62 30       	cpi	r22, 0x02	; 2
     a8e:	09 f4       	brne	.+2      	; 0xa92 <DIO_initpin+0x18>
     a90:	a9 c0       	rjmp	.+338    	; 0xbe4 <DIO_initpin+0x16a>
     a92:	fc c0       	rjmp	.+504    	; 0xc8c <DIO_initpin+0x212>
		  {
			  case OUTPUT:
			  switch(port)
     a94:	91 30       	cpi	r25, 0x01	; 1
     a96:	c9 f0       	breq	.+50     	; 0xaca <DIO_initpin+0x50>
     a98:	28 f0       	brcs	.+10     	; 0xaa4 <DIO_initpin+0x2a>
     a9a:	92 30       	cpi	r25, 0x02	; 2
     a9c:	49 f1       	breq	.+82     	; 0xaf0 <DIO_initpin+0x76>
     a9e:	93 30       	cpi	r25, 0x03	; 3
     aa0:	d1 f1       	breq	.+116    	; 0xb16 <DIO_initpin+0x9c>
     aa2:	f6 c0       	rjmp	.+492    	; 0xc90 <DIO_initpin+0x216>
			  {
				  case PA:
				  SET_BIT( DDRA,pin_num);
     aa4:	4a b3       	in	r20, 0x1a	; 26
     aa6:	21 e0       	ldi	r18, 0x01	; 1
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	b9 01       	movw	r22, r18
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <DIO_initpin+0x38>
     aae:	66 0f       	add	r22, r22
     ab0:	77 1f       	adc	r23, r23
     ab2:	8a 95       	dec	r24
     ab4:	e2 f7       	brpl	.-8      	; 0xaae <DIO_initpin+0x34>
     ab6:	cb 01       	movw	r24, r22
     ab8:	94 2f       	mov	r25, r20
     aba:	98 2b       	or	r25, r24
     abc:	9a bb       	out	0x1a, r25	; 26
				  CLR_BIT(PORTA,pin_num);
     abe:	9b b3       	in	r25, 0x1b	; 27
     ac0:	80 95       	com	r24
     ac2:	89 23       	and	r24, r25
     ac4:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     ac6:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  SET_BIT( DDRA,pin_num);
				  CLR_BIT(PORTA,pin_num);
				  break;
     ac8:	08 95       	ret
				  case PB:
				  SET_BIT( DDRB,pin_num);
     aca:	47 b3       	in	r20, 0x17	; 23
     acc:	21 e0       	ldi	r18, 0x01	; 1
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	b9 01       	movw	r22, r18
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <DIO_initpin+0x5e>
     ad4:	66 0f       	add	r22, r22
     ad6:	77 1f       	adc	r23, r23
     ad8:	8a 95       	dec	r24
     ada:	e2 f7       	brpl	.-8      	; 0xad4 <DIO_initpin+0x5a>
     adc:	cb 01       	movw	r24, r22
     ade:	94 2f       	mov	r25, r20
     ae0:	98 2b       	or	r25, r24
     ae2:	97 bb       	out	0x17, r25	; 23
				  CLR_BIT(PORTB,pin_num);
     ae4:	98 b3       	in	r25, 0x18	; 24
     ae6:	80 95       	com	r24
     ae8:	89 23       	and	r24, r25
     aea:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     aec:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  SET_BIT( DDRB,pin_num);
				  CLR_BIT(PORTB,pin_num);
				  break;
     aee:	08 95       	ret
				  case PC:
				  SET_BIT( DDRC,pin_num);
     af0:	44 b3       	in	r20, 0x14	; 20
     af2:	21 e0       	ldi	r18, 0x01	; 1
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	b9 01       	movw	r22, r18
     af8:	02 c0       	rjmp	.+4      	; 0xafe <DIO_initpin+0x84>
     afa:	66 0f       	add	r22, r22
     afc:	77 1f       	adc	r23, r23
     afe:	8a 95       	dec	r24
     b00:	e2 f7       	brpl	.-8      	; 0xafa <DIO_initpin+0x80>
     b02:	cb 01       	movw	r24, r22
     b04:	94 2f       	mov	r25, r20
     b06:	98 2b       	or	r25, r24
     b08:	94 bb       	out	0x14, r25	; 20
				  CLR_BIT(PORTC,pin_num);
     b0a:	95 b3       	in	r25, 0x15	; 21
     b0c:	80 95       	com	r24
     b0e:	89 23       	and	r24, r25
     b10:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     b12:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  SET_BIT( DDRC,pin_num);
				  CLR_BIT(PORTC,pin_num);
				  break;
     b14:	08 95       	ret
				  case PD:
				  SET_BIT( DDRD,pin_num);
     b16:	41 b3       	in	r20, 0x11	; 17
     b18:	21 e0       	ldi	r18, 0x01	; 1
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	b9 01       	movw	r22, r18
     b1e:	02 c0       	rjmp	.+4      	; 0xb24 <DIO_initpin+0xaa>
     b20:	66 0f       	add	r22, r22
     b22:	77 1f       	adc	r23, r23
     b24:	8a 95       	dec	r24
     b26:	e2 f7       	brpl	.-8      	; 0xb20 <DIO_initpin+0xa6>
     b28:	cb 01       	movw	r24, r22
     b2a:	94 2f       	mov	r25, r20
     b2c:	98 2b       	or	r25, r24
     b2e:	91 bb       	out	0x11, r25	; 17
				  CLR_BIT(PORTD,pin_num);
     b30:	92 b3       	in	r25, 0x12	; 18
     b32:	80 95       	com	r24
     b34:	89 23       	and	r24, r25
     b36:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     b38:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  SET_BIT( DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
     b3a:	08 95       	ret
				  error = WRONG_PORT_NUMBER;
				  break;
			  }
			  break;
			  case INFREE:
			  switch(port)
     b3c:	91 30       	cpi	r25, 0x01	; 1
     b3e:	c9 f0       	breq	.+50     	; 0xb72 <DIO_initpin+0xf8>
     b40:	28 f0       	brcs	.+10     	; 0xb4c <DIO_initpin+0xd2>
     b42:	92 30       	cpi	r25, 0x02	; 2
     b44:	49 f1       	breq	.+82     	; 0xb98 <DIO_initpin+0x11e>
     b46:	93 30       	cpi	r25, 0x03	; 3
     b48:	d1 f1       	breq	.+116    	; 0xbbe <DIO_initpin+0x144>
     b4a:	a4 c0       	rjmp	.+328    	; 0xc94 <DIO_initpin+0x21a>
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
     b4c:	4a b3       	in	r20, 0x1a	; 26
     b4e:	21 e0       	ldi	r18, 0x01	; 1
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	b9 01       	movw	r22, r18
     b54:	02 c0       	rjmp	.+4      	; 0xb5a <DIO_initpin+0xe0>
     b56:	66 0f       	add	r22, r22
     b58:	77 1f       	adc	r23, r23
     b5a:	8a 95       	dec	r24
     b5c:	e2 f7       	brpl	.-8      	; 0xb56 <DIO_initpin+0xdc>
     b5e:	cb 01       	movw	r24, r22
     b60:	80 95       	com	r24
     b62:	94 2f       	mov	r25, r20
     b64:	98 23       	and	r25, r24
     b66:	9a bb       	out	0x1a, r25	; 26
				  CLR_BIT(PORTA,pin_num);
     b68:	9b b3       	in	r25, 0x1b	; 27
     b6a:	89 23       	and	r24, r25
     b6c:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     b6e:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
				  CLR_BIT(PORTA,pin_num);
				  break;
     b70:	08 95       	ret
				  case PB:
				  CLR_BIT(DDRB,pin_num);
     b72:	47 b3       	in	r20, 0x17	; 23
     b74:	21 e0       	ldi	r18, 0x01	; 1
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	b9 01       	movw	r22, r18
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <DIO_initpin+0x106>
     b7c:	66 0f       	add	r22, r22
     b7e:	77 1f       	adc	r23, r23
     b80:	8a 95       	dec	r24
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <DIO_initpin+0x102>
     b84:	cb 01       	movw	r24, r22
     b86:	80 95       	com	r24
     b88:	94 2f       	mov	r25, r20
     b8a:	98 23       	and	r25, r24
     b8c:	97 bb       	out	0x17, r25	; 23
				  CLR_BIT(PORTB,pin_num);
     b8e:	98 b3       	in	r25, 0x18	; 24
     b90:	89 23       	and	r24, r25
     b92:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     b94:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  CLR_BIT(DDRB,pin_num);
				  CLR_BIT(PORTB,pin_num);
				  break;
     b96:	08 95       	ret
				  case PC:
				  CLR_BIT(DDRC,pin_num);
     b98:	44 b3       	in	r20, 0x14	; 20
     b9a:	21 e0       	ldi	r18, 0x01	; 1
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	b9 01       	movw	r22, r18
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <DIO_initpin+0x12c>
     ba2:	66 0f       	add	r22, r22
     ba4:	77 1f       	adc	r23, r23
     ba6:	8a 95       	dec	r24
     ba8:	e2 f7       	brpl	.-8      	; 0xba2 <DIO_initpin+0x128>
     baa:	cb 01       	movw	r24, r22
     bac:	80 95       	com	r24
     bae:	94 2f       	mov	r25, r20
     bb0:	98 23       	and	r25, r24
     bb2:	94 bb       	out	0x14, r25	; 20
				  CLR_BIT(PORTC,pin_num);
     bb4:	95 b3       	in	r25, 0x15	; 21
     bb6:	89 23       	and	r24, r25
     bb8:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     bba:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  CLR_BIT(DDRC,pin_num);
				  CLR_BIT(PORTC,pin_num);
				  break;
     bbc:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
     bbe:	41 b3       	in	r20, 0x11	; 17
     bc0:	21 e0       	ldi	r18, 0x01	; 1
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	b9 01       	movw	r22, r18
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <DIO_initpin+0x152>
     bc8:	66 0f       	add	r22, r22
     bca:	77 1f       	adc	r23, r23
     bcc:	8a 95       	dec	r24
     bce:	e2 f7       	brpl	.-8      	; 0xbc8 <DIO_initpin+0x14e>
     bd0:	cb 01       	movw	r24, r22
     bd2:	80 95       	com	r24
     bd4:	94 2f       	mov	r25, r20
     bd6:	98 23       	and	r25, r24
     bd8:	91 bb       	out	0x11, r25	; 17
				  CLR_BIT(PORTD,pin_num);
     bda:	92 b3       	in	r25, 0x12	; 18
     bdc:	89 23       	and	r24, r25
     bde:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     be0:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
     be2:	08 95       	ret
				  break;
			  }
			  break;

			  case INPULL:
			  switch(port)
     be4:	91 30       	cpi	r25, 0x01	; 1
     be6:	c9 f0       	breq	.+50     	; 0xc1a <DIO_initpin+0x1a0>
     be8:	28 f0       	brcs	.+10     	; 0xbf4 <DIO_initpin+0x17a>
     bea:	92 30       	cpi	r25, 0x02	; 2
     bec:	49 f1       	breq	.+82     	; 0xc40 <DIO_initpin+0x1c6>
     bee:	93 30       	cpi	r25, 0x03	; 3
     bf0:	d1 f1       	breq	.+116    	; 0xc66 <DIO_initpin+0x1ec>
     bf2:	52 c0       	rjmp	.+164    	; 0xc98 <DIO_initpin+0x21e>
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
     bf4:	4a b3       	in	r20, 0x1a	; 26
     bf6:	21 e0       	ldi	r18, 0x01	; 1
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	b9 01       	movw	r22, r18
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <DIO_initpin+0x188>
     bfe:	66 0f       	add	r22, r22
     c00:	77 1f       	adc	r23, r23
     c02:	8a 95       	dec	r24
     c04:	e2 f7       	brpl	.-8      	; 0xbfe <DIO_initpin+0x184>
     c06:	cb 01       	movw	r24, r22
     c08:	96 2f       	mov	r25, r22
     c0a:	90 95       	com	r25
     c0c:	94 23       	and	r25, r20
     c0e:	9a bb       	out	0x1a, r25	; 26
				  SET_BIT(PORTA,pin_num);
     c10:	9b b3       	in	r25, 0x1b	; 27
     c12:	89 2b       	or	r24, r25
     c14:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     c16:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
				  SET_BIT(PORTA,pin_num);
				  break;
     c18:	08 95       	ret
				  case PB:
				  CLR_BIT(DDRB,pin_num);
     c1a:	47 b3       	in	r20, 0x17	; 23
     c1c:	21 e0       	ldi	r18, 0x01	; 1
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	b9 01       	movw	r22, r18
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <DIO_initpin+0x1ae>
     c24:	66 0f       	add	r22, r22
     c26:	77 1f       	adc	r23, r23
     c28:	8a 95       	dec	r24
     c2a:	e2 f7       	brpl	.-8      	; 0xc24 <DIO_initpin+0x1aa>
     c2c:	cb 01       	movw	r24, r22
     c2e:	96 2f       	mov	r25, r22
     c30:	90 95       	com	r25
     c32:	94 23       	and	r25, r20
     c34:	97 bb       	out	0x17, r25	; 23
				  SET_BIT(PORTB,pin_num);
     c36:	98 b3       	in	r25, 0x18	; 24
     c38:	89 2b       	or	r24, r25
     c3a:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     c3c:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  CLR_BIT(DDRB,pin_num);
				  SET_BIT(PORTB,pin_num);
				  break;
     c3e:	08 95       	ret
				  case PC:
				  CLR_BIT(DDRC,pin_num);
     c40:	44 b3       	in	r20, 0x14	; 20
     c42:	21 e0       	ldi	r18, 0x01	; 1
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	b9 01       	movw	r22, r18
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <DIO_initpin+0x1d4>
     c4a:	66 0f       	add	r22, r22
     c4c:	77 1f       	adc	r23, r23
     c4e:	8a 95       	dec	r24
     c50:	e2 f7       	brpl	.-8      	; 0xc4a <DIO_initpin+0x1d0>
     c52:	cb 01       	movw	r24, r22
     c54:	96 2f       	mov	r25, r22
     c56:	90 95       	com	r25
     c58:	94 23       	and	r25, r20
     c5a:	94 bb       	out	0x14, r25	; 20
				  SET_BIT(PORTC,pin_num);
     c5c:	95 b3       	in	r25, 0x15	; 21
     c5e:	89 2b       	or	r24, r25
     c60:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     c62:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  CLR_BIT(DDRC,pin_num);
				  SET_BIT(PORTC,pin_num);
				  break;
     c64:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
     c66:	41 b3       	in	r20, 0x11	; 17
     c68:	21 e0       	ldi	r18, 0x01	; 1
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	b9 01       	movw	r22, r18
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <DIO_initpin+0x1fa>
     c70:	66 0f       	add	r22, r22
     c72:	77 1f       	adc	r23, r23
     c74:	8a 95       	dec	r24
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <DIO_initpin+0x1f6>
     c78:	cb 01       	movw	r24, r22
     c7a:	96 2f       	mov	r25, r22
     c7c:	90 95       	com	r25
     c7e:	94 23       	and	r25, r20
     c80:	91 bb       	out	0x11, r25	; 17
				  SET_BIT(PORTD,pin_num);
     c82:	92 b3       	in	r25, 0x12	; 18
     c84:	89 2b       	or	r24, r25
     c86:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     c88:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  SET_BIT(PORTD,pin_num);
				  break;
     c8a:	08 95       	ret
				  error = WRONG_PORT_NUMBER;
				  break;
			  }
			  break;
			  default:
			  error = WRONG_PORT_NUMBER;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	08 95       	ret
				  case PD:
				  SET_BIT( DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  SET_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     c98:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
     c9a:	08 95       	ret

00000c9c <DIO_Init_All>:
	    return error;
    }
//////////////////////////////////////////////////////////////////////*/
//pin MODE
  void DIO_Init_All(void)
  {
     c9c:	cf 93       	push	r28
	  DIO_Pin_type i;
	  for (i=PINA0; i<TOTAL_PINS; i++)
     c9e:	c0 e0       	ldi	r28, 0x00	; 0
     ca0:	09 c0       	rjmp	.+18     	; 0xcb4 <DIO_Init_All+0x18>
	  {
		  DIO_initpin(i,PinsStatusArray[i]);
     ca2:	ec 2f       	mov	r30, r28
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	e9 50       	subi	r30, 0x09	; 9
     ca8:	ff 4f       	sbci	r31, 0xFF	; 255
     caa:	60 81       	ld	r22, Z
     cac:	8c 2f       	mov	r24, r28
     cae:	0e 94 3d 05 	call	0xa7a	; 0xa7a <DIO_initpin>
//////////////////////////////////////////////////////////////////////*/
//pin MODE
  void DIO_Init_All(void)
  {
	  DIO_Pin_type i;
	  for (i=PINA0; i<TOTAL_PINS; i++)
     cb2:	cf 5f       	subi	r28, 0xFF	; 255
     cb4:	c0 32       	cpi	r28, 0x20	; 32
     cb6:	a8 f3       	brcs	.-22     	; 0xca2 <DIO_Init_All+0x6>
	  {
		  DIO_initpin(i,PinsStatusArray[i]);
	  }
  }
     cb8:	cf 91       	pop	r28
     cba:	08 95       	ret

00000cbc <DIO_writepin>:
	  return error;

  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
     cbc:	98 2f       	mov	r25, r24
     cbe:	96 95       	lsr	r25
     cc0:	96 95       	lsr	r25
     cc2:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     cc4:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error= DIO_OK;
	  if (pin_num<8)
	  {
		  switch (volt)
     cc6:	66 23       	and	r22, r22
     cc8:	09 f4       	brne	.+2      	; 0xccc <DIO_writepin+0x10>
     cca:	43 c0       	rjmp	.+134    	; 0xd52 <DIO_writepin+0x96>
     ccc:	61 30       	cpi	r22, 0x01	; 1
     cce:	09 f0       	breq	.+2      	; 0xcd2 <DIO_writepin+0x16>
     cd0:	84 c0       	rjmp	.+264    	; 0xdda <DIO_writepin+0x11e>
		  {
			  case HIGH:

			  switch(port)
     cd2:	91 30       	cpi	r25, 0x01	; 1
     cd4:	a1 f0       	breq	.+40     	; 0xcfe <DIO_writepin+0x42>
     cd6:	28 f0       	brcs	.+10     	; 0xce2 <DIO_writepin+0x26>
     cd8:	92 30       	cpi	r25, 0x02	; 2
     cda:	f9 f0       	breq	.+62     	; 0xd1a <DIO_writepin+0x5e>
     cdc:	93 30       	cpi	r25, 0x03	; 3
     cde:	59 f1       	breq	.+86     	; 0xd36 <DIO_writepin+0x7a>
     ce0:	7e c0       	rjmp	.+252    	; 0xdde <DIO_writepin+0x122>
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
     ce2:	4b b3       	in	r20, 0x1b	; 27
     ce4:	21 e0       	ldi	r18, 0x01	; 1
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	b9 01       	movw	r22, r18
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <DIO_writepin+0x34>
     cec:	66 0f       	add	r22, r22
     cee:	77 1f       	adc	r23, r23
     cf0:	8a 95       	dec	r24
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <DIO_writepin+0x30>
     cf4:	cb 01       	movw	r24, r22
     cf6:	84 2b       	or	r24, r20
     cf8:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     cfa:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
				  break;
     cfc:	08 95       	ret
				  case PB:

				  SET_BIT(PORTB,pin_num);
     cfe:	48 b3       	in	r20, 0x18	; 24
     d00:	21 e0       	ldi	r18, 0x01	; 1
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	b9 01       	movw	r22, r18
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <DIO_writepin+0x50>
     d08:	66 0f       	add	r22, r22
     d0a:	77 1f       	adc	r23, r23
     d0c:	8a 95       	dec	r24
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <DIO_writepin+0x4c>
     d10:	cb 01       	movw	r24, r22
     d12:	84 2b       	or	r24, r20
     d14:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     d16:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  SET_BIT(PORTB,pin_num);
				  break;
     d18:	08 95       	ret
				  case PC:

				  SET_BIT(PORTC,pin_num);
     d1a:	45 b3       	in	r20, 0x15	; 21
     d1c:	21 e0       	ldi	r18, 0x01	; 1
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	b9 01       	movw	r22, r18
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <DIO_writepin+0x6c>
     d24:	66 0f       	add	r22, r22
     d26:	77 1f       	adc	r23, r23
     d28:	8a 95       	dec	r24
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <DIO_writepin+0x68>
     d2c:	cb 01       	movw	r24, r22
     d2e:	84 2b       	or	r24, r20
     d30:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     d32:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  SET_BIT(PORTC,pin_num);
				  break;
     d34:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
     d36:	42 b3       	in	r20, 0x12	; 18
     d38:	21 e0       	ldi	r18, 0x01	; 1
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	b9 01       	movw	r22, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <DIO_writepin+0x88>
     d40:	66 0f       	add	r22, r22
     d42:	77 1f       	adc	r23, r23
     d44:	8a 95       	dec	r24
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <DIO_writepin+0x84>
     d48:	cb 01       	movw	r24, r22
     d4a:	84 2b       	or	r24, r20
     d4c:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     d4e:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
     d50:	08 95       	ret
			  }
			  break;

			  case LOW:

			  switch(port)
     d52:	91 30       	cpi	r25, 0x01	; 1
     d54:	a9 f0       	breq	.+42     	; 0xd80 <DIO_writepin+0xc4>
     d56:	28 f0       	brcs	.+10     	; 0xd62 <DIO_writepin+0xa6>
     d58:	92 30       	cpi	r25, 0x02	; 2
     d5a:	09 f1       	breq	.+66     	; 0xd9e <DIO_writepin+0xe2>
     d5c:	93 30       	cpi	r25, 0x03	; 3
     d5e:	71 f1       	breq	.+92     	; 0xdbc <DIO_writepin+0x100>
     d60:	40 c0       	rjmp	.+128    	; 0xde2 <DIO_writepin+0x126>
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
     d62:	4b b3       	in	r20, 0x1b	; 27
     d64:	21 e0       	ldi	r18, 0x01	; 1
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	b9 01       	movw	r22, r18
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <DIO_writepin+0xb4>
     d6c:	66 0f       	add	r22, r22
     d6e:	77 1f       	adc	r23, r23
     d70:	8a 95       	dec	r24
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <DIO_writepin+0xb0>
     d74:	cb 01       	movw	r24, r22
     d76:	80 95       	com	r24
     d78:	84 23       	and	r24, r20
     d7a:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     d7c:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
				  break;
     d7e:	08 95       	ret
				  case PB:

				  CLR_BIT(PORTB,pin_num);
     d80:	48 b3       	in	r20, 0x18	; 24
     d82:	21 e0       	ldi	r18, 0x01	; 1
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	b9 01       	movw	r22, r18
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <DIO_writepin+0xd2>
     d8a:	66 0f       	add	r22, r22
     d8c:	77 1f       	adc	r23, r23
     d8e:	8a 95       	dec	r24
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <DIO_writepin+0xce>
     d92:	cb 01       	movw	r24, r22
     d94:	80 95       	com	r24
     d96:	84 23       	and	r24, r20
     d98:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     d9a:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  CLR_BIT(PORTB,pin_num);
				  break;
     d9c:	08 95       	ret
				  case PC:

				  CLR_BIT(PORTC,pin_num);
     d9e:	45 b3       	in	r20, 0x15	; 21
     da0:	21 e0       	ldi	r18, 0x01	; 1
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	b9 01       	movw	r22, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <DIO_writepin+0xf0>
     da8:	66 0f       	add	r22, r22
     daa:	77 1f       	adc	r23, r23
     dac:	8a 95       	dec	r24
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <DIO_writepin+0xec>
     db0:	cb 01       	movw	r24, r22
     db2:	80 95       	com	r24
     db4:	84 23       	and	r24, r20
     db6:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     db8:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  CLR_BIT(PORTC,pin_num);
				  break;
     dba:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
     dbc:	42 b3       	in	r20, 0x12	; 18
     dbe:	21 e0       	ldi	r18, 0x01	; 1
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	b9 01       	movw	r22, r18
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <DIO_writepin+0x10e>
     dc6:	66 0f       	add	r22, r22
     dc8:	77 1f       	adc	r23, r23
     dca:	8a 95       	dec	r24
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <DIO_writepin+0x10a>
     dce:	cb 01       	movw	r24, r22
     dd0:	80 95       	com	r24
     dd2:	84 23       	and	r24, r20
     dd4:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     dd6:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
     dd8:	08 95       	ret
			  }

			  break;

			  default:
			  error = WRONG_VALUE;
     dda:	83 e0       	ldi	r24, 0x03	; 3
     ddc:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     de2:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
     de4:	08 95       	ret

00000de6 <DIO_readpin>:
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
     de6:	98 2f       	mov	r25, r24
     de8:	96 95       	lsr	r25
     dea:	96 95       	lsr	r25
     dec:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     dee:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error = DIO_OK;
	  if (pin_num < 8)
	  {

		  switch(port)
     df0:	91 30       	cpi	r25, 0x01	; 1
     df2:	a1 f0       	breq	.+40     	; 0xe1c <DIO_readpin+0x36>
     df4:	28 f0       	brcs	.+10     	; 0xe00 <DIO_readpin+0x1a>
     df6:	92 30       	cpi	r25, 0x02	; 2
     df8:	f9 f0       	breq	.+62     	; 0xe38 <DIO_readpin+0x52>
     dfa:	93 30       	cpi	r25, 0x03	; 3
     dfc:	59 f1       	breq	.+86     	; 0xe54 <DIO_readpin+0x6e>
     dfe:	38 c0       	rjmp	.+112    	; 0xe70 <DIO_readpin+0x8a>
		  {
			  case PA:

			  *volt=READ_BIT(PINA,pin_num);
     e00:	29 b3       	in	r18, 0x19	; 25
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	a9 01       	movw	r20, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_readpin+0x26>
     e08:	55 95       	asr	r21
     e0a:	47 95       	ror	r20
     e0c:	8a 95       	dec	r24
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_readpin+0x22>
     e10:	ca 01       	movw	r24, r20
     e12:	81 70       	andi	r24, 0x01	; 1
     e14:	fb 01       	movw	r30, r22
     e16:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     e18:	80 e0       	ldi	r24, 0x00	; 0
		  switch(port)
		  {
			  case PA:

			  *volt=READ_BIT(PINA,pin_num);
			  break;
     e1a:	08 95       	ret
			  case PB:

			  *volt=READ_BIT(PINB,pin_num);
     e1c:	26 b3       	in	r18, 0x16	; 22
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	a9 01       	movw	r20, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_readpin+0x42>
     e24:	55 95       	asr	r21
     e26:	47 95       	ror	r20
     e28:	8a 95       	dec	r24
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <DIO_readpin+0x3e>
     e2c:	ca 01       	movw	r24, r20
     e2e:	81 70       	andi	r24, 0x01	; 1
     e30:	fb 01       	movw	r30, r22
     e32:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     e34:	80 e0       	ldi	r24, 0x00	; 0
			  *volt=READ_BIT(PINA,pin_num);
			  break;
			  case PB:

			  *volt=READ_BIT(PINB,pin_num);
			  break;
     e36:	08 95       	ret
			  case PC:

			  *volt=READ_BIT(PINC,pin_num);
     e38:	23 b3       	in	r18, 0x13	; 19
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	a9 01       	movw	r20, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_readpin+0x5e>
     e40:	55 95       	asr	r21
     e42:	47 95       	ror	r20
     e44:	8a 95       	dec	r24
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_readpin+0x5a>
     e48:	ca 01       	movw	r24, r20
     e4a:	81 70       	andi	r24, 0x01	; 1
     e4c:	fb 01       	movw	r30, r22
     e4e:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     e50:	80 e0       	ldi	r24, 0x00	; 0
			  *volt=READ_BIT(PINB,pin_num);
			  break;
			  case PC:

			  *volt=READ_BIT(PINC,pin_num);
			  break;
     e52:	08 95       	ret
			  case PD:

			  *volt=READ_BIT(PIND,pin_num);
     e54:	20 b3       	in	r18, 0x10	; 16
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	a9 01       	movw	r20, r18
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <DIO_readpin+0x7a>
     e5c:	55 95       	asr	r21
     e5e:	47 95       	ror	r20
     e60:	8a 95       	dec	r24
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <DIO_readpin+0x76>
     e64:	ca 01       	movw	r24, r20
     e66:	81 70       	andi	r24, 0x01	; 1
     e68:	fb 01       	movw	r30, r22
     e6a:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     e6c:	80 e0       	ldi	r24, 0x00	; 0
			  *volt=READ_BIT(PINC,pin_num);
			  break;
			  case PD:

			  *volt=READ_BIT(PIND,pin_num);
			  break;
     e6e:	08 95       	ret
			  default:
			  error = WRONG_PORT_NUMBER;
     e70:	81 e0       	ldi	r24, 0x01	; 1
	  else
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;
  }
     e72:	08 95       	ret

00000e74 <ICU_Read_callbackfun>:

static volatile u16 t1,t2,ICU_flag=0;

static void ICU_Read_callbackfun(void)
{
	if (ICU_flag==0)
     e74:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
     e78:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
     e7c:	89 2b       	or	r24, r25
     e7e:	79 f4       	brne	.+30     	; 0xe9e <ICU_Read_callbackfun+0x2a>
	{
		timer1_ReadCounts(&t1);
     e80:	8c e1       	ldi	r24, 0x1C	; 28
     e82:	91 e0       	ldi	r25, 0x01	; 1
     e84:	0e 94 aa 0a 	call	0x1554	; 0x1554 <timer1_ReadCounts>
		EXI_TriggerEdge(ICU_EXI_INT,FALLING_EDGE);
     e88:	62 e0       	ldi	r22, 0x02	; 2
     e8a:	82 e0       	ldi	r24, 0x02	; 2
     e8c:	0e 94 be 07 	call	0xf7c	; 0xf7c <EXI_TriggerEdge>
		ICU_flag=1;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
     e98:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
     e9c:	08 95       	ret
	}
	else if (ICU_flag==1)
     e9e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
     ea2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	51 f4       	brne	.+20     	; 0xebe <ICU_Read_callbackfun+0x4a>
	{
		timer1_ReadCounts(&t2);
     eaa:	8a e1       	ldi	r24, 0x1A	; 26
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	0e 94 aa 0a 	call	0x1554	; 0x1554 <timer1_ReadCounts>
		ICU_flag=2;
     eb2:	82 e0       	ldi	r24, 0x02	; 2
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
     eba:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
     ebe:	08 95       	ret

00000ec0 <ICU_init>:
	}
}
void ICU_init ()
{
	Timer1_Init(TIMER1_NORMAL_MODE,TIMER1_SCALER_8);
     ec0:	62 e0       	ldi	r22, 0x02	; 2
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	0e 94 db 09 	call	0x13b6	; 0x13b6 <Timer1_Init>
	// DIO_initpin(ICU_CH,INFREE);                              // in init all pins
	EXI_Enable(ICU_EXI_INT);
     ec8:	82 e0       	ldi	r24, 0x02	; 2
     eca:	0e 94 ac 07 	call	0xf58	; 0xf58 <EXI_Enable>
	EXI_TriggerEdge(ICU_EXI_INT,RISING_EDGE);
     ece:	63 e0       	ldi	r22, 0x03	; 3
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	0e 94 be 07 	call	0xf7c	; 0xf7c <EXI_TriggerEdge>
	EXI_SetCallBack(ICU_EXI_INT, ICU_Read_callbackfun );
     ed6:	6a e3       	ldi	r22, 0x3A	; 58
     ed8:	77 e0       	ldi	r23, 0x07	; 7
     eda:	82 e0       	ldi	r24, 0x02	; 2
     edc:	0e 94 1e 08 	call	0x103c	; 0x103c <EXI_SetCallBack>
     ee0:	08 95       	ret

00000ee2 <ICU_Read>:

}

u8 ICU_Read(u16 *pu16_PeriodTime)
{
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	8c 01       	movw	r16, r24

	u16 timeout ;
	EXI_TriggerEdge(ICU_EXI_INT,RISING_EDGE);
     eec:	63 e0       	ldi	r22, 0x03	; 3
     eee:	82 e0       	ldi	r24, 0x02	; 2
     ef0:	0e 94 be 07 	call	0xf7c	; 0xf7c <EXI_TriggerEdge>
	timer1_setTimerValue(0);
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	0e 94 b0 0a 	call	0x1560	; 0x1560 <timer1_setTimerValue>
	ICU_flag=0;
     efa:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x1>
     efe:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
		while((ICU_flag<2)&&(timeout<23000))
     f02:	05 c0       	rjmp	.+10     	; 0xf0e <ICU_Read+0x2c>
		{
			timeout++;
     f04:	21 96       	adiw	r28, 0x01	; 1
     f06:	82 e0       	ldi	r24, 0x02	; 2
     f08:	8a 95       	dec	r24
     f0a:	f1 f7       	brne	.-4      	; 0xf08 <ICU_Read+0x26>
     f0c:	00 c0       	rjmp	.+0      	; 0xf0e <ICU_Read+0x2c>

	u16 timeout ;
	EXI_TriggerEdge(ICU_EXI_INT,RISING_EDGE);
	timer1_setTimerValue(0);
	ICU_flag=0;
		while((ICU_flag<2)&&(timeout<23000))
     f0e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
     f12:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
     f16:	02 97       	sbiw	r24, 0x02	; 2
     f18:	20 f4       	brcc	.+8      	; 0xf22 <ICU_Read+0x40>
     f1a:	c8 3d       	cpi	r28, 0xD8	; 216
     f1c:	e9 e5       	ldi	r30, 0x59	; 89
     f1e:	de 07       	cpc	r29, r30
     f20:	88 f3       	brcs	.-30     	; 0xf04 <ICU_Read+0x22>
		{
			timeout++;
			_delay_us(1);
		}
		
		if(ICU_flag==2)
     f22:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
     f26:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
     f2a:	02 97       	sbiw	r24, 0x02	; 2
     f2c:	79 f4       	brne	.+30     	; 0xf4c <ICU_Read+0x6a>
		{
			*pu16_PeriodTime =(t2-t1);
     f2e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <t2>
     f32:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <t2+0x1>
     f36:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <t1>
     f3a:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <t1+0x1>
     f3e:	82 1b       	sub	r24, r18
     f40:	93 0b       	sbc	r25, r19
     f42:	f8 01       	movw	r30, r16
     f44:	91 83       	std	Z+1, r25	; 0x01
     f46:	80 83       	st	Z, r24
			
			return 1 ;    //done
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	01 c0       	rjmp	.+2      	; 0xf4e <ICU_Read+0x6c>
		}
	
	return  0; //timeout
     f4c:	80 e0       	ldi	r24, 0x00	; 0
}
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	08 95       	ret

00000f58 <EXI_Enable>:

void EXI_Init(void)
{
	EXI_TriggerEdge(EX_INT0,FALLING_EDGE);
	EXI_TriggerEdge(EX_INT1,FALLING_EDGE);
	EXI_TriggerEdge(EX_INT2,FALLING_EDGE);
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	41 f0       	breq	.+16     	; 0xf6c <EXI_Enable+0x14>
     f5c:	18 f0       	brcs	.+6      	; 0xf64 <EXI_Enable+0xc>
     f5e:	82 30       	cpi	r24, 0x02	; 2
     f60:	49 f0       	breq	.+18     	; 0xf74 <EXI_Enable+0x1c>
     f62:	08 95       	ret
     f64:	8b b7       	in	r24, 0x3b	; 59
     f66:	80 64       	ori	r24, 0x40	; 64
     f68:	8b bf       	out	0x3b, r24	; 59
     f6a:	08 95       	ret
     f6c:	8b b7       	in	r24, 0x3b	; 59
     f6e:	80 68       	ori	r24, 0x80	; 128
     f70:	8b bf       	out	0x3b, r24	; 59
     f72:	08 95       	ret
     f74:	8b b7       	in	r24, 0x3b	; 59
     f76:	80 62       	ori	r24, 0x20	; 32
     f78:	8b bf       	out	0x3b, r24	; 59
     f7a:	08 95       	ret

00000f7c <EXI_TriggerEdge>:
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	49 f1       	breq	.+82     	; 0xfd2 <EXI_TriggerEdge+0x56>
     f80:	20 f0       	brcs	.+8      	; 0xf8a <EXI_TriggerEdge+0xe>
     f82:	82 30       	cpi	r24, 0x02	; 2
     f84:	09 f4       	brne	.+2      	; 0xf88 <EXI_TriggerEdge+0xc>
     f86:	49 c0       	rjmp	.+146    	; 0x101a <EXI_TriggerEdge+0x9e>
     f88:	08 95       	ret
     f8a:	61 30       	cpi	r22, 0x01	; 1
     f8c:	69 f0       	breq	.+26     	; 0xfa8 <EXI_TriggerEdge+0x2c>
     f8e:	28 f0       	brcs	.+10     	; 0xf9a <EXI_TriggerEdge+0x1e>
     f90:	62 30       	cpi	r22, 0x02	; 2
     f92:	89 f0       	breq	.+34     	; 0xfb6 <EXI_TriggerEdge+0x3a>
     f94:	63 30       	cpi	r22, 0x03	; 3
     f96:	b1 f0       	breq	.+44     	; 0xfc4 <EXI_TriggerEdge+0x48>
     f98:	08 95       	ret
     f9a:	85 b7       	in	r24, 0x35	; 53
     f9c:	8e 7f       	andi	r24, 0xFE	; 254
     f9e:	85 bf       	out	0x35, r24	; 53
     fa0:	85 b7       	in	r24, 0x35	; 53
     fa2:	8d 7f       	andi	r24, 0xFD	; 253
     fa4:	85 bf       	out	0x35, r24	; 53
     fa6:	08 95       	ret
     fa8:	85 b7       	in	r24, 0x35	; 53
     faa:	81 60       	ori	r24, 0x01	; 1
     fac:	85 bf       	out	0x35, r24	; 53
     fae:	85 b7       	in	r24, 0x35	; 53
     fb0:	8d 7f       	andi	r24, 0xFD	; 253
     fb2:	85 bf       	out	0x35, r24	; 53
     fb4:	08 95       	ret
     fb6:	85 b7       	in	r24, 0x35	; 53
     fb8:	8e 7f       	andi	r24, 0xFE	; 254
     fba:	85 bf       	out	0x35, r24	; 53
     fbc:	85 b7       	in	r24, 0x35	; 53
     fbe:	82 60       	ori	r24, 0x02	; 2
     fc0:	85 bf       	out	0x35, r24	; 53
     fc2:	08 95       	ret
     fc4:	85 b7       	in	r24, 0x35	; 53
     fc6:	81 60       	ori	r24, 0x01	; 1
     fc8:	85 bf       	out	0x35, r24	; 53
     fca:	85 b7       	in	r24, 0x35	; 53
     fcc:	82 60       	ori	r24, 0x02	; 2
     fce:	85 bf       	out	0x35, r24	; 53
     fd0:	08 95       	ret
     fd2:	61 30       	cpi	r22, 0x01	; 1
     fd4:	69 f0       	breq	.+26     	; 0xff0 <EXI_TriggerEdge+0x74>
     fd6:	28 f0       	brcs	.+10     	; 0xfe2 <EXI_TriggerEdge+0x66>
     fd8:	62 30       	cpi	r22, 0x02	; 2
     fda:	89 f0       	breq	.+34     	; 0xffe <EXI_TriggerEdge+0x82>
     fdc:	63 30       	cpi	r22, 0x03	; 3
     fde:	b1 f0       	breq	.+44     	; 0x100c <EXI_TriggerEdge+0x90>
     fe0:	08 95       	ret
     fe2:	85 b7       	in	r24, 0x35	; 53
     fe4:	8b 7f       	andi	r24, 0xFB	; 251
     fe6:	85 bf       	out	0x35, r24	; 53
     fe8:	85 b7       	in	r24, 0x35	; 53
     fea:	87 7f       	andi	r24, 0xF7	; 247
     fec:	85 bf       	out	0x35, r24	; 53
     fee:	08 95       	ret
     ff0:	85 b7       	in	r24, 0x35	; 53
     ff2:	84 60       	ori	r24, 0x04	; 4
     ff4:	85 bf       	out	0x35, r24	; 53
     ff6:	85 b7       	in	r24, 0x35	; 53
     ff8:	87 7f       	andi	r24, 0xF7	; 247
     ffa:	85 bf       	out	0x35, r24	; 53
     ffc:	08 95       	ret
     ffe:	85 b7       	in	r24, 0x35	; 53
    1000:	8b 7f       	andi	r24, 0xFB	; 251
    1002:	85 bf       	out	0x35, r24	; 53
    1004:	85 b7       	in	r24, 0x35	; 53
    1006:	88 60       	ori	r24, 0x08	; 8
    1008:	85 bf       	out	0x35, r24	; 53
    100a:	08 95       	ret
    100c:	85 b7       	in	r24, 0x35	; 53
    100e:	84 60       	ori	r24, 0x04	; 4
    1010:	85 bf       	out	0x35, r24	; 53
    1012:	85 b7       	in	r24, 0x35	; 53
    1014:	88 60       	ori	r24, 0x08	; 8
    1016:	85 bf       	out	0x35, r24	; 53
    1018:	08 95       	ret
    101a:	62 30       	cpi	r22, 0x02	; 2
    101c:	19 f0       	breq	.+6      	; 0x1024 <EXI_TriggerEdge+0xa8>
    101e:	63 30       	cpi	r22, 0x03	; 3
    1020:	29 f0       	breq	.+10     	; 0x102c <EXI_TriggerEdge+0xb0>
    1022:	08 c0       	rjmp	.+16     	; 0x1034 <EXI_TriggerEdge+0xb8>
    1024:	84 b7       	in	r24, 0x34	; 52
    1026:	8f 7b       	andi	r24, 0xBF	; 191
    1028:	84 bf       	out	0x34, r24	; 52
    102a:	08 95       	ret
    102c:	84 b7       	in	r24, 0x34	; 52
    102e:	80 64       	ori	r24, 0x40	; 64
    1030:	84 bf       	out	0x34, r24	; 52
    1032:	08 95       	ret
    1034:	84 b7       	in	r24, 0x34	; 52
    1036:	8f 7b       	andi	r24, 0xBF	; 191
    1038:	84 bf       	out	0x34, r24	; 52
    103a:	08 95       	ret

0000103c <EXI_SetCallBack>:
/************************************Call back functions*********************************************/
void EXI_SetCallBack(ExInterruptSource_type Interrupt,void(*LocalPtr)(void))
{
	
	
	switch(Interrupt){
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	49 f0       	breq	.+18     	; 0x1052 <EXI_SetCallBack+0x16>
    1040:	18 f0       	brcs	.+6      	; 0x1048 <EXI_SetCallBack+0xc>
    1042:	82 30       	cpi	r24, 0x02	; 2
    1044:	59 f0       	breq	.+22     	; 0x105c <EXI_SetCallBack+0x20>
    1046:	08 95       	ret
		case EX_INT0:
		INT0_Fptr=LocalPtr;
    1048:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <INT0_Fptr+0x1>
    104c:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <INT0_Fptr>
		break;
    1050:	08 95       	ret
		case EX_INT1:
		INT1_Fptr=LocalPtr;
    1052:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <INT1_Fptr+0x1>
    1056:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <INT1_Fptr>
		break;
    105a:	08 95       	ret
		case EX_INT2:
		INT2_Fptr=LocalPtr;
    105c:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <INT2_Fptr+0x1>
    1060:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <INT2_Fptr>
    1064:	08 95       	ret

00001066 <__vector_1>:




ISR(INT0_vect)
{  
    1066:	1f 92       	push	r1
    1068:	0f 92       	push	r0
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	0f 92       	push	r0
    106e:	11 24       	eor	r1, r1
    1070:	2f 93       	push	r18
    1072:	3f 93       	push	r19
    1074:	4f 93       	push	r20
    1076:	5f 93       	push	r21
    1078:	6f 93       	push	r22
    107a:	7f 93       	push	r23
    107c:	8f 93       	push	r24
    107e:	9f 93       	push	r25
    1080:	af 93       	push	r26
    1082:	bf 93       	push	r27
    1084:	ef 93       	push	r30
    1086:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
    1088:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <INT0_Fptr>
    108c:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <INT0_Fptr+0x1>
    1090:	30 97       	sbiw	r30, 0x00	; 0
    1092:	09 f0       	breq	.+2      	; 0x1096 <__vector_1+0x30>
	{
		INT0_Fptr();
    1094:	09 95       	icall
	}
}
    1096:	ff 91       	pop	r31
    1098:	ef 91       	pop	r30
    109a:	bf 91       	pop	r27
    109c:	af 91       	pop	r26
    109e:	9f 91       	pop	r25
    10a0:	8f 91       	pop	r24
    10a2:	7f 91       	pop	r23
    10a4:	6f 91       	pop	r22
    10a6:	5f 91       	pop	r21
    10a8:	4f 91       	pop	r20
    10aa:	3f 91       	pop	r19
    10ac:	2f 91       	pop	r18
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	0f 90       	pop	r0
    10b4:	1f 90       	pop	r1
    10b6:	18 95       	reti

000010b8 <__vector_2>:
ISR(INT1_vect)
{
    10b8:	1f 92       	push	r1
    10ba:	0f 92       	push	r0
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	0f 92       	push	r0
    10c0:	11 24       	eor	r1, r1
    10c2:	2f 93       	push	r18
    10c4:	3f 93       	push	r19
    10c6:	4f 93       	push	r20
    10c8:	5f 93       	push	r21
    10ca:	6f 93       	push	r22
    10cc:	7f 93       	push	r23
    10ce:	8f 93       	push	r24
    10d0:	9f 93       	push	r25
    10d2:	af 93       	push	r26
    10d4:	bf 93       	push	r27
    10d6:	ef 93       	push	r30
    10d8:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
    10da:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <INT1_Fptr>
    10de:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <INT1_Fptr+0x1>
    10e2:	30 97       	sbiw	r30, 0x00	; 0
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <__vector_2+0x30>
	{
		INT1_Fptr();
    10e6:	09 95       	icall
	}
}
    10e8:	ff 91       	pop	r31
    10ea:	ef 91       	pop	r30
    10ec:	bf 91       	pop	r27
    10ee:	af 91       	pop	r26
    10f0:	9f 91       	pop	r25
    10f2:	8f 91       	pop	r24
    10f4:	7f 91       	pop	r23
    10f6:	6f 91       	pop	r22
    10f8:	5f 91       	pop	r21
    10fa:	4f 91       	pop	r20
    10fc:	3f 91       	pop	r19
    10fe:	2f 91       	pop	r18
    1100:	0f 90       	pop	r0
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	0f 90       	pop	r0
    1106:	1f 90       	pop	r1
    1108:	18 95       	reti

0000110a <__vector_3>:
ISR(INT2_vect)
{
    110a:	1f 92       	push	r1
    110c:	0f 92       	push	r0
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	0f 92       	push	r0
    1112:	11 24       	eor	r1, r1
    1114:	2f 93       	push	r18
    1116:	3f 93       	push	r19
    1118:	4f 93       	push	r20
    111a:	5f 93       	push	r21
    111c:	6f 93       	push	r22
    111e:	7f 93       	push	r23
    1120:	8f 93       	push	r24
    1122:	9f 93       	push	r25
    1124:	af 93       	push	r26
    1126:	bf 93       	push	r27
    1128:	ef 93       	push	r30
    112a:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
    112c:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <INT2_Fptr>
    1130:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <INT2_Fptr+0x1>
    1134:	30 97       	sbiw	r30, 0x00	; 0
    1136:	09 f0       	breq	.+2      	; 0x113a <__vector_3+0x30>
	{
		INT2_Fptr();
    1138:	09 95       	icall
	}
}
    113a:	ff 91       	pop	r31
    113c:	ef 91       	pop	r30
    113e:	bf 91       	pop	r27
    1140:	af 91       	pop	r26
    1142:	9f 91       	pop	r25
    1144:	8f 91       	pop	r24
    1146:	7f 91       	pop	r23
    1148:	6f 91       	pop	r22
    114a:	5f 91       	pop	r21
    114c:	4f 91       	pop	r20
    114e:	3f 91       	pop	r19
    1150:	2f 91       	pop	r18
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	0f 90       	pop	r0
    1158:	1f 90       	pop	r1
    115a:	18 95       	reti

0000115c <waveGen>:
	TIMER0_OV_SetCallBack(waveGen);
	
} 

void waveGen()
{  static u32 OV=0;
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
	TCNT0=6;
    1160:	86 e0       	ldi	r24, 0x06	; 6
    1162:	82 bf       	out	0x32, r24	; 50
	OV++;
    1164:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <OV.2058>
    1168:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <OV.2058+0x1>
    116c:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <OV.2058+0x2>
    1170:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <OV.2058+0x3>
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	a1 1d       	adc	r26, r1
    1178:	b1 1d       	adc	r27, r1
    117a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <OV.2058>
    117e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <OV.2058+0x1>
    1182:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <OV.2058+0x2>
    1186:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <OV.2058+0x3>
	if (OV==(u32_OFFTicks+1))
    118a:	00 91 28 01 	lds	r16, 0x0128	; 0x800128 <u32_OFFTicks>
    118e:	10 91 29 01 	lds	r17, 0x0129	; 0x800129 <u32_OFFTicks+0x1>
    1192:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <u32_OFFTicks+0x2>
    1196:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <u32_OFFTicks+0x3>
    119a:	b9 01       	movw	r22, r18
    119c:	a8 01       	movw	r20, r16
    119e:	4f 5f       	subi	r20, 0xFF	; 255
    11a0:	5f 4f       	sbci	r21, 0xFF	; 255
    11a2:	6f 4f       	sbci	r22, 0xFF	; 255
    11a4:	7f 4f       	sbci	r23, 0xFF	; 255
    11a6:	84 17       	cp	r24, r20
    11a8:	95 07       	cpc	r25, r21
    11aa:	a6 07       	cpc	r26, r22
    11ac:	b7 07       	cpc	r27, r23
    11ae:	29 f4       	brne	.+10     	; 0x11ba <waveGen+0x5e>
	{
		DIO_writepin(PINB0,HIGH);//
    11b0:	61 e0       	ldi	r22, 0x01	; 1
    11b2:	88 e0       	ldi	r24, 0x08	; 8
    11b4:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
    11b8:	21 c0       	rjmp	.+66     	; 0x11fc <waveGen+0xa0>
	}
	else if (OV==(u32_ONTicks+u32_OFFTicks+2))
    11ba:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <u32_ONTicks>
    11be:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <u32_ONTicks+0x1>
    11c2:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <u32_ONTicks+0x2>
    11c6:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <u32_ONTicks+0x3>
    11ca:	40 0f       	add	r20, r16
    11cc:	51 1f       	adc	r21, r17
    11ce:	62 1f       	adc	r22, r18
    11d0:	73 1f       	adc	r23, r19
    11d2:	4e 5f       	subi	r20, 0xFE	; 254
    11d4:	5f 4f       	sbci	r21, 0xFF	; 255
    11d6:	6f 4f       	sbci	r22, 0xFF	; 255
    11d8:	7f 4f       	sbci	r23, 0xFF	; 255
    11da:	84 17       	cp	r24, r20
    11dc:	95 07       	cpc	r25, r21
    11de:	a6 07       	cpc	r26, r22
    11e0:	b7 07       	cpc	r27, r23
    11e2:	61 f4       	brne	.+24     	; 0x11fc <waveGen+0xa0>
	{
		DIO_writepin(PINB0,LOW);//
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	88 e0       	ldi	r24, 0x08	; 8
    11e8:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
		OV=0;
    11ec:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <OV.2058>
    11f0:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <OV.2058+0x1>
    11f4:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <OV.2058+0x2>
    11f8:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <OV.2058+0x3>
	}
	
}
    11fc:	1f 91       	pop	r17
    11fe:	0f 91       	pop	r16
    1200:	08 95       	ret

00001202 <pwm_init>:
u32 u32_ONTicks=0,u32_OFFTicks=0;


void pwm_init()
{
	DIO_initpin(PINB0,OUTPUT);
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	88 e0       	ldi	r24, 0x08	; 8
    1206:	0e 94 3d 05 	call	0xa7a	; 0xa7a <DIO_initpin>
	TIMER0_Init(TIMER0_NORMAL_MODE);
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <TIMER0_Init>
	TIMER0_OV_InterruptEnable();
    1210:	0e 94 d7 09 	call	0x13ae	; 0x13ae <TIMER0_OV_InterruptEnable>
	TIMER0_OV_SetCallBack(waveGen);
    1214:	8e ea       	ldi	r24, 0xAE	; 174
    1216:	98 e0       	ldi	r25, 0x08	; 8
    1218:	0e 94 a9 09 	call	0x1352	; 0x1352 <TIMER0_OV_SetCallBack>
    121c:	08 95       	ret

0000121e <PWM_set_duty>:
	
}


void PWM_set_duty(u8 u8_DutyCycle,u32 u32_Freq)
{
    121e:	8f 92       	push	r8
    1220:	9f 92       	push	r9
    1222:	af 92       	push	r10
    1224:	bf 92       	push	r11
    1226:	cf 92       	push	r12
    1228:	df 92       	push	r13
    122a:	ef 92       	push	r14
    122c:	ff 92       	push	r15
    122e:	cf 93       	push	r28
    1230:	c8 2f       	mov	r28, r24
	f64 f64_wavePeriodTime = (f32)1 / u32_Freq*1000000;					         // The Periodic Time for the Generated Pulse in Seconds //
    1232:	cb 01       	movw	r24, r22
    1234:	ba 01       	movw	r22, r20
    1236:	0e 94 33 0c 	call	0x1866	; 0x1866 <__floatunsisf>
    123a:	9b 01       	movw	r18, r22
    123c:	ac 01       	movw	r20, r24
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	80 e8       	ldi	r24, 0x80	; 128
    1244:	9f e3       	ldi	r25, 0x3F	; 63
    1246:	0e 94 92 0b 	call	0x1724	; 0x1724 <__divsf3>
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	34 e2       	ldi	r19, 0x24	; 36
    124e:	44 e7       	ldi	r20, 0x74	; 116
    1250:	59 e4       	ldi	r21, 0x49	; 73
    1252:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__mulsf3>
    1256:	4b 01       	movw	r8, r22
    1258:	5c 01       	movw	r10, r24
	f64 f64_waveONTime = (f64_wavePeriodTime*u8_DutyCycle) / 100;		// The HIGH Level Time in Seconds //
    125a:	6c 2f       	mov	r22, r28
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0e 94 35 0c 	call	0x186a	; 0x186a <__floatsisf>
    1266:	a5 01       	movw	r20, r10
    1268:	94 01       	movw	r18, r8
    126a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__mulsf3>
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	48 ec       	ldi	r20, 0xC8	; 200
    1274:	52 e4       	ldi	r21, 0x42	; 66
    1276:	0e 94 92 0b 	call	0x1724	; 0x1724 <__divsf3>
    127a:	6b 01       	movw	r12, r22
    127c:	7c 01       	movw	r14, r24
	f64 f64_waveOFFTime = f64_wavePeriodTime - f64_waveONTime;		   // The LOW Level Time in Seconds //
    127e:	9b 01       	movw	r18, r22
    1280:	ac 01       	movw	r20, r24
    1282:	c5 01       	movw	r24, r10
    1284:	b4 01       	movw	r22, r8
    1286:	0e 94 25 0b 	call	0x164a	; 0x164a <__subsf3>
    128a:	4b 01       	movw	r8, r22
    128c:	5c 01       	movw	r10, r24
	f64 f64_oneTickTime = 0.0;
	f64_oneTickTime = (f64) (((f64)PWM_PRESCALER/(f64)F_CPU)*1000000);   //1u at 8,8
	//LCD_WriteNumber(f64_wavePeriodTime) ;
	f64 f64_max_time = (256*f64_oneTickTime); //256u
	//LCD_WriteNumber( f64_max_time) ;
	u32_ONTicks     =  f64_waveONTime/(f64_max_time-6);
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	4a e7       	ldi	r20, 0x7A	; 122
    1294:	53 e4       	ldi	r21, 0x43	; 67
    1296:	c7 01       	movw	r24, r14
    1298:	b6 01       	movw	r22, r12
    129a:	0e 94 92 0b 	call	0x1724	; 0x1724 <__divsf3>
    129e:	0e 94 04 0c 	call	0x1808	; 0x1808 <__fixunssfsi>
    12a2:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <u32_ONTicks>
    12a6:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <u32_ONTicks+0x1>
    12aa:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <u32_ONTicks+0x2>
    12ae:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <u32_ONTicks+0x3>
	u32_OFFTicks    =  f64_waveOFFTime/(f64_max_time-6);
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	4a e7       	ldi	r20, 0x7A	; 122
    12b8:	53 e4       	ldi	r21, 0x43	; 67
    12ba:	c5 01       	movw	r24, r10
    12bc:	b4 01       	movw	r22, r8
    12be:	0e 94 92 0b 	call	0x1724	; 0x1724 <__divsf3>
    12c2:	0e 94 04 0c 	call	0x1808	; 0x1808 <__fixunssfsi>
    12c6:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <u32_OFFTicks>
    12ca:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <u32_OFFTicks+0x1>
    12ce:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <u32_OFFTicks+0x2>
    12d2:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <u32_OFFTicks+0x3>
	DIO_writepin(PINB0,HIGH);
    12d6:	61 e0       	ldi	r22, 0x01	; 1
    12d8:	88 e0       	ldi	r24, 0x08	; 8
    12da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_writepin>
}
    12de:	cf 91       	pop	r28
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	df 90       	pop	r13
    12e6:	cf 90       	pop	r12
    12e8:	bf 90       	pop	r11
    12ea:	af 90       	pop	r10
    12ec:	9f 90       	pop	r9
    12ee:	8f 90       	pop	r8
    12f0:	08 95       	ret

000012f2 <TIMER0_Init>:
{
	SET_BIT(TIMSK,TOIE2);
}
void TIMER2_OV_InterruptDisable(void)
{
	CLR_BIT(TIMSK,TOIE2);
    12f2:	81 30       	cpi	r24, 0x01	; 1
    12f4:	69 f0       	breq	.+26     	; 0x1310 <TIMER0_Init+0x1e>
    12f6:	28 f0       	brcs	.+10     	; 0x1302 <TIMER0_Init+0x10>
    12f8:	82 30       	cpi	r24, 0x02	; 2
    12fa:	89 f0       	breq	.+34     	; 0x131e <TIMER0_Init+0x2c>
    12fc:	83 30       	cpi	r24, 0x03	; 3
    12fe:	b1 f0       	breq	.+44     	; 0x132c <TIMER0_Init+0x3a>
    1300:	08 95       	ret
    1302:	83 b7       	in	r24, 0x33	; 51
    1304:	8f 7b       	andi	r24, 0xBF	; 191
    1306:	83 bf       	out	0x33, r24	; 51
    1308:	83 b7       	in	r24, 0x33	; 51
    130a:	87 7f       	andi	r24, 0xF7	; 247
    130c:	83 bf       	out	0x33, r24	; 51
    130e:	08 95       	ret
    1310:	83 b7       	in	r24, 0x33	; 51
    1312:	80 64       	ori	r24, 0x40	; 64
    1314:	83 bf       	out	0x33, r24	; 51
    1316:	83 b7       	in	r24, 0x33	; 51
    1318:	87 7f       	andi	r24, 0xF7	; 247
    131a:	83 bf       	out	0x33, r24	; 51
    131c:	08 95       	ret
    131e:	83 b7       	in	r24, 0x33	; 51
    1320:	8f 7b       	andi	r24, 0xBF	; 191
    1322:	83 bf       	out	0x33, r24	; 51
    1324:	83 b7       	in	r24, 0x33	; 51
    1326:	88 60       	ori	r24, 0x08	; 8
    1328:	83 bf       	out	0x33, r24	; 51
    132a:	08 95       	ret
    132c:	83 b7       	in	r24, 0x33	; 51
    132e:	80 64       	ori	r24, 0x40	; 64
    1330:	83 bf       	out	0x33, r24	; 51
    1332:	83 b7       	in	r24, 0x33	; 51
    1334:	88 60       	ori	r24, 0x08	; 8
    1336:	83 bf       	out	0x33, r24	; 51
    1338:	08 95       	ret

0000133a <timer_start>:
    133a:	88 30       	cpi	r24, 0x08	; 8
    133c:	40 f4       	brcc	.+16     	; 0x134e <timer_start+0x14>
    133e:	93 b7       	in	r25, 0x33	; 51
    1340:	98 7f       	andi	r25, 0xF8	; 248
    1342:	93 bf       	out	0x33, r25	; 51
    1344:	93 b7       	in	r25, 0x33	; 51
    1346:	89 2b       	or	r24, r25
    1348:	83 bf       	out	0x33, r24	; 51
    134a:	84 e0       	ldi	r24, 0x04	; 4
    134c:	08 95       	ret
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	08 95       	ret

00001352 <TIMER0_OV_SetCallBack>:
    1352:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <Timer0_OVF_Fptr+0x1>
    1356:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <Timer0_OVF_Fptr>
    135a:	08 95       	ret

0000135c <__vector_11>:
    135c:	1f 92       	push	r1
    135e:	0f 92       	push	r0
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	0f 92       	push	r0
    1364:	11 24       	eor	r1, r1
    1366:	2f 93       	push	r18
    1368:	3f 93       	push	r19
    136a:	4f 93       	push	r20
    136c:	5f 93       	push	r21
    136e:	6f 93       	push	r22
    1370:	7f 93       	push	r23
    1372:	8f 93       	push	r24
    1374:	9f 93       	push	r25
    1376:	af 93       	push	r26
    1378:	bf 93       	push	r27
    137a:	ef 93       	push	r30
    137c:	ff 93       	push	r31
    137e:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <Timer0_OVF_Fptr>
    1382:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <Timer0_OVF_Fptr+0x1>
    1386:	30 97       	sbiw	r30, 0x00	; 0
    1388:	09 f0       	breq	.+2      	; 0x138c <__vector_11+0x30>
    138a:	09 95       	icall
    138c:	ff 91       	pop	r31
    138e:	ef 91       	pop	r30
    1390:	bf 91       	pop	r27
    1392:	af 91       	pop	r26
    1394:	9f 91       	pop	r25
    1396:	8f 91       	pop	r24
    1398:	7f 91       	pop	r23
    139a:	6f 91       	pop	r22
    139c:	5f 91       	pop	r21
    139e:	4f 91       	pop	r20
    13a0:	3f 91       	pop	r19
    13a2:	2f 91       	pop	r18
    13a4:	0f 90       	pop	r0
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	0f 90       	pop	r0
    13aa:	1f 90       	pop	r1
    13ac:	18 95       	reti

000013ae <TIMER0_OV_InterruptEnable>:
    13ae:	89 b7       	in	r24, 0x39	; 57
    13b0:	81 60       	ori	r24, 0x01	; 1
    13b2:	89 bf       	out	0x39, r24	; 57
    13b4:	08 95       	ret

000013b6 <Timer1_Init>:
    13b6:	82 30       	cpi	r24, 0x02	; 2
    13b8:	29 f1       	breq	.+74     	; 0x1404 <Timer1_Init+0x4e>
    13ba:	28 f4       	brcc	.+10     	; 0x13c6 <Timer1_Init+0x10>
    13bc:	88 23       	and	r24, r24
    13be:	41 f0       	breq	.+16     	; 0x13d0 <Timer1_Init+0x1a>
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	99 f0       	breq	.+38     	; 0x13ea <Timer1_Init+0x34>
    13c4:	45 c0       	rjmp	.+138    	; 0x1450 <Timer1_Init+0x9a>
    13c6:	83 30       	cpi	r24, 0x03	; 3
    13c8:	51 f1       	breq	.+84     	; 0x141e <Timer1_Init+0x68>
    13ca:	84 30       	cpi	r24, 0x04	; 4
    13cc:	a9 f1       	breq	.+106    	; 0x1438 <Timer1_Init+0x82>
    13ce:	40 c0       	rjmp	.+128    	; 0x1450 <Timer1_Init+0x9a>
    13d0:	8f b5       	in	r24, 0x2f	; 47
    13d2:	8e 7f       	andi	r24, 0xFE	; 254
    13d4:	8f bd       	out	0x2f, r24	; 47
    13d6:	8f b5       	in	r24, 0x2f	; 47
    13d8:	8d 7f       	andi	r24, 0xFD	; 253
    13da:	8f bd       	out	0x2f, r24	; 47
    13dc:	8e b5       	in	r24, 0x2e	; 46
    13de:	87 7f       	andi	r24, 0xF7	; 247
    13e0:	8e bd       	out	0x2e, r24	; 46
    13e2:	8e b5       	in	r24, 0x2e	; 46
    13e4:	8f 7e       	andi	r24, 0xEF	; 239
    13e6:	8e bd       	out	0x2e, r24	; 46
    13e8:	33 c0       	rjmp	.+102    	; 0x1450 <Timer1_Init+0x9a>
    13ea:	8f b5       	in	r24, 0x2f	; 47
    13ec:	8e 7f       	andi	r24, 0xFE	; 254
    13ee:	8f bd       	out	0x2f, r24	; 47
    13f0:	8f b5       	in	r24, 0x2f	; 47
    13f2:	8d 7f       	andi	r24, 0xFD	; 253
    13f4:	8f bd       	out	0x2f, r24	; 47
    13f6:	8e b5       	in	r24, 0x2e	; 46
    13f8:	88 60       	ori	r24, 0x08	; 8
    13fa:	8e bd       	out	0x2e, r24	; 46
    13fc:	8e b5       	in	r24, 0x2e	; 46
    13fe:	80 61       	ori	r24, 0x10	; 16
    1400:	8e bd       	out	0x2e, r24	; 46
    1402:	26 c0       	rjmp	.+76     	; 0x1450 <Timer1_Init+0x9a>
    1404:	8f b5       	in	r24, 0x2f	; 47
    1406:	8e 7f       	andi	r24, 0xFE	; 254
    1408:	8f bd       	out	0x2f, r24	; 47
    140a:	8f b5       	in	r24, 0x2f	; 47
    140c:	8d 7f       	andi	r24, 0xFD	; 253
    140e:	8f bd       	out	0x2f, r24	; 47
    1410:	8e b5       	in	r24, 0x2e	; 46
    1412:	88 60       	ori	r24, 0x08	; 8
    1414:	8e bd       	out	0x2e, r24	; 46
    1416:	8e b5       	in	r24, 0x2e	; 46
    1418:	8f 7e       	andi	r24, 0xEF	; 239
    141a:	8e bd       	out	0x2e, r24	; 46
    141c:	19 c0       	rjmp	.+50     	; 0x1450 <Timer1_Init+0x9a>
    141e:	8f b5       	in	r24, 0x2f	; 47
    1420:	8e 7f       	andi	r24, 0xFE	; 254
    1422:	8f bd       	out	0x2f, r24	; 47
    1424:	8f b5       	in	r24, 0x2f	; 47
    1426:	82 60       	ori	r24, 0x02	; 2
    1428:	8f bd       	out	0x2f, r24	; 47
    142a:	8e b5       	in	r24, 0x2e	; 46
    142c:	88 60       	ori	r24, 0x08	; 8
    142e:	8e bd       	out	0x2e, r24	; 46
    1430:	8e b5       	in	r24, 0x2e	; 46
    1432:	80 61       	ori	r24, 0x10	; 16
    1434:	8e bd       	out	0x2e, r24	; 46
    1436:	0c c0       	rjmp	.+24     	; 0x1450 <Timer1_Init+0x9a>
    1438:	8f b5       	in	r24, 0x2f	; 47
    143a:	81 60       	ori	r24, 0x01	; 1
    143c:	8f bd       	out	0x2f, r24	; 47
    143e:	8f b5       	in	r24, 0x2f	; 47
    1440:	82 60       	ori	r24, 0x02	; 2
    1442:	8f bd       	out	0x2f, r24	; 47
    1444:	8e b5       	in	r24, 0x2e	; 46
    1446:	88 60       	ori	r24, 0x08	; 8
    1448:	8e bd       	out	0x2e, r24	; 46
    144a:	8e b5       	in	r24, 0x2e	; 46
    144c:	80 61       	ori	r24, 0x10	; 16
    144e:	8e bd       	out	0x2e, r24	; 46
    1450:	8e b5       	in	r24, 0x2e	; 46
    1452:	88 7f       	andi	r24, 0xF8	; 248
    1454:	8e bd       	out	0x2e, r24	; 46
    1456:	8e b5       	in	r24, 0x2e	; 46
    1458:	68 2b       	or	r22, r24
    145a:	6e bd       	out	0x2e, r22	; 46
    145c:	08 95       	ret

0000145e <__vector_9>:
    145e:	1f 92       	push	r1
    1460:	0f 92       	push	r0
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	0f 92       	push	r0
    1466:	11 24       	eor	r1, r1
    1468:	2f 93       	push	r18
    146a:	3f 93       	push	r19
    146c:	4f 93       	push	r20
    146e:	5f 93       	push	r21
    1470:	6f 93       	push	r22
    1472:	7f 93       	push	r23
    1474:	8f 93       	push	r24
    1476:	9f 93       	push	r25
    1478:	af 93       	push	r26
    147a:	bf 93       	push	r27
    147c:	ef 93       	push	r30
    147e:	ff 93       	push	r31
    1480:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <Timer1_OVF_Fptr>
    1484:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <Timer1_OVF_Fptr+0x1>
    1488:	30 97       	sbiw	r30, 0x00	; 0
    148a:	09 f0       	breq	.+2      	; 0x148e <__vector_9+0x30>
    148c:	09 95       	icall
    148e:	ff 91       	pop	r31
    1490:	ef 91       	pop	r30
    1492:	bf 91       	pop	r27
    1494:	af 91       	pop	r26
    1496:	9f 91       	pop	r25
    1498:	8f 91       	pop	r24
    149a:	7f 91       	pop	r23
    149c:	6f 91       	pop	r22
    149e:	5f 91       	pop	r21
    14a0:	4f 91       	pop	r20
    14a2:	3f 91       	pop	r19
    14a4:	2f 91       	pop	r18
    14a6:	0f 90       	pop	r0
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	0f 90       	pop	r0
    14ac:	1f 90       	pop	r1
    14ae:	18 95       	reti

000014b0 <__vector_8>:
    14b0:	1f 92       	push	r1
    14b2:	0f 92       	push	r0
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	0f 92       	push	r0
    14b8:	11 24       	eor	r1, r1
    14ba:	2f 93       	push	r18
    14bc:	3f 93       	push	r19
    14be:	4f 93       	push	r20
    14c0:	5f 93       	push	r21
    14c2:	6f 93       	push	r22
    14c4:	7f 93       	push	r23
    14c6:	8f 93       	push	r24
    14c8:	9f 93       	push	r25
    14ca:	af 93       	push	r26
    14cc:	bf 93       	push	r27
    14ce:	ef 93       	push	r30
    14d0:	ff 93       	push	r31
    14d2:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <Timer1_OCB_Fptr>
    14d6:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <Timer1_OCB_Fptr+0x1>
    14da:	30 97       	sbiw	r30, 0x00	; 0
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <__vector_8+0x30>
    14de:	09 95       	icall
    14e0:	ff 91       	pop	r31
    14e2:	ef 91       	pop	r30
    14e4:	bf 91       	pop	r27
    14e6:	af 91       	pop	r26
    14e8:	9f 91       	pop	r25
    14ea:	8f 91       	pop	r24
    14ec:	7f 91       	pop	r23
    14ee:	6f 91       	pop	r22
    14f0:	5f 91       	pop	r21
    14f2:	4f 91       	pop	r20
    14f4:	3f 91       	pop	r19
    14f6:	2f 91       	pop	r18
    14f8:	0f 90       	pop	r0
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	0f 90       	pop	r0
    14fe:	1f 90       	pop	r1
    1500:	18 95       	reti

00001502 <__vector_6>:
    1502:	1f 92       	push	r1
    1504:	0f 92       	push	r0
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	0f 92       	push	r0
    150a:	11 24       	eor	r1, r1
    150c:	2f 93       	push	r18
    150e:	3f 93       	push	r19
    1510:	4f 93       	push	r20
    1512:	5f 93       	push	r21
    1514:	6f 93       	push	r22
    1516:	7f 93       	push	r23
    1518:	8f 93       	push	r24
    151a:	9f 93       	push	r25
    151c:	af 93       	push	r26
    151e:	bf 93       	push	r27
    1520:	ef 93       	push	r30
    1522:	ff 93       	push	r31
    1524:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Timer1_ICU_Fptr>
    1528:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Timer1_ICU_Fptr+0x1>
    152c:	30 97       	sbiw	r30, 0x00	; 0
    152e:	09 f0       	breq	.+2      	; 0x1532 <__vector_6+0x30>
    1530:	09 95       	icall
    1532:	ff 91       	pop	r31
    1534:	ef 91       	pop	r30
    1536:	bf 91       	pop	r27
    1538:	af 91       	pop	r26
    153a:	9f 91       	pop	r25
    153c:	8f 91       	pop	r24
    153e:	7f 91       	pop	r23
    1540:	6f 91       	pop	r22
    1542:	5f 91       	pop	r21
    1544:	4f 91       	pop	r20
    1546:	3f 91       	pop	r19
    1548:	2f 91       	pop	r18
    154a:	0f 90       	pop	r0
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	0f 90       	pop	r0
    1550:	1f 90       	pop	r1
    1552:	18 95       	reti

00001554 <timer1_ReadCounts>:
    1554:	2c b5       	in	r18, 0x2c	; 44
    1556:	3d b5       	in	r19, 0x2d	; 45
    1558:	fc 01       	movw	r30, r24
    155a:	31 83       	std	Z+1, r19	; 0x01
    155c:	20 83       	st	Z, r18
    155e:	08 95       	ret

00001560 <timer1_setTimerValue>:
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	9d bd       	out	0x2d, r25	; 45
    1564:	8c bd       	out	0x2c, r24	; 44
    1566:	08 95       	ret

00001568 <TIMER2_Init>:
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	69 f0       	breq	.+26     	; 0x1586 <TIMER2_Init+0x1e>
    156c:	28 f0       	brcs	.+10     	; 0x1578 <TIMER2_Init+0x10>
    156e:	82 30       	cpi	r24, 0x02	; 2
    1570:	89 f0       	breq	.+34     	; 0x1594 <TIMER2_Init+0x2c>
    1572:	83 30       	cpi	r24, 0x03	; 3
    1574:	b1 f0       	breq	.+44     	; 0x15a2 <TIMER2_Init+0x3a>
    1576:	08 95       	ret
    1578:	85 b5       	in	r24, 0x25	; 37
    157a:	8f 7b       	andi	r24, 0xBF	; 191
    157c:	85 bd       	out	0x25, r24	; 37
    157e:	85 b5       	in	r24, 0x25	; 37
    1580:	87 7f       	andi	r24, 0xF7	; 247
    1582:	85 bd       	out	0x25, r24	; 37
    1584:	08 95       	ret
    1586:	85 b5       	in	r24, 0x25	; 37
    1588:	80 64       	ori	r24, 0x40	; 64
    158a:	85 bd       	out	0x25, r24	; 37
    158c:	85 b5       	in	r24, 0x25	; 37
    158e:	87 7f       	andi	r24, 0xF7	; 247
    1590:	85 bd       	out	0x25, r24	; 37
    1592:	08 95       	ret
    1594:	85 b5       	in	r24, 0x25	; 37
    1596:	8f 7b       	andi	r24, 0xBF	; 191
    1598:	85 bd       	out	0x25, r24	; 37
    159a:	85 b5       	in	r24, 0x25	; 37
    159c:	88 60       	ori	r24, 0x08	; 8
    159e:	85 bd       	out	0x25, r24	; 37
    15a0:	08 95       	ret
    15a2:	85 b5       	in	r24, 0x25	; 37
    15a4:	80 64       	ori	r24, 0x40	; 64
    15a6:	85 bd       	out	0x25, r24	; 37
    15a8:	85 b5       	in	r24, 0x25	; 37
    15aa:	88 60       	ori	r24, 0x08	; 8
    15ac:	85 bd       	out	0x25, r24	; 37
    15ae:	08 95       	ret

000015b0 <TIMER_2_setIntialValue>:
    15b0:	84 bd       	out	0x24, r24	; 36
    15b2:	84 e0       	ldi	r24, 0x04	; 4
    15b4:	08 95       	ret

000015b6 <timer2_start>:
    15b6:	88 30       	cpi	r24, 0x08	; 8
    15b8:	40 f4       	brcc	.+16     	; 0x15ca <timer2_start+0x14>
    15ba:	95 b5       	in	r25, 0x25	; 37
    15bc:	98 7f       	andi	r25, 0xF8	; 248
    15be:	95 bd       	out	0x25, r25	; 37
    15c0:	95 b5       	in	r25, 0x25	; 37
    15c2:	89 2b       	or	r24, r25
    15c4:	85 bd       	out	0x25, r24	; 37
    15c6:	84 e0       	ldi	r24, 0x04	; 4
    15c8:	08 95       	ret
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	08 95       	ret

000015ce <TIMER2_OV_InterruptEnable>:
    15ce:	89 b7       	in	r24, 0x39	; 57
    15d0:	80 64       	ori	r24, 0x40	; 64
    15d2:	89 bf       	out	0x39, r24	; 57
    15d4:	08 95       	ret

000015d6 <TIMER_2_INT>:
    15d6:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <TIMER2_OV_InterruptEnable>
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	0e 94 b4 0a 	call	0x1568	; 0x1568 <TIMER2_Init>
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <TIMER_2_setIntialValue>
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <timer2_start>
    15ec:	08 95       	ret

000015ee <TIMER2_OV_SetCallBack>:
}

////////////////////////////////////////////Timer 2 Call Back functions///////////////////////////////////////
void TIMER2_OV_SetCallBack(void(*LocalFptr)(void))
{
	Timer2_OVF_Fptr=LocalFptr;
    15ee:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <Timer2_OVF_Fptr+0x1>
    15f2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Timer2_OVF_Fptr>
    15f6:	08 95       	ret

000015f8 <__vector_5>:
}



ISR(TIMER2_OV_vect)
{
    15f8:	1f 92       	push	r1
    15fa:	0f 92       	push	r0
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	0f 92       	push	r0
    1600:	11 24       	eor	r1, r1
    1602:	2f 93       	push	r18
    1604:	3f 93       	push	r19
    1606:	4f 93       	push	r20
    1608:	5f 93       	push	r21
    160a:	6f 93       	push	r22
    160c:	7f 93       	push	r23
    160e:	8f 93       	push	r24
    1610:	9f 93       	push	r25
    1612:	af 93       	push	r26
    1614:	bf 93       	push	r27
    1616:	ef 93       	push	r30
    1618:	ff 93       	push	r31
	if(Timer2_OVF_Fptr!=NULLPTR)
    161a:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Timer2_OVF_Fptr>
    161e:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Timer2_OVF_Fptr+0x1>
    1622:	30 97       	sbiw	r30, 0x00	; 0
    1624:	09 f0       	breq	.+2      	; 0x1628 <__vector_5+0x30>
	{
		Timer2_OVF_Fptr();
    1626:	09 95       	icall
	}
}
    1628:	ff 91       	pop	r31
    162a:	ef 91       	pop	r30
    162c:	bf 91       	pop	r27
    162e:	af 91       	pop	r26
    1630:	9f 91       	pop	r25
    1632:	8f 91       	pop	r24
    1634:	7f 91       	pop	r23
    1636:	6f 91       	pop	r22
    1638:	5f 91       	pop	r21
    163a:	4f 91       	pop	r20
    163c:	3f 91       	pop	r19
    163e:	2f 91       	pop	r18
    1640:	0f 90       	pop	r0
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	0f 90       	pop	r0
    1646:	1f 90       	pop	r1
    1648:	18 95       	reti

0000164a <__subsf3>:
    164a:	50 58       	subi	r21, 0x80	; 128

0000164c <__addsf3>:
    164c:	bb 27       	eor	r27, r27
    164e:	aa 27       	eor	r26, r26
    1650:	0e 94 3d 0b 	call	0x167a	; 0x167a <__addsf3x>
    1654:	0c 94 87 0c 	jmp	0x190e	; 0x190e <__fp_round>
    1658:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__fp_pscA>
    165c:	38 f0       	brcs	.+14     	; 0x166c <__addsf3+0x20>
    165e:	0e 94 80 0c 	call	0x1900	; 0x1900 <__fp_pscB>
    1662:	20 f0       	brcs	.+8      	; 0x166c <__addsf3+0x20>
    1664:	39 f4       	brne	.+14     	; 0x1674 <__addsf3+0x28>
    1666:	9f 3f       	cpi	r25, 0xFF	; 255
    1668:	19 f4       	brne	.+6      	; 0x1670 <__addsf3+0x24>
    166a:	26 f4       	brtc	.+8      	; 0x1674 <__addsf3+0x28>
    166c:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__fp_nan>
    1670:	0e f4       	brtc	.+2      	; 0x1674 <__addsf3+0x28>
    1672:	e0 95       	com	r30
    1674:	e7 fb       	bst	r30, 7
    1676:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__fp_inf>

0000167a <__addsf3x>:
    167a:	e9 2f       	mov	r30, r25
    167c:	0e 94 98 0c 	call	0x1930	; 0x1930 <__fp_split3>
    1680:	58 f3       	brcs	.-42     	; 0x1658 <__addsf3+0xc>
    1682:	ba 17       	cp	r27, r26
    1684:	62 07       	cpc	r22, r18
    1686:	73 07       	cpc	r23, r19
    1688:	84 07       	cpc	r24, r20
    168a:	95 07       	cpc	r25, r21
    168c:	20 f0       	brcs	.+8      	; 0x1696 <__addsf3x+0x1c>
    168e:	79 f4       	brne	.+30     	; 0x16ae <__addsf3x+0x34>
    1690:	a6 f5       	brtc	.+104    	; 0x16fa <__addsf3x+0x80>
    1692:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <__fp_zero>
    1696:	0e f4       	brtc	.+2      	; 0x169a <__addsf3x+0x20>
    1698:	e0 95       	com	r30
    169a:	0b 2e       	mov	r0, r27
    169c:	ba 2f       	mov	r27, r26
    169e:	a0 2d       	mov	r26, r0
    16a0:	0b 01       	movw	r0, r22
    16a2:	b9 01       	movw	r22, r18
    16a4:	90 01       	movw	r18, r0
    16a6:	0c 01       	movw	r0, r24
    16a8:	ca 01       	movw	r24, r20
    16aa:	a0 01       	movw	r20, r0
    16ac:	11 24       	eor	r1, r1
    16ae:	ff 27       	eor	r31, r31
    16b0:	59 1b       	sub	r21, r25
    16b2:	99 f0       	breq	.+38     	; 0x16da <__addsf3x+0x60>
    16b4:	59 3f       	cpi	r21, 0xF9	; 249
    16b6:	50 f4       	brcc	.+20     	; 0x16cc <__addsf3x+0x52>
    16b8:	50 3e       	cpi	r21, 0xE0	; 224
    16ba:	68 f1       	brcs	.+90     	; 0x1716 <__addsf3x+0x9c>
    16bc:	1a 16       	cp	r1, r26
    16be:	f0 40       	sbci	r31, 0x00	; 0
    16c0:	a2 2f       	mov	r26, r18
    16c2:	23 2f       	mov	r18, r19
    16c4:	34 2f       	mov	r19, r20
    16c6:	44 27       	eor	r20, r20
    16c8:	58 5f       	subi	r21, 0xF8	; 248
    16ca:	f3 cf       	rjmp	.-26     	; 0x16b2 <__addsf3x+0x38>
    16cc:	46 95       	lsr	r20
    16ce:	37 95       	ror	r19
    16d0:	27 95       	ror	r18
    16d2:	a7 95       	ror	r26
    16d4:	f0 40       	sbci	r31, 0x00	; 0
    16d6:	53 95       	inc	r21
    16d8:	c9 f7       	brne	.-14     	; 0x16cc <__addsf3x+0x52>
    16da:	7e f4       	brtc	.+30     	; 0x16fa <__addsf3x+0x80>
    16dc:	1f 16       	cp	r1, r31
    16de:	ba 0b       	sbc	r27, r26
    16e0:	62 0b       	sbc	r22, r18
    16e2:	73 0b       	sbc	r23, r19
    16e4:	84 0b       	sbc	r24, r20
    16e6:	ba f0       	brmi	.+46     	; 0x1716 <__addsf3x+0x9c>
    16e8:	91 50       	subi	r25, 0x01	; 1
    16ea:	a1 f0       	breq	.+40     	; 0x1714 <__addsf3x+0x9a>
    16ec:	ff 0f       	add	r31, r31
    16ee:	bb 1f       	adc	r27, r27
    16f0:	66 1f       	adc	r22, r22
    16f2:	77 1f       	adc	r23, r23
    16f4:	88 1f       	adc	r24, r24
    16f6:	c2 f7       	brpl	.-16     	; 0x16e8 <__addsf3x+0x6e>
    16f8:	0e c0       	rjmp	.+28     	; 0x1716 <__addsf3x+0x9c>
    16fa:	ba 0f       	add	r27, r26
    16fc:	62 1f       	adc	r22, r18
    16fe:	73 1f       	adc	r23, r19
    1700:	84 1f       	adc	r24, r20
    1702:	48 f4       	brcc	.+18     	; 0x1716 <__addsf3x+0x9c>
    1704:	87 95       	ror	r24
    1706:	77 95       	ror	r23
    1708:	67 95       	ror	r22
    170a:	b7 95       	ror	r27
    170c:	f7 95       	ror	r31
    170e:	9e 3f       	cpi	r25, 0xFE	; 254
    1710:	08 f0       	brcs	.+2      	; 0x1714 <__addsf3x+0x9a>
    1712:	b0 cf       	rjmp	.-160    	; 0x1674 <__addsf3+0x28>
    1714:	93 95       	inc	r25
    1716:	88 0f       	add	r24, r24
    1718:	08 f0       	brcs	.+2      	; 0x171c <__addsf3x+0xa2>
    171a:	99 27       	eor	r25, r25
    171c:	ee 0f       	add	r30, r30
    171e:	97 95       	ror	r25
    1720:	87 95       	ror	r24
    1722:	08 95       	ret

00001724 <__divsf3>:
    1724:	0e 94 a6 0b 	call	0x174c	; 0x174c <__divsf3x>
    1728:	0c 94 87 0c 	jmp	0x190e	; 0x190e <__fp_round>
    172c:	0e 94 80 0c 	call	0x1900	; 0x1900 <__fp_pscB>
    1730:	58 f0       	brcs	.+22     	; 0x1748 <__divsf3+0x24>
    1732:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__fp_pscA>
    1736:	40 f0       	brcs	.+16     	; 0x1748 <__divsf3+0x24>
    1738:	29 f4       	brne	.+10     	; 0x1744 <__divsf3+0x20>
    173a:	5f 3f       	cpi	r21, 0xFF	; 255
    173c:	29 f0       	breq	.+10     	; 0x1748 <__divsf3+0x24>
    173e:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__fp_inf>
    1742:	51 11       	cpse	r21, r1
    1744:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__fp_szero>
    1748:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__fp_nan>

0000174c <__divsf3x>:
    174c:	0e 94 98 0c 	call	0x1930	; 0x1930 <__fp_split3>
    1750:	68 f3       	brcs	.-38     	; 0x172c <__divsf3+0x8>

00001752 <__divsf3_pse>:
    1752:	99 23       	and	r25, r25
    1754:	b1 f3       	breq	.-20     	; 0x1742 <__divsf3+0x1e>
    1756:	55 23       	and	r21, r21
    1758:	91 f3       	breq	.-28     	; 0x173e <__divsf3+0x1a>
    175a:	95 1b       	sub	r25, r21
    175c:	55 0b       	sbc	r21, r21
    175e:	bb 27       	eor	r27, r27
    1760:	aa 27       	eor	r26, r26
    1762:	62 17       	cp	r22, r18
    1764:	73 07       	cpc	r23, r19
    1766:	84 07       	cpc	r24, r20
    1768:	38 f0       	brcs	.+14     	; 0x1778 <__divsf3_pse+0x26>
    176a:	9f 5f       	subi	r25, 0xFF	; 255
    176c:	5f 4f       	sbci	r21, 0xFF	; 255
    176e:	22 0f       	add	r18, r18
    1770:	33 1f       	adc	r19, r19
    1772:	44 1f       	adc	r20, r20
    1774:	aa 1f       	adc	r26, r26
    1776:	a9 f3       	breq	.-22     	; 0x1762 <__divsf3_pse+0x10>
    1778:	35 d0       	rcall	.+106    	; 0x17e4 <__divsf3_pse+0x92>
    177a:	0e 2e       	mov	r0, r30
    177c:	3a f0       	brmi	.+14     	; 0x178c <__divsf3_pse+0x3a>
    177e:	e0 e8       	ldi	r30, 0x80	; 128
    1780:	32 d0       	rcall	.+100    	; 0x17e6 <__divsf3_pse+0x94>
    1782:	91 50       	subi	r25, 0x01	; 1
    1784:	50 40       	sbci	r21, 0x00	; 0
    1786:	e6 95       	lsr	r30
    1788:	00 1c       	adc	r0, r0
    178a:	ca f7       	brpl	.-14     	; 0x177e <__divsf3_pse+0x2c>
    178c:	2b d0       	rcall	.+86     	; 0x17e4 <__divsf3_pse+0x92>
    178e:	fe 2f       	mov	r31, r30
    1790:	29 d0       	rcall	.+82     	; 0x17e4 <__divsf3_pse+0x92>
    1792:	66 0f       	add	r22, r22
    1794:	77 1f       	adc	r23, r23
    1796:	88 1f       	adc	r24, r24
    1798:	bb 1f       	adc	r27, r27
    179a:	26 17       	cp	r18, r22
    179c:	37 07       	cpc	r19, r23
    179e:	48 07       	cpc	r20, r24
    17a0:	ab 07       	cpc	r26, r27
    17a2:	b0 e8       	ldi	r27, 0x80	; 128
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <__divsf3_pse+0x56>
    17a6:	bb 0b       	sbc	r27, r27
    17a8:	80 2d       	mov	r24, r0
    17aa:	bf 01       	movw	r22, r30
    17ac:	ff 27       	eor	r31, r31
    17ae:	93 58       	subi	r25, 0x83	; 131
    17b0:	5f 4f       	sbci	r21, 0xFF	; 255
    17b2:	3a f0       	brmi	.+14     	; 0x17c2 <__divsf3_pse+0x70>
    17b4:	9e 3f       	cpi	r25, 0xFE	; 254
    17b6:	51 05       	cpc	r21, r1
    17b8:	78 f0       	brcs	.+30     	; 0x17d8 <__divsf3_pse+0x86>
    17ba:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__fp_inf>
    17be:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__fp_szero>
    17c2:	5f 3f       	cpi	r21, 0xFF	; 255
    17c4:	e4 f3       	brlt	.-8      	; 0x17be <__divsf3_pse+0x6c>
    17c6:	98 3e       	cpi	r25, 0xE8	; 232
    17c8:	d4 f3       	brlt	.-12     	; 0x17be <__divsf3_pse+0x6c>
    17ca:	86 95       	lsr	r24
    17cc:	77 95       	ror	r23
    17ce:	67 95       	ror	r22
    17d0:	b7 95       	ror	r27
    17d2:	f7 95       	ror	r31
    17d4:	9f 5f       	subi	r25, 0xFF	; 255
    17d6:	c9 f7       	brne	.-14     	; 0x17ca <__divsf3_pse+0x78>
    17d8:	88 0f       	add	r24, r24
    17da:	91 1d       	adc	r25, r1
    17dc:	96 95       	lsr	r25
    17de:	87 95       	ror	r24
    17e0:	97 f9       	bld	r25, 7
    17e2:	08 95       	ret
    17e4:	e1 e0       	ldi	r30, 0x01	; 1
    17e6:	66 0f       	add	r22, r22
    17e8:	77 1f       	adc	r23, r23
    17ea:	88 1f       	adc	r24, r24
    17ec:	bb 1f       	adc	r27, r27
    17ee:	62 17       	cp	r22, r18
    17f0:	73 07       	cpc	r23, r19
    17f2:	84 07       	cpc	r24, r20
    17f4:	ba 07       	cpc	r27, r26
    17f6:	20 f0       	brcs	.+8      	; 0x1800 <__divsf3_pse+0xae>
    17f8:	62 1b       	sub	r22, r18
    17fa:	73 0b       	sbc	r23, r19
    17fc:	84 0b       	sbc	r24, r20
    17fe:	ba 0b       	sbc	r27, r26
    1800:	ee 1f       	adc	r30, r30
    1802:	88 f7       	brcc	.-30     	; 0x17e6 <__divsf3_pse+0x94>
    1804:	e0 95       	com	r30
    1806:	08 95       	ret

00001808 <__fixunssfsi>:
    1808:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__fp_splitA>
    180c:	88 f0       	brcs	.+34     	; 0x1830 <__fixunssfsi+0x28>
    180e:	9f 57       	subi	r25, 0x7F	; 127
    1810:	98 f0       	brcs	.+38     	; 0x1838 <__fixunssfsi+0x30>
    1812:	b9 2f       	mov	r27, r25
    1814:	99 27       	eor	r25, r25
    1816:	b7 51       	subi	r27, 0x17	; 23
    1818:	b0 f0       	brcs	.+44     	; 0x1846 <__fixunssfsi+0x3e>
    181a:	e1 f0       	breq	.+56     	; 0x1854 <__fixunssfsi+0x4c>
    181c:	66 0f       	add	r22, r22
    181e:	77 1f       	adc	r23, r23
    1820:	88 1f       	adc	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	1a f0       	brmi	.+6      	; 0x182c <__fixunssfsi+0x24>
    1826:	ba 95       	dec	r27
    1828:	c9 f7       	brne	.-14     	; 0x181c <__fixunssfsi+0x14>
    182a:	14 c0       	rjmp	.+40     	; 0x1854 <__fixunssfsi+0x4c>
    182c:	b1 30       	cpi	r27, 0x01	; 1
    182e:	91 f0       	breq	.+36     	; 0x1854 <__fixunssfsi+0x4c>
    1830:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__fp_zero>
    1834:	b1 e0       	ldi	r27, 0x01	; 1
    1836:	08 95       	ret
    1838:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <__fp_zero>
    183c:	67 2f       	mov	r22, r23
    183e:	78 2f       	mov	r23, r24
    1840:	88 27       	eor	r24, r24
    1842:	b8 5f       	subi	r27, 0xF8	; 248
    1844:	39 f0       	breq	.+14     	; 0x1854 <__fixunssfsi+0x4c>
    1846:	b9 3f       	cpi	r27, 0xF9	; 249
    1848:	cc f3       	brlt	.-14     	; 0x183c <__fixunssfsi+0x34>
    184a:	86 95       	lsr	r24
    184c:	77 95       	ror	r23
    184e:	67 95       	ror	r22
    1850:	b3 95       	inc	r27
    1852:	d9 f7       	brne	.-10     	; 0x184a <__fixunssfsi+0x42>
    1854:	3e f4       	brtc	.+14     	; 0x1864 <__fixunssfsi+0x5c>
    1856:	90 95       	com	r25
    1858:	80 95       	com	r24
    185a:	70 95       	com	r23
    185c:	61 95       	neg	r22
    185e:	7f 4f       	sbci	r23, 0xFF	; 255
    1860:	8f 4f       	sbci	r24, 0xFF	; 255
    1862:	9f 4f       	sbci	r25, 0xFF	; 255
    1864:	08 95       	ret

00001866 <__floatunsisf>:
    1866:	e8 94       	clt
    1868:	09 c0       	rjmp	.+18     	; 0x187c <__floatsisf+0x12>

0000186a <__floatsisf>:
    186a:	97 fb       	bst	r25, 7
    186c:	3e f4       	brtc	.+14     	; 0x187c <__floatsisf+0x12>
    186e:	90 95       	com	r25
    1870:	80 95       	com	r24
    1872:	70 95       	com	r23
    1874:	61 95       	neg	r22
    1876:	7f 4f       	sbci	r23, 0xFF	; 255
    1878:	8f 4f       	sbci	r24, 0xFF	; 255
    187a:	9f 4f       	sbci	r25, 0xFF	; 255
    187c:	99 23       	and	r25, r25
    187e:	a9 f0       	breq	.+42     	; 0x18aa <__floatsisf+0x40>
    1880:	f9 2f       	mov	r31, r25
    1882:	96 e9       	ldi	r25, 0x96	; 150
    1884:	bb 27       	eor	r27, r27
    1886:	93 95       	inc	r25
    1888:	f6 95       	lsr	r31
    188a:	87 95       	ror	r24
    188c:	77 95       	ror	r23
    188e:	67 95       	ror	r22
    1890:	b7 95       	ror	r27
    1892:	f1 11       	cpse	r31, r1
    1894:	f8 cf       	rjmp	.-16     	; 0x1886 <__floatsisf+0x1c>
    1896:	fa f4       	brpl	.+62     	; 0x18d6 <__floatsisf+0x6c>
    1898:	bb 0f       	add	r27, r27
    189a:	11 f4       	brne	.+4      	; 0x18a0 <__floatsisf+0x36>
    189c:	60 ff       	sbrs	r22, 0
    189e:	1b c0       	rjmp	.+54     	; 0x18d6 <__floatsisf+0x6c>
    18a0:	6f 5f       	subi	r22, 0xFF	; 255
    18a2:	7f 4f       	sbci	r23, 0xFF	; 255
    18a4:	8f 4f       	sbci	r24, 0xFF	; 255
    18a6:	9f 4f       	sbci	r25, 0xFF	; 255
    18a8:	16 c0       	rjmp	.+44     	; 0x18d6 <__floatsisf+0x6c>
    18aa:	88 23       	and	r24, r24
    18ac:	11 f0       	breq	.+4      	; 0x18b2 <__floatsisf+0x48>
    18ae:	96 e9       	ldi	r25, 0x96	; 150
    18b0:	11 c0       	rjmp	.+34     	; 0x18d4 <__floatsisf+0x6a>
    18b2:	77 23       	and	r23, r23
    18b4:	21 f0       	breq	.+8      	; 0x18be <__floatsisf+0x54>
    18b6:	9e e8       	ldi	r25, 0x8E	; 142
    18b8:	87 2f       	mov	r24, r23
    18ba:	76 2f       	mov	r23, r22
    18bc:	05 c0       	rjmp	.+10     	; 0x18c8 <__floatsisf+0x5e>
    18be:	66 23       	and	r22, r22
    18c0:	71 f0       	breq	.+28     	; 0x18de <__floatsisf+0x74>
    18c2:	96 e8       	ldi	r25, 0x86	; 134
    18c4:	86 2f       	mov	r24, r22
    18c6:	70 e0       	ldi	r23, 0x00	; 0
    18c8:	60 e0       	ldi	r22, 0x00	; 0
    18ca:	2a f0       	brmi	.+10     	; 0x18d6 <__floatsisf+0x6c>
    18cc:	9a 95       	dec	r25
    18ce:	66 0f       	add	r22, r22
    18d0:	77 1f       	adc	r23, r23
    18d2:	88 1f       	adc	r24, r24
    18d4:	da f7       	brpl	.-10     	; 0x18cc <__floatsisf+0x62>
    18d6:	88 0f       	add	r24, r24
    18d8:	96 95       	lsr	r25
    18da:	87 95       	ror	r24
    18dc:	97 f9       	bld	r25, 7
    18de:	08 95       	ret

000018e0 <__fp_inf>:
    18e0:	97 f9       	bld	r25, 7
    18e2:	9f 67       	ori	r25, 0x7F	; 127
    18e4:	80 e8       	ldi	r24, 0x80	; 128
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	08 95       	ret

000018ec <__fp_nan>:
    18ec:	9f ef       	ldi	r25, 0xFF	; 255
    18ee:	80 ec       	ldi	r24, 0xC0	; 192
    18f0:	08 95       	ret

000018f2 <__fp_pscA>:
    18f2:	00 24       	eor	r0, r0
    18f4:	0a 94       	dec	r0
    18f6:	16 16       	cp	r1, r22
    18f8:	17 06       	cpc	r1, r23
    18fa:	18 06       	cpc	r1, r24
    18fc:	09 06       	cpc	r0, r25
    18fe:	08 95       	ret

00001900 <__fp_pscB>:
    1900:	00 24       	eor	r0, r0
    1902:	0a 94       	dec	r0
    1904:	12 16       	cp	r1, r18
    1906:	13 06       	cpc	r1, r19
    1908:	14 06       	cpc	r1, r20
    190a:	05 06       	cpc	r0, r21
    190c:	08 95       	ret

0000190e <__fp_round>:
    190e:	09 2e       	mov	r0, r25
    1910:	03 94       	inc	r0
    1912:	00 0c       	add	r0, r0
    1914:	11 f4       	brne	.+4      	; 0x191a <__fp_round+0xc>
    1916:	88 23       	and	r24, r24
    1918:	52 f0       	brmi	.+20     	; 0x192e <__fp_round+0x20>
    191a:	bb 0f       	add	r27, r27
    191c:	40 f4       	brcc	.+16     	; 0x192e <__fp_round+0x20>
    191e:	bf 2b       	or	r27, r31
    1920:	11 f4       	brne	.+4      	; 0x1926 <__fp_round+0x18>
    1922:	60 ff       	sbrs	r22, 0
    1924:	04 c0       	rjmp	.+8      	; 0x192e <__fp_round+0x20>
    1926:	6f 5f       	subi	r22, 0xFF	; 255
    1928:	7f 4f       	sbci	r23, 0xFF	; 255
    192a:	8f 4f       	sbci	r24, 0xFF	; 255
    192c:	9f 4f       	sbci	r25, 0xFF	; 255
    192e:	08 95       	ret

00001930 <__fp_split3>:
    1930:	57 fd       	sbrc	r21, 7
    1932:	90 58       	subi	r25, 0x80	; 128
    1934:	44 0f       	add	r20, r20
    1936:	55 1f       	adc	r21, r21
    1938:	59 f0       	breq	.+22     	; 0x1950 <__fp_splitA+0x10>
    193a:	5f 3f       	cpi	r21, 0xFF	; 255
    193c:	71 f0       	breq	.+28     	; 0x195a <__fp_splitA+0x1a>
    193e:	47 95       	ror	r20

00001940 <__fp_splitA>:
    1940:	88 0f       	add	r24, r24
    1942:	97 fb       	bst	r25, 7
    1944:	99 1f       	adc	r25, r25
    1946:	61 f0       	breq	.+24     	; 0x1960 <__fp_splitA+0x20>
    1948:	9f 3f       	cpi	r25, 0xFF	; 255
    194a:	79 f0       	breq	.+30     	; 0x196a <__fp_splitA+0x2a>
    194c:	87 95       	ror	r24
    194e:	08 95       	ret
    1950:	12 16       	cp	r1, r18
    1952:	13 06       	cpc	r1, r19
    1954:	14 06       	cpc	r1, r20
    1956:	55 1f       	adc	r21, r21
    1958:	f2 cf       	rjmp	.-28     	; 0x193e <__fp_split3+0xe>
    195a:	46 95       	lsr	r20
    195c:	f1 df       	rcall	.-30     	; 0x1940 <__fp_splitA>
    195e:	08 c0       	rjmp	.+16     	; 0x1970 <__fp_splitA+0x30>
    1960:	16 16       	cp	r1, r22
    1962:	17 06       	cpc	r1, r23
    1964:	18 06       	cpc	r1, r24
    1966:	99 1f       	adc	r25, r25
    1968:	f1 cf       	rjmp	.-30     	; 0x194c <__fp_splitA+0xc>
    196a:	86 95       	lsr	r24
    196c:	71 05       	cpc	r23, r1
    196e:	61 05       	cpc	r22, r1
    1970:	08 94       	sec
    1972:	08 95       	ret

00001974 <__fp_zero>:
    1974:	e8 94       	clt

00001976 <__fp_szero>:
    1976:	bb 27       	eor	r27, r27
    1978:	66 27       	eor	r22, r22
    197a:	77 27       	eor	r23, r23
    197c:	cb 01       	movw	r24, r22
    197e:	97 f9       	bld	r25, 7
    1980:	08 95       	ret

00001982 <__mulsf3>:
    1982:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__mulsf3x>
    1986:	0c 94 87 0c 	jmp	0x190e	; 0x190e <__fp_round>
    198a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__fp_pscA>
    198e:	38 f0       	brcs	.+14     	; 0x199e <__mulsf3+0x1c>
    1990:	0e 94 80 0c 	call	0x1900	; 0x1900 <__fp_pscB>
    1994:	20 f0       	brcs	.+8      	; 0x199e <__mulsf3+0x1c>
    1996:	95 23       	and	r25, r21
    1998:	11 f0       	breq	.+4      	; 0x199e <__mulsf3+0x1c>
    199a:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__fp_inf>
    199e:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__fp_nan>
    19a2:	11 24       	eor	r1, r1
    19a4:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__fp_szero>

000019a8 <__mulsf3x>:
    19a8:	0e 94 98 0c 	call	0x1930	; 0x1930 <__fp_split3>
    19ac:	70 f3       	brcs	.-36     	; 0x198a <__mulsf3+0x8>

000019ae <__mulsf3_pse>:
    19ae:	95 9f       	mul	r25, r21
    19b0:	c1 f3       	breq	.-16     	; 0x19a2 <__mulsf3+0x20>
    19b2:	95 0f       	add	r25, r21
    19b4:	50 e0       	ldi	r21, 0x00	; 0
    19b6:	55 1f       	adc	r21, r21
    19b8:	62 9f       	mul	r22, r18
    19ba:	f0 01       	movw	r30, r0
    19bc:	72 9f       	mul	r23, r18
    19be:	bb 27       	eor	r27, r27
    19c0:	f0 0d       	add	r31, r0
    19c2:	b1 1d       	adc	r27, r1
    19c4:	63 9f       	mul	r22, r19
    19c6:	aa 27       	eor	r26, r26
    19c8:	f0 0d       	add	r31, r0
    19ca:	b1 1d       	adc	r27, r1
    19cc:	aa 1f       	adc	r26, r26
    19ce:	64 9f       	mul	r22, r20
    19d0:	66 27       	eor	r22, r22
    19d2:	b0 0d       	add	r27, r0
    19d4:	a1 1d       	adc	r26, r1
    19d6:	66 1f       	adc	r22, r22
    19d8:	82 9f       	mul	r24, r18
    19da:	22 27       	eor	r18, r18
    19dc:	b0 0d       	add	r27, r0
    19de:	a1 1d       	adc	r26, r1
    19e0:	62 1f       	adc	r22, r18
    19e2:	73 9f       	mul	r23, r19
    19e4:	b0 0d       	add	r27, r0
    19e6:	a1 1d       	adc	r26, r1
    19e8:	62 1f       	adc	r22, r18
    19ea:	83 9f       	mul	r24, r19
    19ec:	a0 0d       	add	r26, r0
    19ee:	61 1d       	adc	r22, r1
    19f0:	22 1f       	adc	r18, r18
    19f2:	74 9f       	mul	r23, r20
    19f4:	33 27       	eor	r19, r19
    19f6:	a0 0d       	add	r26, r0
    19f8:	61 1d       	adc	r22, r1
    19fa:	23 1f       	adc	r18, r19
    19fc:	84 9f       	mul	r24, r20
    19fe:	60 0d       	add	r22, r0
    1a00:	21 1d       	adc	r18, r1
    1a02:	82 2f       	mov	r24, r18
    1a04:	76 2f       	mov	r23, r22
    1a06:	6a 2f       	mov	r22, r26
    1a08:	11 24       	eor	r1, r1
    1a0a:	9f 57       	subi	r25, 0x7F	; 127
    1a0c:	50 40       	sbci	r21, 0x00	; 0
    1a0e:	9a f0       	brmi	.+38     	; 0x1a36 <__mulsf3_pse+0x88>
    1a10:	f1 f0       	breq	.+60     	; 0x1a4e <__mulsf3_pse+0xa0>
    1a12:	88 23       	and	r24, r24
    1a14:	4a f0       	brmi	.+18     	; 0x1a28 <__mulsf3_pse+0x7a>
    1a16:	ee 0f       	add	r30, r30
    1a18:	ff 1f       	adc	r31, r31
    1a1a:	bb 1f       	adc	r27, r27
    1a1c:	66 1f       	adc	r22, r22
    1a1e:	77 1f       	adc	r23, r23
    1a20:	88 1f       	adc	r24, r24
    1a22:	91 50       	subi	r25, 0x01	; 1
    1a24:	50 40       	sbci	r21, 0x00	; 0
    1a26:	a9 f7       	brne	.-22     	; 0x1a12 <__mulsf3_pse+0x64>
    1a28:	9e 3f       	cpi	r25, 0xFE	; 254
    1a2a:	51 05       	cpc	r21, r1
    1a2c:	80 f0       	brcs	.+32     	; 0x1a4e <__mulsf3_pse+0xa0>
    1a2e:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__fp_inf>
    1a32:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__fp_szero>
    1a36:	5f 3f       	cpi	r21, 0xFF	; 255
    1a38:	e4 f3       	brlt	.-8      	; 0x1a32 <__mulsf3_pse+0x84>
    1a3a:	98 3e       	cpi	r25, 0xE8	; 232
    1a3c:	d4 f3       	brlt	.-12     	; 0x1a32 <__mulsf3_pse+0x84>
    1a3e:	86 95       	lsr	r24
    1a40:	77 95       	ror	r23
    1a42:	67 95       	ror	r22
    1a44:	b7 95       	ror	r27
    1a46:	f7 95       	ror	r31
    1a48:	e7 95       	ror	r30
    1a4a:	9f 5f       	subi	r25, 0xFF	; 255
    1a4c:	c1 f7       	brne	.-16     	; 0x1a3e <__mulsf3_pse+0x90>
    1a4e:	fe 2b       	or	r31, r30
    1a50:	88 0f       	add	r24, r24
    1a52:	91 1d       	adc	r25, r1
    1a54:	96 95       	lsr	r25
    1a56:	87 95       	ror	r24
    1a58:	97 f9       	bld	r25, 7
    1a5a:	08 95       	ret

00001a5c <__divmodsi4>:
    1a5c:	05 2e       	mov	r0, r21
    1a5e:	97 fb       	bst	r25, 7
    1a60:	1e f4       	brtc	.+6      	; 0x1a68 <__divmodsi4+0xc>
    1a62:	00 94       	com	r0
    1a64:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__negsi2>
    1a68:	57 fd       	sbrc	r21, 7
    1a6a:	07 d0       	rcall	.+14     	; 0x1a7a <__divmodsi4_neg2>
    1a6c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__udivmodsi4>
    1a70:	07 fc       	sbrc	r0, 7
    1a72:	03 d0       	rcall	.+6      	; 0x1a7a <__divmodsi4_neg2>
    1a74:	4e f4       	brtc	.+18     	; 0x1a88 <__divmodsi4_exit>
    1a76:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <__negsi2>

00001a7a <__divmodsi4_neg2>:
    1a7a:	50 95       	com	r21
    1a7c:	40 95       	com	r20
    1a7e:	30 95       	com	r19
    1a80:	21 95       	neg	r18
    1a82:	3f 4f       	sbci	r19, 0xFF	; 255
    1a84:	4f 4f       	sbci	r20, 0xFF	; 255
    1a86:	5f 4f       	sbci	r21, 0xFF	; 255

00001a88 <__divmodsi4_exit>:
    1a88:	08 95       	ret

00001a8a <__negsi2>:
    1a8a:	90 95       	com	r25
    1a8c:	80 95       	com	r24
    1a8e:	70 95       	com	r23
    1a90:	61 95       	neg	r22
    1a92:	7f 4f       	sbci	r23, 0xFF	; 255
    1a94:	8f 4f       	sbci	r24, 0xFF	; 255
    1a96:	9f 4f       	sbci	r25, 0xFF	; 255
    1a98:	08 95       	ret

00001a9a <__umulhisi3>:
    1a9a:	a2 9f       	mul	r26, r18
    1a9c:	b0 01       	movw	r22, r0
    1a9e:	b3 9f       	mul	r27, r19
    1aa0:	c0 01       	movw	r24, r0
    1aa2:	a3 9f       	mul	r26, r19
    1aa4:	70 0d       	add	r23, r0
    1aa6:	81 1d       	adc	r24, r1
    1aa8:	11 24       	eor	r1, r1
    1aaa:	91 1d       	adc	r25, r1
    1aac:	b2 9f       	mul	r27, r18
    1aae:	70 0d       	add	r23, r0
    1ab0:	81 1d       	adc	r24, r1
    1ab2:	11 24       	eor	r1, r1
    1ab4:	91 1d       	adc	r25, r1
    1ab6:	08 95       	ret

00001ab8 <__udivmodsi4>:
    1ab8:	a1 e2       	ldi	r26, 0x21	; 33
    1aba:	1a 2e       	mov	r1, r26
    1abc:	aa 1b       	sub	r26, r26
    1abe:	bb 1b       	sub	r27, r27
    1ac0:	fd 01       	movw	r30, r26
    1ac2:	0d c0       	rjmp	.+26     	; 0x1ade <__udivmodsi4_ep>

00001ac4 <__udivmodsi4_loop>:
    1ac4:	aa 1f       	adc	r26, r26
    1ac6:	bb 1f       	adc	r27, r27
    1ac8:	ee 1f       	adc	r30, r30
    1aca:	ff 1f       	adc	r31, r31
    1acc:	a2 17       	cp	r26, r18
    1ace:	b3 07       	cpc	r27, r19
    1ad0:	e4 07       	cpc	r30, r20
    1ad2:	f5 07       	cpc	r31, r21
    1ad4:	20 f0       	brcs	.+8      	; 0x1ade <__udivmodsi4_ep>
    1ad6:	a2 1b       	sub	r26, r18
    1ad8:	b3 0b       	sbc	r27, r19
    1ada:	e4 0b       	sbc	r30, r20
    1adc:	f5 0b       	sbc	r31, r21

00001ade <__udivmodsi4_ep>:
    1ade:	66 1f       	adc	r22, r22
    1ae0:	77 1f       	adc	r23, r23
    1ae2:	88 1f       	adc	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	1a 94       	dec	r1
    1ae8:	69 f7       	brne	.-38     	; 0x1ac4 <__udivmodsi4_loop>
    1aea:	60 95       	com	r22
    1aec:	70 95       	com	r23
    1aee:	80 95       	com	r24
    1af0:	90 95       	com	r25
    1af2:	9b 01       	movw	r18, r22
    1af4:	ac 01       	movw	r20, r24
    1af6:	bd 01       	movw	r22, r26
    1af8:	cf 01       	movw	r24, r30
    1afa:	08 95       	ret

00001afc <_exit>:
    1afc:	f8 94       	cli

00001afe <__stop_program>:
    1afe:	ff cf       	rjmp	.-2      	; 0x1afe <__stop_program>
