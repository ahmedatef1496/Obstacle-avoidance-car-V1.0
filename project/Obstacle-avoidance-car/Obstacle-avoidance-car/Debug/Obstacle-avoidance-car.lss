
Obstacle-avoidance-car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001294  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00001294  00001328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800070  00800070  00001338  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003354  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc1  00000000  00000000  00004a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c83  00000000  00000000  00005a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a00  00000000  00000000  000076b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001204  00000000  00000000  000080b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002681  00000000  00000000  000092b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  0000b939  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__vector_1>
       8:	0c 94 99 04 	jmp	0x932	; 0x932 <__vector_2>
       c:	0c 94 c2 04 	jmp	0x984	; 0x984 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__vector_5>
      18:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__vector_8>
      24:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <main>
      8a:	0c 94 48 09 	jmp	0x1290	; 0x1290 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:
 *  Author: atef
 */ 
#include "app.h"
void app_init()
{   
	LCD_PinsInit();
      92:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_PinsInit>
	LCD_Init();
      96:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Init>
	GLOBALE_ENABLE();
      9a:	78 94       	sei
	pwm_init();
      9c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <pwm_init>
	Car_Motors_init();
      a0:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Car_Motors_init>
	LCD_Init();
      a4:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Init>
	KEYPAD_init();
      a8:	0e 94 76 00 	call	0xec	; 0xec <KEYPAD_init>
	DIO_initpin(PIND6,INPULL);
      ac:	62 e0       	ldi	r22, 0x02	; 2
      ae:	8e e1       	ldi	r24, 0x1E	; 30
      b0:	0e 94 83 02 	call	0x506	; 0x506 <DIO_initpin>
      b4:	08 95       	ret

000000b6 <pwm_test>:
u8 X ;

void pwm_test()
{       
	
	PWM_set_duty(90,100);
      b6:	44 e6       	ldi	r20, 0x64	; 100
      b8:	50 e0       	ldi	r21, 0x00	; 0
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	70 e0       	ldi	r23, 0x00	; 0
      be:	8a e5       	ldi	r24, 0x5A	; 90
      c0:	0e 94 4c 05 	call	0xa98	; 0xa98 <PWM_set_duty>
	timer_start(TIMER0_SCALER_8);
      c4:	82 e0       	ldi	r24, 0x02	; 2
      c6:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <timer_start>
	Car_Moving_FWD();
      ca:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <Car_Moving_FWD>
      ce:	08 95       	ret

000000d0 <app_start>:
	
}
void app_start()
{
	KEYPAD_getpressedkey(&X);
      d0:	84 e9       	ldi	r24, 0x94	; 148
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	0e 94 90 00 	call	0x120	; 0x120 <KEYPAD_getpressedkey>
	LCD_Clear();
      d8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_Clear>
	LCD_WriteNumber(X);
      dc:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <X>
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_WriteNumber>
      ea:	08 95       	ret

000000ec <KEYPAD_init>:
		{BUTTON7, BUTTON8, BUTTON9}};
			
KEYPAD_initError KEYPAD_init(void){
	
	/*Set Column Initial Values to 1 */
	DIO_writepin (COL_1,HIGH);
      ec:	61 e0       	ldi	r22, 0x01	; 1
      ee:	88 e1       	ldi	r24, 0x18	; 24
      f0:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
	DIO_writepin (COL_2,HIGH);
      f4:	61 e0       	ldi	r22, 0x01	; 1
      f6:	89 e1       	ldi	r24, 0x19	; 25
      f8:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
	DIO_writepin (COL_3,HIGH);
      fc:	61 e0       	ldi	r22, 0x01	; 1
      fe:	8a e1       	ldi	r24, 0x1A	; 26
     100:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
	
	/* Enable Pull Up Resistors at Input Rows */
	DIO_writepin (ROW_1,HIGH);
     104:	61 e0       	ldi	r22, 0x01	; 1
     106:	8b e1       	ldi	r24, 0x1B	; 27
     108:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
	DIO_writepin (ROW_2,HIGH);
     10c:	61 e0       	ldi	r22, 0x01	; 1
     10e:	8c e1       	ldi	r24, 0x1C	; 28
     110:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
	DIO_writepin (ROW_3,HIGH);
     114:	61 e0       	ldi	r22, 0x01	; 1
     116:	8d e1       	ldi	r24, 0x1D	; 29
     118:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
	
	return KEYPAD_initSuccess;
	
}
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	08 95       	ret

00000120 <KEYPAD_getpressedkey>:


KEYPAD_readError KEYPAD_getpressedkey(u8 *value){
     120:	cf 92       	push	r12
     122:	df 92       	push	r13
     124:	ef 92       	push	r14
     126:	ff 92       	push	r15
     128:	0f 93       	push	r16
     12a:	1f 93       	push	r17
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	8c 01       	movw	r16, r24

	// Scan all keypad rows
	for (u8 counter_row = 0; counter_row < KEYPAD_ROWS; counter_row++)
     132:	d0 e0       	ldi	r29, 0x00	; 0
     134:	39 c0       	rjmp	.+114    	; 0x1a8 <KEYPAD_getpressedkey+0x88>
	{
		 // set current column pin low to test all row pins to find out which button has been pressed
		DIO_writepin (Row_Arr[counter_row],LOW);
     136:	cd 2e       	mov	r12, r29
     138:	d1 2c       	mov	r13, r1
     13a:	f6 01       	movw	r30, r12
     13c:	e0 5a       	subi	r30, 0xA0	; 160
     13e:	ff 4f       	sbci	r31, 0xFF	; 255
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
		
		//scan and test all keypad columns pins
		 for (u8 counter_col = 0; counter_col < KEYPAD_COLUMNS; counter_col++)
     148:	c0 e0       	ldi	r28, 0x00	; 0
     14a:	24 c0       	rjmp	.+72     	; 0x194 <KEYPAD_getpressedkey+0x74>
		 {
			 
			 // check col value if it is 0 then this column and row is connected
			 DIO_readpin (Col_Arr[counter_col],value);
     14c:	ec 2e       	mov	r14, r28
     14e:	f1 2c       	mov	r15, r1
     150:	f7 01       	movw	r30, r14
     152:	ed 59       	subi	r30, 0x9D	; 157
     154:	ff 4f       	sbci	r31, 0xFF	; 255
     156:	b8 01       	movw	r22, r16
     158:	80 81       	ld	r24, Z
     15a:	0e 94 29 04 	call	0x852	; 0x852 <DIO_readpin>
			 
			 if(*value == 0){
     15e:	f8 01       	movw	r30, r16
     160:	80 81       	ld	r24, Z
     162:	81 11       	cpse	r24, r1
     164:	16 c0       	rjmp	.+44     	; 0x192 <KEYPAD_getpressedkey+0x72>
				 
				 *value= Button_Arr[counter_row][counter_col];
     166:	c6 01       	movw	r24, r12
     168:	88 0f       	add	r24, r24
     16a:	99 1f       	adc	r25, r25
     16c:	8c 0d       	add	r24, r12
     16e:	9d 1d       	adc	r25, r13
     170:	8a 59       	subi	r24, 0x9A	; 154
     172:	9f 4f       	sbci	r25, 0xFF	; 255
     174:	fc 01       	movw	r30, r24
     176:	ee 0d       	add	r30, r14
     178:	ff 1d       	adc	r31, r15
     17a:	80 81       	ld	r24, Z
     17c:	f8 01       	movw	r30, r16
     17e:	80 83       	st	Z, r24
				 DIO_writepin (Row_Arr[counter_row],HIGH);
     180:	f6 01       	movw	r30, r12
     182:	e0 5a       	subi	r30, 0xA0	; 160
     184:	ff 4f       	sbci	r31, 0xFF	; 255
     186:	61 e0       	ldi	r22, 0x01	; 1
     188:	80 81       	ld	r24, Z
     18a:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
				  return KEYPAD_readSuccess;
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	0e c0       	rjmp	.+28     	; 0x1ae <KEYPAD_getpressedkey+0x8e>
	{
		 // set current column pin low to test all row pins to find out which button has been pressed
		DIO_writepin (Row_Arr[counter_row],LOW);
		
		//scan and test all keypad columns pins
		 for (u8 counter_col = 0; counter_col < KEYPAD_COLUMNS; counter_col++)
     192:	cf 5f       	subi	r28, 0xFF	; 255
     194:	c3 30       	cpi	r28, 0x03	; 3
     196:	d0 f2       	brcs	.-76     	; 0x14c <KEYPAD_getpressedkey+0x2c>
			 }

		}
		
		// set current row pin HIGH again
		DIO_writepin (Row_Arr[counter_row],HIGH);
     198:	f6 01       	movw	r30, r12
     19a:	e0 5a       	subi	r30, 0xA0	; 160
     19c:	ff 4f       	sbci	r31, 0xFF	; 255
     19e:	61 e0       	ldi	r22, 0x01	; 1
     1a0:	80 81       	ld	r24, Z
     1a2:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>


KEYPAD_readError KEYPAD_getpressedkey(u8 *value){

	// Scan all keypad rows
	for (u8 counter_row = 0; counter_row < KEYPAD_ROWS; counter_row++)
     1a6:	df 5f       	subi	r29, 0xFF	; 255
     1a8:	d3 30       	cpi	r29, 0x03	; 3
     1aa:	28 f2       	brcs	.-118    	; 0x136 <KEYPAD_getpressedkey+0x16>
		// set current row pin HIGH again
		DIO_writepin (Row_Arr[counter_row],HIGH);

	}
	
	return KEYPAD_readFail;
     1ac:	81 e0       	ldi	r24, 0x01	; 1

}
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	1f 91       	pop	r17
     1b4:	0f 91       	pop	r16
     1b6:	ff 90       	pop	r15
     1b8:	ef 90       	pop	r14
     1ba:	df 90       	pop	r13
     1bc:	cf 90       	pop	r12
     1be:	08 95       	ret

000001c0 <WriteIns>:
	for(u8 i=0;i<8;i++)
	{
		WriteData(pattern[i]);
	}
	WriteIns(0x80);
}
     1c0:	cf 93       	push	r28
     1c2:	c8 2f       	mov	r28, r24
     1c4:	60 e0       	ldi	r22, 0x00	; 0
     1c6:	81 e1       	ldi	r24, 0x11	; 17
     1c8:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     1cc:	6c 2f       	mov	r22, r28
     1ce:	66 1f       	adc	r22, r22
     1d0:	66 27       	eor	r22, r22
     1d2:	66 1f       	adc	r22, r22
     1d4:	87 e1       	ldi	r24, 0x17	; 23
     1d6:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     1da:	c6 fb       	bst	r28, 6
     1dc:	66 27       	eor	r22, r22
     1de:	60 f9       	bld	r22, 0
     1e0:	86 e1       	ldi	r24, 0x16	; 22
     1e2:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     1e6:	c5 fb       	bst	r28, 5
     1e8:	66 27       	eor	r22, r22
     1ea:	60 f9       	bld	r22, 0
     1ec:	85 e1       	ldi	r24, 0x15	; 21
     1ee:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     1f2:	c4 fb       	bst	r28, 4
     1f4:	66 27       	eor	r22, r22
     1f6:	60 f9       	bld	r22, 0
     1f8:	84 e1       	ldi	r24, 0x14	; 20
     1fa:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     1fe:	61 e0       	ldi	r22, 0x01	; 1
     200:	83 e1       	ldi	r24, 0x13	; 19
     202:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     206:	8f e9       	ldi	r24, 0x9F	; 159
     208:	9f e0       	ldi	r25, 0x0F	; 15
     20a:	01 97       	sbiw	r24, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <WriteIns+0x4a>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <WriteIns+0x50>
     210:	00 00       	nop
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	83 e1       	ldi	r24, 0x13	; 19
     216:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     21a:	8f e9       	ldi	r24, 0x9F	; 159
     21c:	9f e0       	ldi	r25, 0x0F	; 15
     21e:	01 97       	sbiw	r24, 0x01	; 1
     220:	f1 f7       	brne	.-4      	; 0x21e <WriteIns+0x5e>
     222:	00 c0       	rjmp	.+0      	; 0x224 <WriteIns+0x64>
     224:	00 00       	nop
     226:	c3 fb       	bst	r28, 3
     228:	66 27       	eor	r22, r22
     22a:	60 f9       	bld	r22, 0
     22c:	87 e1       	ldi	r24, 0x17	; 23
     22e:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     232:	c2 fb       	bst	r28, 2
     234:	66 27       	eor	r22, r22
     236:	60 f9       	bld	r22, 0
     238:	86 e1       	ldi	r24, 0x16	; 22
     23a:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     23e:	c1 fb       	bst	r28, 1
     240:	66 27       	eor	r22, r22
     242:	60 f9       	bld	r22, 0
     244:	85 e1       	ldi	r24, 0x15	; 21
     246:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     24a:	6c 2f       	mov	r22, r28
     24c:	61 70       	andi	r22, 0x01	; 1
     24e:	84 e1       	ldi	r24, 0x14	; 20
     250:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     254:	61 e0       	ldi	r22, 0x01	; 1
     256:	83 e1       	ldi	r24, 0x13	; 19
     258:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     25c:	8f e9       	ldi	r24, 0x9F	; 159
     25e:	9f e0       	ldi	r25, 0x0F	; 15
     260:	01 97       	sbiw	r24, 0x01	; 1
     262:	f1 f7       	brne	.-4      	; 0x260 <WriteIns+0xa0>
     264:	00 c0       	rjmp	.+0      	; 0x266 <WriteIns+0xa6>
     266:	00 00       	nop
     268:	60 e0       	ldi	r22, 0x00	; 0
     26a:	83 e1       	ldi	r24, 0x13	; 19
     26c:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     270:	8f e9       	ldi	r24, 0x9F	; 159
     272:	9f e0       	ldi	r25, 0x0F	; 15
     274:	01 97       	sbiw	r24, 0x01	; 1
     276:	f1 f7       	brne	.-4      	; 0x274 <WriteIns+0xb4>
     278:	00 c0       	rjmp	.+0      	; 0x27a <WriteIns+0xba>
     27a:	00 00       	nop
     27c:	cf 91       	pop	r28
     27e:	08 95       	ret

00000280 <WriteData>:
     280:	cf 93       	push	r28
     282:	c8 2f       	mov	r28, r24
     284:	61 e0       	ldi	r22, 0x01	; 1
     286:	81 e1       	ldi	r24, 0x11	; 17
     288:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     28c:	6c 2f       	mov	r22, r28
     28e:	66 1f       	adc	r22, r22
     290:	66 27       	eor	r22, r22
     292:	66 1f       	adc	r22, r22
     294:	87 e1       	ldi	r24, 0x17	; 23
     296:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     29a:	c6 fb       	bst	r28, 6
     29c:	66 27       	eor	r22, r22
     29e:	60 f9       	bld	r22, 0
     2a0:	86 e1       	ldi	r24, 0x16	; 22
     2a2:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     2a6:	c5 fb       	bst	r28, 5
     2a8:	66 27       	eor	r22, r22
     2aa:	60 f9       	bld	r22, 0
     2ac:	85 e1       	ldi	r24, 0x15	; 21
     2ae:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     2b2:	c4 fb       	bst	r28, 4
     2b4:	66 27       	eor	r22, r22
     2b6:	60 f9       	bld	r22, 0
     2b8:	84 e1       	ldi	r24, 0x14	; 20
     2ba:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     2be:	61 e0       	ldi	r22, 0x01	; 1
     2c0:	83 e1       	ldi	r24, 0x13	; 19
     2c2:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     2c6:	8f e9       	ldi	r24, 0x9F	; 159
     2c8:	9f e0       	ldi	r25, 0x0F	; 15
     2ca:	01 97       	sbiw	r24, 0x01	; 1
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <WriteData+0x4a>
     2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <WriteData+0x50>
     2d0:	00 00       	nop
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	83 e1       	ldi	r24, 0x13	; 19
     2d6:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     2da:	8f e9       	ldi	r24, 0x9F	; 159
     2dc:	9f e0       	ldi	r25, 0x0F	; 15
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <WriteData+0x5e>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <WriteData+0x64>
     2e4:	00 00       	nop
     2e6:	c3 fb       	bst	r28, 3
     2e8:	66 27       	eor	r22, r22
     2ea:	60 f9       	bld	r22, 0
     2ec:	87 e1       	ldi	r24, 0x17	; 23
     2ee:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     2f2:	c2 fb       	bst	r28, 2
     2f4:	66 27       	eor	r22, r22
     2f6:	60 f9       	bld	r22, 0
     2f8:	86 e1       	ldi	r24, 0x16	; 22
     2fa:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     2fe:	c1 fb       	bst	r28, 1
     300:	66 27       	eor	r22, r22
     302:	60 f9       	bld	r22, 0
     304:	85 e1       	ldi	r24, 0x15	; 21
     306:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     30a:	6c 2f       	mov	r22, r28
     30c:	61 70       	andi	r22, 0x01	; 1
     30e:	84 e1       	ldi	r24, 0x14	; 20
     310:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     314:	61 e0       	ldi	r22, 0x01	; 1
     316:	83 e1       	ldi	r24, 0x13	; 19
     318:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     31c:	8f e9       	ldi	r24, 0x9F	; 159
     31e:	9f e0       	ldi	r25, 0x0F	; 15
     320:	01 97       	sbiw	r24, 0x01	; 1
     322:	f1 f7       	brne	.-4      	; 0x320 <WriteData+0xa0>
     324:	00 c0       	rjmp	.+0      	; 0x326 <WriteData+0xa6>
     326:	00 00       	nop
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	83 e1       	ldi	r24, 0x13	; 19
     32c:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     330:	8f e9       	ldi	r24, 0x9F	; 159
     332:	9f e0       	ldi	r25, 0x0F	; 15
     334:	01 97       	sbiw	r24, 0x01	; 1
     336:	f1 f7       	brne	.-4      	; 0x334 <WriteData+0xb4>
     338:	00 c0       	rjmp	.+0      	; 0x33a <WriteData+0xba>
     33a:	00 00       	nop
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <LCD_Init>:
     340:	2f ef       	ldi	r18, 0xFF	; 255
     342:	80 e7       	ldi	r24, 0x70	; 112
     344:	92 e0       	ldi	r25, 0x02	; 2
     346:	21 50       	subi	r18, 0x01	; 1
     348:	80 40       	sbci	r24, 0x00	; 0
     34a:	90 40       	sbci	r25, 0x00	; 0
     34c:	e1 f7       	brne	.-8      	; 0x346 <LCD_Init+0x6>
     34e:	00 c0       	rjmp	.+0      	; 0x350 <LCD_Init+0x10>
     350:	00 00       	nop
     352:	82 e0       	ldi	r24, 0x02	; 2
     354:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <WriteIns>
     358:	88 e2       	ldi	r24, 0x28	; 40
     35a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <WriteIns>
     35e:	8c e0       	ldi	r24, 0x0C	; 12
     360:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <WriteIns>
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <WriteIns>
     36a:	8f e9       	ldi	r24, 0x9F	; 159
     36c:	9f e0       	ldi	r25, 0x0F	; 15
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	f1 f7       	brne	.-4      	; 0x36e <LCD_Init+0x2e>
     372:	00 c0       	rjmp	.+0      	; 0x374 <LCD_Init+0x34>
     374:	00 00       	nop
     376:	86 e0       	ldi	r24, 0x06	; 6
     378:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <WriteIns>
     37c:	08 95       	ret

0000037e <LCD_WriteChar>:
     37e:	0e 94 40 01 	call	0x280	; 0x280 <WriteData>
     382:	08 95       	ret

00000384 <LCD_SetCursor>:
     384:	81 11       	cpse	r24, r1
     386:	05 c0       	rjmp	.+10     	; 0x392 <LCD_SetCursor+0xe>
     388:	86 2f       	mov	r24, r22
     38a:	80 68       	ori	r24, 0x80	; 128
     38c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <WriteIns>
     390:	08 95       	ret
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	21 f4       	brne	.+8      	; 0x39e <LCD_SetCursor+0x1a>
     396:	80 ec       	ldi	r24, 0xC0	; 192
     398:	86 0f       	add	r24, r22
     39a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <WriteIns>
     39e:	08 95       	ret

000003a0 <LCD_Clear>:
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <WriteIns>
     3a6:	8f e9       	ldi	r24, 0x9F	; 159
     3a8:	9f e0       	ldi	r25, 0x0F	; 15
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <LCD_Clear+0xa>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <LCD_Clear+0x10>
     3b0:	00 00       	nop
     3b2:	08 95       	ret

000003b4 <LCD_WriteNumber>:
     3b4:	cf 92       	push	r12
     3b6:	df 92       	push	r13
     3b8:	ef 92       	push	r14
     3ba:	ff 92       	push	r15
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	2a 97       	sbiw	r28, 0x0a	; 10
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
     3d2:	6b 01       	movw	r12, r22
     3d4:	7c 01       	movw	r14, r24
     3d6:	61 15       	cp	r22, r1
     3d8:	71 05       	cpc	r23, r1
     3da:	81 05       	cpc	r24, r1
     3dc:	91 05       	cpc	r25, r1
     3de:	21 f4       	brne	.+8      	; 0x3e8 <LCD_WriteNumber+0x34>
     3e0:	80 e3       	ldi	r24, 0x30	; 48
     3e2:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_WriteChar>
     3e6:	39 c0       	rjmp	.+114    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     3e8:	99 23       	and	r25, r25
     3ea:	5c f4       	brge	.+22     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     3ec:	f0 94       	com	r15
     3ee:	e0 94       	com	r14
     3f0:	d0 94       	com	r13
     3f2:	c0 94       	com	r12
     3f4:	c1 1c       	adc	r12, r1
     3f6:	d1 1c       	adc	r13, r1
     3f8:	e1 1c       	adc	r14, r1
     3fa:	f1 1c       	adc	r15, r1
     3fc:	8d e2       	ldi	r24, 0x2D	; 45
     3fe:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_WriteChar>
     402:	10 e0       	ldi	r17, 0x00	; 0
     404:	15 c0       	rjmp	.+42     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     406:	c7 01       	movw	r24, r14
     408:	b6 01       	movw	r22, r12
     40a:	2a e0       	ldi	r18, 0x0A	; 10
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	40 e0       	ldi	r20, 0x00	; 0
     410:	50 e0       	ldi	r21, 0x00	; 0
     412:	0e 94 29 09 	call	0x1252	; 0x1252 <__divmodsi4>
     416:	e1 e0       	ldi	r30, 0x01	; 1
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	ec 0f       	add	r30, r28
     41c:	fd 1f       	adc	r31, r29
     41e:	e1 0f       	add	r30, r17
     420:	f1 1d       	adc	r31, r1
     422:	60 5d       	subi	r22, 0xD0	; 208
     424:	60 83       	st	Z, r22
     426:	1f 5f       	subi	r17, 0xFF	; 255
     428:	c2 2e       	mov	r12, r18
     42a:	d3 2e       	mov	r13, r19
     42c:	e4 2e       	mov	r14, r20
     42e:	f5 2e       	mov	r15, r21
     430:	c1 14       	cp	r12, r1
     432:	d1 04       	cpc	r13, r1
     434:	e1 04       	cpc	r14, r1
     436:	f1 04       	cpc	r15, r1
     438:	31 f7       	brne	.-52     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     43a:	0d c0       	rjmp	.+26     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     43c:	e1 2f       	mov	r30, r17
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	31 97       	sbiw	r30, 0x01	; 1
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	8c 0f       	add	r24, r28
     448:	9d 1f       	adc	r25, r29
     44a:	e8 0f       	add	r30, r24
     44c:	f9 1f       	adc	r31, r25
     44e:	80 81       	ld	r24, Z
     450:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_WriteChar>
     454:	11 50       	subi	r17, 0x01	; 1
     456:	11 11       	cpse	r17, r1
     458:	f1 cf       	rjmp	.-30     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     45a:	2a 96       	adiw	r28, 0x0a	; 10
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	f8 94       	cli
     460:	de bf       	out	0x3e, r29	; 62
     462:	0f be       	out	0x3f, r0	; 63
     464:	cd bf       	out	0x3d, r28	; 61
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	1f 91       	pop	r17
     46c:	ff 90       	pop	r15
     46e:	ef 90       	pop	r14
     470:	df 90       	pop	r13
     472:	cf 90       	pop	r12
     474:	08 95       	ret

00000476 <LCD_PinsInit>:
   void LCD_PinsInit ()
   {
	   DIO_initpin(RS,OUTPUT);
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	81 e1       	ldi	r24, 0x11	; 17
     47a:	0e 94 83 02 	call	0x506	; 0x506 <DIO_initpin>
	   DIO_initpin(EN,OUTPUT);
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	83 e1       	ldi	r24, 0x13	; 19
     482:	0e 94 83 02 	call	0x506	; 0x506 <DIO_initpin>
	   DIO_initpin(RW,OUTPUT);
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	82 e1       	ldi	r24, 0x12	; 18
     48a:	0e 94 83 02 	call	0x506	; 0x506 <DIO_initpin>
	   DIO_initpin(D4,OUTPUT);
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	84 e1       	ldi	r24, 0x14	; 20
     492:	0e 94 83 02 	call	0x506	; 0x506 <DIO_initpin>
	   DIO_initpin(D5,OUTPUT);
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	85 e1       	ldi	r24, 0x15	; 21
     49a:	0e 94 83 02 	call	0x506	; 0x506 <DIO_initpin>
	   DIO_initpin(D6,OUTPUT);
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	86 e1       	ldi	r24, 0x16	; 22
     4a2:	0e 94 83 02 	call	0x506	; 0x506 <DIO_initpin>
	   DIO_initpin(D7,OUTPUT);
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	87 e1       	ldi	r24, 0x17	; 23
     4aa:	0e 94 83 02 	call	0x506	; 0x506 <DIO_initpin>
     4ae:	08 95       	ret

000004b0 <Car_Motors_init>:
/**DESCRIPTION:-
  this function initializes the DIO pins connected to the motors to be output
  **/
en_MotorError_t Car_Motors_init (void)
{
	DIO_initpin(motor1_0,OUTPUT);
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	0e 94 83 02 	call	0x506	; 0x506 <DIO_initpin>
	DIO_initpin(motor1_1,OUTPUT);
     4b8:	60 e0       	ldi	r22, 0x00	; 0
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	0e 94 83 02 	call	0x506	; 0x506 <DIO_initpin>
	DIO_initpin(motor2_0,OUTPUT);
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	0e 94 83 02 	call	0x506	; 0x506 <DIO_initpin>
	DIO_initpin(motor2_1,OUTPUT);
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	83 e0       	ldi	r24, 0x03	; 3
     4cc:	0e 94 83 02 	call	0x506	; 0x506 <DIO_initpin>

	return motor_ok;
}
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	08 95       	ret

000004d4 <Car_Moving_FWD>:
/**DESCRIPTION:-
this function is used to drive the motor to move in the +VE direction which will lead the car to move FWD
**/
en_MotorError_t Car_Moving_FWD(void)
{
	DIO_writepin(motor1_0,LOW);          //this is used to provide voltage to the +ve pin of the motor 
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
	DIO_writepin(motor1_1,HIGH);           //this is used to provide the ground to the -ve pin of 
     4dc:	61 e0       	ldi	r22, 0x01	; 1
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
	DIO_writepin(motor2_0,LOW);
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	82 e0       	ldi	r24, 0x02	; 2
     4e8:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
	DIO_writepin(motor2_1,HIGH);
     4ec:	61 e0       	ldi	r22, 0x01	; 1
     4ee:	83 e0       	ldi	r24, 0x03	; 3
     4f0:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
	
	return motor_ok;

}
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	08 95       	ret

000004f8 <main>:
#include "APP/app.h"

int main(void)
{   
	
	 app_init();
     4f8:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
	 pwm_test();
     4fc:	0e 94 5b 00 	call	0xb6	; 0xb6 <pwm_test>

    while (1) 
    {
		app_start();
     500:	0e 94 68 00 	call	0xd0	; 0xd0 <app_start>
     504:	fd cf       	rjmp	.-6      	; 0x500 <main+0x8>

00000506 <DIO_initpin>:
	  DIO_Pin_type i;
	  for (i=PINA0; i<TOTAL_PINS; i++)
	  {
		  DIO_initpin(i,PinsStatusArray[i]);
	  }
  }
     506:	98 2f       	mov	r25, r24
     508:	96 95       	lsr	r25
     50a:	96 95       	lsr	r25
     50c:	96 95       	lsr	r25
     50e:	87 70       	andi	r24, 0x07	; 7
     510:	61 30       	cpi	r22, 0x01	; 1
     512:	09 f4       	brne	.+2      	; 0x516 <DIO_initpin+0x10>
     514:	59 c0       	rjmp	.+178    	; 0x5c8 <DIO_initpin+0xc2>
     516:	20 f0       	brcs	.+8      	; 0x520 <DIO_initpin+0x1a>
     518:	62 30       	cpi	r22, 0x02	; 2
     51a:	09 f4       	brne	.+2      	; 0x51e <DIO_initpin+0x18>
     51c:	a9 c0       	rjmp	.+338    	; 0x670 <DIO_initpin+0x16a>
     51e:	fc c0       	rjmp	.+504    	; 0x718 <DIO_initpin+0x212>
     520:	91 30       	cpi	r25, 0x01	; 1
     522:	c9 f0       	breq	.+50     	; 0x556 <DIO_initpin+0x50>
     524:	28 f0       	brcs	.+10     	; 0x530 <DIO_initpin+0x2a>
     526:	92 30       	cpi	r25, 0x02	; 2
     528:	49 f1       	breq	.+82     	; 0x57c <DIO_initpin+0x76>
     52a:	93 30       	cpi	r25, 0x03	; 3
     52c:	d1 f1       	breq	.+116    	; 0x5a2 <DIO_initpin+0x9c>
     52e:	f6 c0       	rjmp	.+492    	; 0x71c <DIO_initpin+0x216>
     530:	4a b3       	in	r20, 0x1a	; 26
     532:	21 e0       	ldi	r18, 0x01	; 1
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	b9 01       	movw	r22, r18
     538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_initpin+0x38>
     53a:	66 0f       	add	r22, r22
     53c:	77 1f       	adc	r23, r23
     53e:	8a 95       	dec	r24
     540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_initpin+0x34>
     542:	cb 01       	movw	r24, r22
     544:	94 2f       	mov	r25, r20
     546:	98 2b       	or	r25, r24
     548:	9a bb       	out	0x1a, r25	; 26
     54a:	9b b3       	in	r25, 0x1b	; 27
     54c:	80 95       	com	r24
     54e:	89 23       	and	r24, r25
     550:	8b bb       	out	0x1b, r24	; 27
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	08 95       	ret
     556:	47 b3       	in	r20, 0x17	; 23
     558:	21 e0       	ldi	r18, 0x01	; 1
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	b9 01       	movw	r22, r18
     55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_initpin+0x5e>
     560:	66 0f       	add	r22, r22
     562:	77 1f       	adc	r23, r23
     564:	8a 95       	dec	r24
     566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_initpin+0x5a>
     568:	cb 01       	movw	r24, r22
     56a:	94 2f       	mov	r25, r20
     56c:	98 2b       	or	r25, r24
     56e:	97 bb       	out	0x17, r25	; 23
     570:	98 b3       	in	r25, 0x18	; 24
     572:	80 95       	com	r24
     574:	89 23       	and	r24, r25
     576:	88 bb       	out	0x18, r24	; 24
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	08 95       	ret
     57c:	44 b3       	in	r20, 0x14	; 20
     57e:	21 e0       	ldi	r18, 0x01	; 1
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	b9 01       	movw	r22, r18
     584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_initpin+0x84>
     586:	66 0f       	add	r22, r22
     588:	77 1f       	adc	r23, r23
     58a:	8a 95       	dec	r24
     58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_initpin+0x80>
     58e:	cb 01       	movw	r24, r22
     590:	94 2f       	mov	r25, r20
     592:	98 2b       	or	r25, r24
     594:	94 bb       	out	0x14, r25	; 20
     596:	95 b3       	in	r25, 0x15	; 21
     598:	80 95       	com	r24
     59a:	89 23       	and	r24, r25
     59c:	85 bb       	out	0x15, r24	; 21
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	08 95       	ret
     5a2:	41 b3       	in	r20, 0x11	; 17
     5a4:	21 e0       	ldi	r18, 0x01	; 1
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	b9 01       	movw	r22, r18
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_initpin+0xaa>
     5ac:	66 0f       	add	r22, r22
     5ae:	77 1f       	adc	r23, r23
     5b0:	8a 95       	dec	r24
     5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_initpin+0xa6>
     5b4:	cb 01       	movw	r24, r22
     5b6:	94 2f       	mov	r25, r20
     5b8:	98 2b       	or	r25, r24
     5ba:	91 bb       	out	0x11, r25	; 17
     5bc:	92 b3       	in	r25, 0x12	; 18
     5be:	80 95       	com	r24
     5c0:	89 23       	and	r24, r25
     5c2:	82 bb       	out	0x12, r24	; 18
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	08 95       	ret
     5c8:	91 30       	cpi	r25, 0x01	; 1
     5ca:	c9 f0       	breq	.+50     	; 0x5fe <DIO_initpin+0xf8>
     5cc:	28 f0       	brcs	.+10     	; 0x5d8 <DIO_initpin+0xd2>
     5ce:	92 30       	cpi	r25, 0x02	; 2
     5d0:	49 f1       	breq	.+82     	; 0x624 <DIO_initpin+0x11e>
     5d2:	93 30       	cpi	r25, 0x03	; 3
     5d4:	d1 f1       	breq	.+116    	; 0x64a <DIO_initpin+0x144>
     5d6:	a4 c0       	rjmp	.+328    	; 0x720 <DIO_initpin+0x21a>
     5d8:	4a b3       	in	r20, 0x1a	; 26
     5da:	21 e0       	ldi	r18, 0x01	; 1
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	b9 01       	movw	r22, r18
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_initpin+0xe0>
     5e2:	66 0f       	add	r22, r22
     5e4:	77 1f       	adc	r23, r23
     5e6:	8a 95       	dec	r24
     5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <DIO_initpin+0xdc>
     5ea:	cb 01       	movw	r24, r22
     5ec:	80 95       	com	r24
     5ee:	94 2f       	mov	r25, r20
     5f0:	98 23       	and	r25, r24
     5f2:	9a bb       	out	0x1a, r25	; 26
     5f4:	9b b3       	in	r25, 0x1b	; 27
     5f6:	89 23       	and	r24, r25
     5f8:	8b bb       	out	0x1b, r24	; 27
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	08 95       	ret
     5fe:	47 b3       	in	r20, 0x17	; 23
     600:	21 e0       	ldi	r18, 0x01	; 1
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	b9 01       	movw	r22, r18
     606:	02 c0       	rjmp	.+4      	; 0x60c <DIO_initpin+0x106>
     608:	66 0f       	add	r22, r22
     60a:	77 1f       	adc	r23, r23
     60c:	8a 95       	dec	r24
     60e:	e2 f7       	brpl	.-8      	; 0x608 <DIO_initpin+0x102>
     610:	cb 01       	movw	r24, r22
     612:	80 95       	com	r24
     614:	94 2f       	mov	r25, r20
     616:	98 23       	and	r25, r24
     618:	97 bb       	out	0x17, r25	; 23
     61a:	98 b3       	in	r25, 0x18	; 24
     61c:	89 23       	and	r24, r25
     61e:	88 bb       	out	0x18, r24	; 24
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	08 95       	ret
     624:	44 b3       	in	r20, 0x14	; 20
     626:	21 e0       	ldi	r18, 0x01	; 1
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	b9 01       	movw	r22, r18
     62c:	02 c0       	rjmp	.+4      	; 0x632 <DIO_initpin+0x12c>
     62e:	66 0f       	add	r22, r22
     630:	77 1f       	adc	r23, r23
     632:	8a 95       	dec	r24
     634:	e2 f7       	brpl	.-8      	; 0x62e <DIO_initpin+0x128>
     636:	cb 01       	movw	r24, r22
     638:	80 95       	com	r24
     63a:	94 2f       	mov	r25, r20
     63c:	98 23       	and	r25, r24
     63e:	94 bb       	out	0x14, r25	; 20
     640:	95 b3       	in	r25, 0x15	; 21
     642:	89 23       	and	r24, r25
     644:	85 bb       	out	0x15, r24	; 21
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	08 95       	ret
     64a:	41 b3       	in	r20, 0x11	; 17
     64c:	21 e0       	ldi	r18, 0x01	; 1
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	b9 01       	movw	r22, r18
     652:	02 c0       	rjmp	.+4      	; 0x658 <DIO_initpin+0x152>
     654:	66 0f       	add	r22, r22
     656:	77 1f       	adc	r23, r23
     658:	8a 95       	dec	r24
     65a:	e2 f7       	brpl	.-8      	; 0x654 <DIO_initpin+0x14e>
     65c:	cb 01       	movw	r24, r22
     65e:	80 95       	com	r24
     660:	94 2f       	mov	r25, r20
     662:	98 23       	and	r25, r24
     664:	91 bb       	out	0x11, r25	; 17
     666:	92 b3       	in	r25, 0x12	; 18
     668:	89 23       	and	r24, r25
     66a:	82 bb       	out	0x12, r24	; 18
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	08 95       	ret
     670:	91 30       	cpi	r25, 0x01	; 1
     672:	c9 f0       	breq	.+50     	; 0x6a6 <DIO_initpin+0x1a0>
     674:	28 f0       	brcs	.+10     	; 0x680 <DIO_initpin+0x17a>
     676:	92 30       	cpi	r25, 0x02	; 2
     678:	49 f1       	breq	.+82     	; 0x6cc <DIO_initpin+0x1c6>
     67a:	93 30       	cpi	r25, 0x03	; 3
     67c:	d1 f1       	breq	.+116    	; 0x6f2 <DIO_initpin+0x1ec>
     67e:	52 c0       	rjmp	.+164    	; 0x724 <DIO_initpin+0x21e>
     680:	4a b3       	in	r20, 0x1a	; 26
     682:	21 e0       	ldi	r18, 0x01	; 1
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	b9 01       	movw	r22, r18
     688:	02 c0       	rjmp	.+4      	; 0x68e <DIO_initpin+0x188>
     68a:	66 0f       	add	r22, r22
     68c:	77 1f       	adc	r23, r23
     68e:	8a 95       	dec	r24
     690:	e2 f7       	brpl	.-8      	; 0x68a <DIO_initpin+0x184>
     692:	cb 01       	movw	r24, r22
     694:	96 2f       	mov	r25, r22
     696:	90 95       	com	r25
     698:	94 23       	and	r25, r20
     69a:	9a bb       	out	0x1a, r25	; 26
     69c:	9b b3       	in	r25, 0x1b	; 27
     69e:	89 2b       	or	r24, r25
     6a0:	8b bb       	out	0x1b, r24	; 27
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	08 95       	ret
     6a6:	47 b3       	in	r20, 0x17	; 23
     6a8:	21 e0       	ldi	r18, 0x01	; 1
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	b9 01       	movw	r22, r18
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_initpin+0x1ae>
     6b0:	66 0f       	add	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	8a 95       	dec	r24
     6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_initpin+0x1aa>
     6b8:	cb 01       	movw	r24, r22
     6ba:	96 2f       	mov	r25, r22
     6bc:	90 95       	com	r25
     6be:	94 23       	and	r25, r20
     6c0:	97 bb       	out	0x17, r25	; 23
     6c2:	98 b3       	in	r25, 0x18	; 24
     6c4:	89 2b       	or	r24, r25
     6c6:	88 bb       	out	0x18, r24	; 24
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	08 95       	ret
     6cc:	44 b3       	in	r20, 0x14	; 20
     6ce:	21 e0       	ldi	r18, 0x01	; 1
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	b9 01       	movw	r22, r18
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_initpin+0x1d4>
     6d6:	66 0f       	add	r22, r22
     6d8:	77 1f       	adc	r23, r23
     6da:	8a 95       	dec	r24
     6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_initpin+0x1d0>
     6de:	cb 01       	movw	r24, r22
     6e0:	96 2f       	mov	r25, r22
     6e2:	90 95       	com	r25
     6e4:	94 23       	and	r25, r20
     6e6:	94 bb       	out	0x14, r25	; 20
     6e8:	95 b3       	in	r25, 0x15	; 21
     6ea:	89 2b       	or	r24, r25
     6ec:	85 bb       	out	0x15, r24	; 21
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	08 95       	ret
     6f2:	41 b3       	in	r20, 0x11	; 17
     6f4:	21 e0       	ldi	r18, 0x01	; 1
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	b9 01       	movw	r22, r18
     6fa:	02 c0       	rjmp	.+4      	; 0x700 <DIO_initpin+0x1fa>
     6fc:	66 0f       	add	r22, r22
     6fe:	77 1f       	adc	r23, r23
     700:	8a 95       	dec	r24
     702:	e2 f7       	brpl	.-8      	; 0x6fc <DIO_initpin+0x1f6>
     704:	cb 01       	movw	r24, r22
     706:	96 2f       	mov	r25, r22
     708:	90 95       	com	r25
     70a:	94 23       	and	r25, r20
     70c:	91 bb       	out	0x11, r25	; 17
     70e:	92 b3       	in	r25, 0x12	; 18
     710:	89 2b       	or	r24, r25
     712:	82 bb       	out	0x12, r24	; 18
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	08 95       	ret
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	08 95       	ret
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	08 95       	ret
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	08 95       	ret
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	08 95       	ret

00000728 <DIO_writepin>:
	  return error;

  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
     728:	98 2f       	mov	r25, r24
     72a:	96 95       	lsr	r25
     72c:	96 95       	lsr	r25
     72e:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     730:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error= DIO_OK;
	  if (pin_num<8)
	  {
		  switch (volt)
     732:	66 23       	and	r22, r22
     734:	09 f4       	brne	.+2      	; 0x738 <DIO_writepin+0x10>
     736:	43 c0       	rjmp	.+134    	; 0x7be <DIO_writepin+0x96>
     738:	61 30       	cpi	r22, 0x01	; 1
     73a:	09 f0       	breq	.+2      	; 0x73e <DIO_writepin+0x16>
     73c:	84 c0       	rjmp	.+264    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
		  {
			  case HIGH:

			  switch(port)
     73e:	91 30       	cpi	r25, 0x01	; 1
     740:	a1 f0       	breq	.+40     	; 0x76a <DIO_writepin+0x42>
     742:	28 f0       	brcs	.+10     	; 0x74e <DIO_writepin+0x26>
     744:	92 30       	cpi	r25, 0x02	; 2
     746:	f9 f0       	breq	.+62     	; 0x786 <DIO_writepin+0x5e>
     748:	93 30       	cpi	r25, 0x03	; 3
     74a:	59 f1       	breq	.+86     	; 0x7a2 <DIO_writepin+0x7a>
     74c:	7e c0       	rjmp	.+252    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
     74e:	4b b3       	in	r20, 0x1b	; 27
     750:	21 e0       	ldi	r18, 0x01	; 1
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	b9 01       	movw	r22, r18
     756:	02 c0       	rjmp	.+4      	; 0x75c <DIO_writepin+0x34>
     758:	66 0f       	add	r22, r22
     75a:	77 1f       	adc	r23, r23
     75c:	8a 95       	dec	r24
     75e:	e2 f7       	brpl	.-8      	; 0x758 <DIO_writepin+0x30>
     760:	cb 01       	movw	r24, r22
     762:	84 2b       	or	r24, r20
     764:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     766:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
				  break;
     768:	08 95       	ret
				  case PB:

				  SET_BIT(PORTB,pin_num);
     76a:	48 b3       	in	r20, 0x18	; 24
     76c:	21 e0       	ldi	r18, 0x01	; 1
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	b9 01       	movw	r22, r18
     772:	02 c0       	rjmp	.+4      	; 0x778 <DIO_writepin+0x50>
     774:	66 0f       	add	r22, r22
     776:	77 1f       	adc	r23, r23
     778:	8a 95       	dec	r24
     77a:	e2 f7       	brpl	.-8      	; 0x774 <DIO_writepin+0x4c>
     77c:	cb 01       	movw	r24, r22
     77e:	84 2b       	or	r24, r20
     780:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     782:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  SET_BIT(PORTB,pin_num);
				  break;
     784:	08 95       	ret
				  case PC:

				  SET_BIT(PORTC,pin_num);
     786:	45 b3       	in	r20, 0x15	; 21
     788:	21 e0       	ldi	r18, 0x01	; 1
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	b9 01       	movw	r22, r18
     78e:	02 c0       	rjmp	.+4      	; 0x794 <DIO_writepin+0x6c>
     790:	66 0f       	add	r22, r22
     792:	77 1f       	adc	r23, r23
     794:	8a 95       	dec	r24
     796:	e2 f7       	brpl	.-8      	; 0x790 <DIO_writepin+0x68>
     798:	cb 01       	movw	r24, r22
     79a:	84 2b       	or	r24, r20
     79c:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     79e:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  SET_BIT(PORTC,pin_num);
				  break;
     7a0:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
     7a2:	42 b3       	in	r20, 0x12	; 18
     7a4:	21 e0       	ldi	r18, 0x01	; 1
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	b9 01       	movw	r22, r18
     7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <DIO_writepin+0x88>
     7ac:	66 0f       	add	r22, r22
     7ae:	77 1f       	adc	r23, r23
     7b0:	8a 95       	dec	r24
     7b2:	e2 f7       	brpl	.-8      	; 0x7ac <DIO_writepin+0x84>
     7b4:	cb 01       	movw	r24, r22
     7b6:	84 2b       	or	r24, r20
     7b8:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     7ba:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
     7bc:	08 95       	ret
			  }
			  break;

			  case LOW:

			  switch(port)
     7be:	91 30       	cpi	r25, 0x01	; 1
     7c0:	a9 f0       	breq	.+42     	; 0x7ec <DIO_writepin+0xc4>
     7c2:	28 f0       	brcs	.+10     	; 0x7ce <DIO_writepin+0xa6>
     7c4:	92 30       	cpi	r25, 0x02	; 2
     7c6:	09 f1       	breq	.+66     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     7c8:	93 30       	cpi	r25, 0x03	; 3
     7ca:	71 f1       	breq	.+92     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     7cc:	40 c0       	rjmp	.+128    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
     7ce:	4b b3       	in	r20, 0x1b	; 27
     7d0:	21 e0       	ldi	r18, 0x01	; 1
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	b9 01       	movw	r22, r18
     7d6:	02 c0       	rjmp	.+4      	; 0x7dc <DIO_writepin+0xb4>
     7d8:	66 0f       	add	r22, r22
     7da:	77 1f       	adc	r23, r23
     7dc:	8a 95       	dec	r24
     7de:	e2 f7       	brpl	.-8      	; 0x7d8 <DIO_writepin+0xb0>
     7e0:	cb 01       	movw	r24, r22
     7e2:	80 95       	com	r24
     7e4:	84 23       	and	r24, r20
     7e6:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     7e8:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
				  break;
     7ea:	08 95       	ret
				  case PB:

				  CLR_BIT(PORTB,pin_num);
     7ec:	48 b3       	in	r20, 0x18	; 24
     7ee:	21 e0       	ldi	r18, 0x01	; 1
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	b9 01       	movw	r22, r18
     7f4:	02 c0       	rjmp	.+4      	; 0x7fa <DIO_writepin+0xd2>
     7f6:	66 0f       	add	r22, r22
     7f8:	77 1f       	adc	r23, r23
     7fa:	8a 95       	dec	r24
     7fc:	e2 f7       	brpl	.-8      	; 0x7f6 <DIO_writepin+0xce>
     7fe:	cb 01       	movw	r24, r22
     800:	80 95       	com	r24
     802:	84 23       	and	r24, r20
     804:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     806:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  CLR_BIT(PORTB,pin_num);
				  break;
     808:	08 95       	ret
				  case PC:

				  CLR_BIT(PORTC,pin_num);
     80a:	45 b3       	in	r20, 0x15	; 21
     80c:	21 e0       	ldi	r18, 0x01	; 1
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	b9 01       	movw	r22, r18
     812:	02 c0       	rjmp	.+4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     814:	66 0f       	add	r22, r22
     816:	77 1f       	adc	r23, r23
     818:	8a 95       	dec	r24
     81a:	e2 f7       	brpl	.-8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     81c:	cb 01       	movw	r24, r22
     81e:	80 95       	com	r24
     820:	84 23       	and	r24, r20
     822:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     824:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  CLR_BIT(PORTC,pin_num);
				  break;
     826:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
     828:	42 b3       	in	r20, 0x12	; 18
     82a:	21 e0       	ldi	r18, 0x01	; 1
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	b9 01       	movw	r22, r18
     830:	02 c0       	rjmp	.+4      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     832:	66 0f       	add	r22, r22
     834:	77 1f       	adc	r23, r23
     836:	8a 95       	dec	r24
     838:	e2 f7       	brpl	.-8      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     83a:	cb 01       	movw	r24, r22
     83c:	80 95       	com	r24
     83e:	84 23       	and	r24, r20
     840:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     842:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
     844:	08 95       	ret
			  }

			  break;

			  default:
			  error = WRONG_VALUE;
     846:	83 e0       	ldi	r24, 0x03	; 3
     848:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     84e:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
     850:	08 95       	ret

00000852 <DIO_readpin>:
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
     852:	98 2f       	mov	r25, r24
     854:	96 95       	lsr	r25
     856:	96 95       	lsr	r25
     858:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     85a:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error = DIO_OK;
	  if (pin_num < 8)
	  {

		  switch(port)
     85c:	91 30       	cpi	r25, 0x01	; 1
     85e:	a1 f0       	breq	.+40     	; 0x888 <__stack+0x29>
     860:	28 f0       	brcs	.+10     	; 0x86c <__stack+0xd>
     862:	92 30       	cpi	r25, 0x02	; 2
     864:	f9 f0       	breq	.+62     	; 0x8a4 <__stack+0x45>
     866:	93 30       	cpi	r25, 0x03	; 3
     868:	59 f1       	breq	.+86     	; 0x8c0 <__stack+0x61>
     86a:	38 c0       	rjmp	.+112    	; 0x8dc <__stack+0x7d>
		  {
			  case PA:

			  *volt=READ_BIT(PINA,pin_num);
     86c:	29 b3       	in	r18, 0x19	; 25
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	a9 01       	movw	r20, r18
     872:	02 c0       	rjmp	.+4      	; 0x878 <__stack+0x19>
     874:	55 95       	asr	r21
     876:	47 95       	ror	r20
     878:	8a 95       	dec	r24
     87a:	e2 f7       	brpl	.-8      	; 0x874 <__stack+0x15>
     87c:	ca 01       	movw	r24, r20
     87e:	81 70       	andi	r24, 0x01	; 1
     880:	fb 01       	movw	r30, r22
     882:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     884:	80 e0       	ldi	r24, 0x00	; 0
		  switch(port)
		  {
			  case PA:

			  *volt=READ_BIT(PINA,pin_num);
			  break;
     886:	08 95       	ret
			  case PB:

			  *volt=READ_BIT(PINB,pin_num);
     888:	26 b3       	in	r18, 0x16	; 22
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	a9 01       	movw	r20, r18
     88e:	02 c0       	rjmp	.+4      	; 0x894 <__stack+0x35>
     890:	55 95       	asr	r21
     892:	47 95       	ror	r20
     894:	8a 95       	dec	r24
     896:	e2 f7       	brpl	.-8      	; 0x890 <__stack+0x31>
     898:	ca 01       	movw	r24, r20
     89a:	81 70       	andi	r24, 0x01	; 1
     89c:	fb 01       	movw	r30, r22
     89e:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     8a0:	80 e0       	ldi	r24, 0x00	; 0
			  *volt=READ_BIT(PINA,pin_num);
			  break;
			  case PB:

			  *volt=READ_BIT(PINB,pin_num);
			  break;
     8a2:	08 95       	ret
			  case PC:

			  *volt=READ_BIT(PINC,pin_num);
     8a4:	23 b3       	in	r18, 0x13	; 19
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	a9 01       	movw	r20, r18
     8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <__stack+0x51>
     8ac:	55 95       	asr	r21
     8ae:	47 95       	ror	r20
     8b0:	8a 95       	dec	r24
     8b2:	e2 f7       	brpl	.-8      	; 0x8ac <__stack+0x4d>
     8b4:	ca 01       	movw	r24, r20
     8b6:	81 70       	andi	r24, 0x01	; 1
     8b8:	fb 01       	movw	r30, r22
     8ba:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     8bc:	80 e0       	ldi	r24, 0x00	; 0
			  *volt=READ_BIT(PINB,pin_num);
			  break;
			  case PC:

			  *volt=READ_BIT(PINC,pin_num);
			  break;
     8be:	08 95       	ret
			  case PD:

			  *volt=READ_BIT(PIND,pin_num);
     8c0:	20 b3       	in	r18, 0x10	; 16
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	a9 01       	movw	r20, r18
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__stack+0x6d>
     8c8:	55 95       	asr	r21
     8ca:	47 95       	ror	r20
     8cc:	8a 95       	dec	r24
     8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <__stack+0x69>
     8d0:	ca 01       	movw	r24, r20
     8d2:	81 70       	andi	r24, 0x01	; 1
     8d4:	fb 01       	movw	r30, r22
     8d6:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     8d8:	80 e0       	ldi	r24, 0x00	; 0
			  *volt=READ_BIT(PINC,pin_num);
			  break;
			  case PD:

			  *volt=READ_BIT(PIND,pin_num);
			  break;
     8da:	08 95       	ret
			  default:
			  error = WRONG_PORT_NUMBER;
     8dc:	81 e0       	ldi	r24, 0x01	; 1
	  else
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;
  }
     8de:	08 95       	ret

000008e0 <__vector_1>:




ISR(INT0_vect)
{  
     8e0:	1f 92       	push	r1
     8e2:	0f 92       	push	r0
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	0f 92       	push	r0
     8e8:	11 24       	eor	r1, r1
     8ea:	2f 93       	push	r18
     8ec:	3f 93       	push	r19
     8ee:	4f 93       	push	r20
     8f0:	5f 93       	push	r21
     8f2:	6f 93       	push	r22
     8f4:	7f 93       	push	r23
     8f6:	8f 93       	push	r24
     8f8:	9f 93       	push	r25
     8fa:	af 93       	push	r26
     8fc:	bf 93       	push	r27
     8fe:	ef 93       	push	r30
     900:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
     902:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <INT0_Fptr>
     906:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <INT0_Fptr+0x1>
     90a:	30 97       	sbiw	r30, 0x00	; 0
     90c:	09 f0       	breq	.+2      	; 0x910 <__vector_1+0x30>
	{
		INT0_Fptr();
     90e:	09 95       	icall
	}
}
     910:	ff 91       	pop	r31
     912:	ef 91       	pop	r30
     914:	bf 91       	pop	r27
     916:	af 91       	pop	r26
     918:	9f 91       	pop	r25
     91a:	8f 91       	pop	r24
     91c:	7f 91       	pop	r23
     91e:	6f 91       	pop	r22
     920:	5f 91       	pop	r21
     922:	4f 91       	pop	r20
     924:	3f 91       	pop	r19
     926:	2f 91       	pop	r18
     928:	0f 90       	pop	r0
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	0f 90       	pop	r0
     92e:	1f 90       	pop	r1
     930:	18 95       	reti

00000932 <__vector_2>:
ISR(INT1_vect)
{
     932:	1f 92       	push	r1
     934:	0f 92       	push	r0
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	0f 92       	push	r0
     93a:	11 24       	eor	r1, r1
     93c:	2f 93       	push	r18
     93e:	3f 93       	push	r19
     940:	4f 93       	push	r20
     942:	5f 93       	push	r21
     944:	6f 93       	push	r22
     946:	7f 93       	push	r23
     948:	8f 93       	push	r24
     94a:	9f 93       	push	r25
     94c:	af 93       	push	r26
     94e:	bf 93       	push	r27
     950:	ef 93       	push	r30
     952:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
     954:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <INT1_Fptr>
     958:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <INT1_Fptr+0x1>
     95c:	30 97       	sbiw	r30, 0x00	; 0
     95e:	09 f0       	breq	.+2      	; 0x962 <__vector_2+0x30>
	{
		INT1_Fptr();
     960:	09 95       	icall
	}
}
     962:	ff 91       	pop	r31
     964:	ef 91       	pop	r30
     966:	bf 91       	pop	r27
     968:	af 91       	pop	r26
     96a:	9f 91       	pop	r25
     96c:	8f 91       	pop	r24
     96e:	7f 91       	pop	r23
     970:	6f 91       	pop	r22
     972:	5f 91       	pop	r21
     974:	4f 91       	pop	r20
     976:	3f 91       	pop	r19
     978:	2f 91       	pop	r18
     97a:	0f 90       	pop	r0
     97c:	0f be       	out	0x3f, r0	; 63
     97e:	0f 90       	pop	r0
     980:	1f 90       	pop	r1
     982:	18 95       	reti

00000984 <__vector_3>:
ISR(INT2_vect)
{
     984:	1f 92       	push	r1
     986:	0f 92       	push	r0
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	0f 92       	push	r0
     98c:	11 24       	eor	r1, r1
     98e:	2f 93       	push	r18
     990:	3f 93       	push	r19
     992:	4f 93       	push	r20
     994:	5f 93       	push	r21
     996:	6f 93       	push	r22
     998:	7f 93       	push	r23
     99a:	8f 93       	push	r24
     99c:	9f 93       	push	r25
     99e:	af 93       	push	r26
     9a0:	bf 93       	push	r27
     9a2:	ef 93       	push	r30
     9a4:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
     9a6:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
     9aa:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
     9ae:	30 97       	sbiw	r30, 0x00	; 0
     9b0:	09 f0       	breq	.+2      	; 0x9b4 <__vector_3+0x30>
	{
		INT2_Fptr();
     9b2:	09 95       	icall
	}
}
     9b4:	ff 91       	pop	r31
     9b6:	ef 91       	pop	r30
     9b8:	bf 91       	pop	r27
     9ba:	af 91       	pop	r26
     9bc:	9f 91       	pop	r25
     9be:	8f 91       	pop	r24
     9c0:	7f 91       	pop	r23
     9c2:	6f 91       	pop	r22
     9c4:	5f 91       	pop	r21
     9c6:	4f 91       	pop	r20
     9c8:	3f 91       	pop	r19
     9ca:	2f 91       	pop	r18
     9cc:	0f 90       	pop	r0
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	0f 90       	pop	r0
     9d2:	1f 90       	pop	r1
     9d4:	18 95       	reti

000009d6 <waveGen>:
	TIMER0_OV_SetCallBack(waveGen);
	
} 

void waveGen()
{  static u32 OV=0;
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
	TCNT0=6;
     9da:	86 e0       	ldi	r24, 0x06	; 6
     9dc:	82 bf       	out	0x32, r24	; 50
	OV++;
     9de:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <OV.1979>
     9e2:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <OV.1979+0x1>
     9e6:	a0 91 78 00 	lds	r26, 0x0078	; 0x800078 <OV.1979+0x2>
     9ea:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <OV.1979+0x3>
     9ee:	01 96       	adiw	r24, 0x01	; 1
     9f0:	a1 1d       	adc	r26, r1
     9f2:	b1 1d       	adc	r27, r1
     9f4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <OV.1979>
     9f8:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <OV.1979+0x1>
     9fc:	a0 93 78 00 	sts	0x0078, r26	; 0x800078 <OV.1979+0x2>
     a00:	b0 93 79 00 	sts	0x0079, r27	; 0x800079 <OV.1979+0x3>
	if (OV==(u32_OFFTicks+1))
     a04:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <u32_OFFTicks>
     a08:	10 91 7b 00 	lds	r17, 0x007B	; 0x80007b <u32_OFFTicks+0x1>
     a0c:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <u32_OFFTicks+0x2>
     a10:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <u32_OFFTicks+0x3>
     a14:	b9 01       	movw	r22, r18
     a16:	a8 01       	movw	r20, r16
     a18:	4f 5f       	subi	r20, 0xFF	; 255
     a1a:	5f 4f       	sbci	r21, 0xFF	; 255
     a1c:	6f 4f       	sbci	r22, 0xFF	; 255
     a1e:	7f 4f       	sbci	r23, 0xFF	; 255
     a20:	84 17       	cp	r24, r20
     a22:	95 07       	cpc	r25, r21
     a24:	a6 07       	cpc	r26, r22
     a26:	b7 07       	cpc	r27, r23
     a28:	29 f4       	brne	.+10     	; 0xa34 <waveGen+0x5e>
	{
		DIO_writepin(PINB0,HIGH);//
     a2a:	61 e0       	ldi	r22, 0x01	; 1
     a2c:	88 e0       	ldi	r24, 0x08	; 8
     a2e:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
     a32:	21 c0       	rjmp	.+66     	; 0xa76 <waveGen+0xa0>
	}
	else if (OV==(u32_ONTicks+u32_OFFTicks+2))
     a34:	40 91 7e 00 	lds	r20, 0x007E	; 0x80007e <u32_ONTicks>
     a38:	50 91 7f 00 	lds	r21, 0x007F	; 0x80007f <u32_ONTicks+0x1>
     a3c:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <u32_ONTicks+0x2>
     a40:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <u32_ONTicks+0x3>
     a44:	40 0f       	add	r20, r16
     a46:	51 1f       	adc	r21, r17
     a48:	62 1f       	adc	r22, r18
     a4a:	73 1f       	adc	r23, r19
     a4c:	4e 5f       	subi	r20, 0xFE	; 254
     a4e:	5f 4f       	sbci	r21, 0xFF	; 255
     a50:	6f 4f       	sbci	r22, 0xFF	; 255
     a52:	7f 4f       	sbci	r23, 0xFF	; 255
     a54:	84 17       	cp	r24, r20
     a56:	95 07       	cpc	r25, r21
     a58:	a6 07       	cpc	r26, r22
     a5a:	b7 07       	cpc	r27, r23
     a5c:	61 f4       	brne	.+24     	; 0xa76 <waveGen+0xa0>
	{
		DIO_writepin(PINB0,LOW);//
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
		OV=0;
     a66:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <OV.1979>
     a6a:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <OV.1979+0x1>
     a6e:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <OV.1979+0x2>
     a72:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <OV.1979+0x3>
	}
	
}
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	08 95       	ret

00000a7c <pwm_init>:
u32 u32_ONTicks=0,u32_OFFTicks=0;


void pwm_init()
{
	DIO_initpin(PINB0,OUTPUT);
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	88 e0       	ldi	r24, 0x08	; 8
     a80:	0e 94 83 02 	call	0x506	; 0x506 <DIO_initpin>
	TIMER0_Init(TIMER0_NORMAL_MODE);
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	0e 94 c6 05 	call	0xb8c	; 0xb8c <TIMER0_Init>
	TIMER0_OV_InterruptEnable();
     a8a:	0e 94 24 06 	call	0xc48	; 0xc48 <TIMER0_OV_InterruptEnable>
	TIMER0_OV_SetCallBack(waveGen);
     a8e:	8b ee       	ldi	r24, 0xEB	; 235
     a90:	94 e0       	ldi	r25, 0x04	; 4
     a92:	0e 94 f6 05 	call	0xbec	; 0xbec <TIMER0_OV_SetCallBack>
     a96:	08 95       	ret

00000a98 <PWM_set_duty>:
	
}


void PWM_set_duty(u8 u8_DutyCycle,u32 u32_Freq)
{
     a98:	8f 92       	push	r8
     a9a:	9f 92       	push	r9
     a9c:	af 92       	push	r10
     a9e:	bf 92       	push	r11
     aa0:	cf 92       	push	r12
     aa2:	df 92       	push	r13
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	cf 93       	push	r28
     aaa:	c8 2f       	mov	r28, r24
	f64 f64_wavePeriodTime = (f32)1 / u32_Freq*1000000;					         // The Periodic Time for the Generated Pulse in Seconds //
     aac:	cb 01       	movw	r24, r22
     aae:	ba 01       	movw	r22, r20
     ab0:	0e 94 0c 08 	call	0x1018	; 0x1018 <__floatunsisf>
     ab4:	9b 01       	movw	r18, r22
     ab6:	ac 01       	movw	r20, r24
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	80 e8       	ldi	r24, 0x80	; 128
     abe:	9f e3       	ldi	r25, 0x3F	; 63
     ac0:	0e 94 6b 07 	call	0xed6	; 0xed6 <__divsf3>
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	34 e2       	ldi	r19, 0x24	; 36
     ac8:	44 e7       	ldi	r20, 0x74	; 116
     aca:	59 e4       	ldi	r21, 0x49	; 73
     acc:	0e 94 9a 08 	call	0x1134	; 0x1134 <__mulsf3>
     ad0:	4b 01       	movw	r8, r22
     ad2:	5c 01       	movw	r10, r24
	f64 f64_waveONTime = (f64_wavePeriodTime*u8_DutyCycle) / 100;		// The HIGH Level Time in Seconds //
     ad4:	6c 2f       	mov	r22, r28
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 0e 08 	call	0x101c	; 0x101c <__floatsisf>
     ae0:	a5 01       	movw	r20, r10
     ae2:	94 01       	movw	r18, r8
     ae4:	0e 94 9a 08 	call	0x1134	; 0x1134 <__mulsf3>
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	48 ec       	ldi	r20, 0xC8	; 200
     aee:	52 e4       	ldi	r21, 0x42	; 66
     af0:	0e 94 6b 07 	call	0xed6	; 0xed6 <__divsf3>
     af4:	6b 01       	movw	r12, r22
     af6:	7c 01       	movw	r14, r24
	f64 f64_waveOFFTime = f64_wavePeriodTime - f64_waveONTime;		   // The LOW Level Time in Seconds //
     af8:	9b 01       	movw	r18, r22
     afa:	ac 01       	movw	r20, r24
     afc:	c5 01       	movw	r24, r10
     afe:	b4 01       	movw	r22, r8
     b00:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__subsf3>
     b04:	4b 01       	movw	r8, r22
     b06:	5c 01       	movw	r10, r24
	f64 f64_oneTickTime = 0.0;
	f64_oneTickTime = (f64) (((f64)PWM_PRESCALER/(f64)F_CPU)*1000000);   //1u at 8,8
	//LCD_WriteNumber(f64_wavePeriodTime) ;
	f64 f64_max_time = (256*f64_oneTickTime); //256u
	//LCD_WriteNumber( f64_max_time) ;
	u32_ONTicks     =  f64_waveONTime/(f64_max_time-6);
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	4a e7       	ldi	r20, 0x7A	; 122
     b0e:	53 e4       	ldi	r21, 0x43	; 67
     b10:	c7 01       	movw	r24, r14
     b12:	b6 01       	movw	r22, r12
     b14:	0e 94 6b 07 	call	0xed6	; 0xed6 <__divsf3>
     b18:	0e 94 dd 07 	call	0xfba	; 0xfba <__fixunssfsi>
     b1c:	60 93 7e 00 	sts	0x007E, r22	; 0x80007e <u32_ONTicks>
     b20:	70 93 7f 00 	sts	0x007F, r23	; 0x80007f <u32_ONTicks+0x1>
     b24:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <u32_ONTicks+0x2>
     b28:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <u32_ONTicks+0x3>
	LCD_WriteNumber(u32_ONTicks) ;
     b2c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_WriteNumber>
	u32_OFFTicks    =  f64_waveOFFTime/(f64_max_time-6);
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	4a e7       	ldi	r20, 0x7A	; 122
     b36:	53 e4       	ldi	r21, 0x43	; 67
     b38:	c5 01       	movw	r24, r10
     b3a:	b4 01       	movw	r22, r8
     b3c:	0e 94 6b 07 	call	0xed6	; 0xed6 <__divsf3>
     b40:	0e 94 dd 07 	call	0xfba	; 0xfba <__fixunssfsi>
     b44:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <u32_OFFTicks>
     b48:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <u32_OFFTicks+0x1>
     b4c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <u32_OFFTicks+0x2>
     b50:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <u32_OFFTicks+0x3>
	LCD_SetCursor(1,0);
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_SetCursor>
	LCD_WriteNumber(u32_OFFTicks) ;
     b5c:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <u32_OFFTicks>
     b60:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <u32_OFFTicks+0x1>
     b64:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <u32_OFFTicks+0x2>
     b68:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <u32_OFFTicks+0x3>
     b6c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_WriteNumber>
	DIO_writepin(PINB0,HIGH);
     b70:	61 e0       	ldi	r22, 0x01	; 1
     b72:	88 e0       	ldi	r24, 0x08	; 8
     b74:	0e 94 94 03 	call	0x728	; 0x728 <DIO_writepin>
}
     b78:	cf 91       	pop	r28
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	df 90       	pop	r13
     b80:	cf 90       	pop	r12
     b82:	bf 90       	pop	r11
     b84:	af 90       	pop	r10
     b86:	9f 90       	pop	r9
     b88:	8f 90       	pop	r8
     b8a:	08 95       	ret

00000b8c <TIMER0_Init>:
void TIMER_2_INT(){
	sei();
	SET_BIT(TIMSK,TOIE2);
	TIMER_2_init(NORMAL_MODE);
	TIMER_2_setIntialValue(0);
	TIMER_2_start(PRECALER_1);
     b8c:	81 30       	cpi	r24, 0x01	; 1
     b8e:	69 f0       	breq	.+26     	; 0xbaa <TIMER0_Init+0x1e>
     b90:	28 f0       	brcs	.+10     	; 0xb9c <TIMER0_Init+0x10>
     b92:	82 30       	cpi	r24, 0x02	; 2
     b94:	89 f0       	breq	.+34     	; 0xbb8 <TIMER0_Init+0x2c>
     b96:	83 30       	cpi	r24, 0x03	; 3
     b98:	b1 f0       	breq	.+44     	; 0xbc6 <TIMER0_Init+0x3a>
     b9a:	08 95       	ret
     b9c:	83 b7       	in	r24, 0x33	; 51
     b9e:	8f 7b       	andi	r24, 0xBF	; 191
     ba0:	83 bf       	out	0x33, r24	; 51
     ba2:	83 b7       	in	r24, 0x33	; 51
     ba4:	87 7f       	andi	r24, 0xF7	; 247
     ba6:	83 bf       	out	0x33, r24	; 51
     ba8:	08 95       	ret
     baa:	83 b7       	in	r24, 0x33	; 51
     bac:	80 64       	ori	r24, 0x40	; 64
     bae:	83 bf       	out	0x33, r24	; 51
     bb0:	83 b7       	in	r24, 0x33	; 51
     bb2:	87 7f       	andi	r24, 0xF7	; 247
     bb4:	83 bf       	out	0x33, r24	; 51
     bb6:	08 95       	ret
     bb8:	83 b7       	in	r24, 0x33	; 51
     bba:	8f 7b       	andi	r24, 0xBF	; 191
     bbc:	83 bf       	out	0x33, r24	; 51
     bbe:	83 b7       	in	r24, 0x33	; 51
     bc0:	88 60       	ori	r24, 0x08	; 8
     bc2:	83 bf       	out	0x33, r24	; 51
     bc4:	08 95       	ret
     bc6:	83 b7       	in	r24, 0x33	; 51
     bc8:	80 64       	ori	r24, 0x40	; 64
     bca:	83 bf       	out	0x33, r24	; 51
     bcc:	83 b7       	in	r24, 0x33	; 51
     bce:	88 60       	ori	r24, 0x08	; 8
     bd0:	83 bf       	out	0x33, r24	; 51
     bd2:	08 95       	ret

00000bd4 <timer_start>:
     bd4:	88 30       	cpi	r24, 0x08	; 8
     bd6:	40 f4       	brcc	.+16     	; 0xbe8 <timer_start+0x14>
     bd8:	93 b7       	in	r25, 0x33	; 51
     bda:	98 7f       	andi	r25, 0xF8	; 248
     bdc:	93 bf       	out	0x33, r25	; 51
     bde:	93 b7       	in	r25, 0x33	; 51
     be0:	89 2b       	or	r24, r25
     be2:	83 bf       	out	0x33, r24	; 51
     be4:	84 e0       	ldi	r24, 0x04	; 4
     be6:	08 95       	ret
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	08 95       	ret

00000bec <TIMER0_OV_SetCallBack>:
     bec:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <Timer0_OVF_Fptr+0x1>
     bf0:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <Timer0_OVF_Fptr>
     bf4:	08 95       	ret

00000bf6 <__vector_11>:
     bf6:	1f 92       	push	r1
     bf8:	0f 92       	push	r0
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	0f 92       	push	r0
     bfe:	11 24       	eor	r1, r1
     c00:	2f 93       	push	r18
     c02:	3f 93       	push	r19
     c04:	4f 93       	push	r20
     c06:	5f 93       	push	r21
     c08:	6f 93       	push	r22
     c0a:	7f 93       	push	r23
     c0c:	8f 93       	push	r24
     c0e:	9f 93       	push	r25
     c10:	af 93       	push	r26
     c12:	bf 93       	push	r27
     c14:	ef 93       	push	r30
     c16:	ff 93       	push	r31
     c18:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <Timer0_OVF_Fptr>
     c1c:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <Timer0_OVF_Fptr+0x1>
     c20:	30 97       	sbiw	r30, 0x00	; 0
     c22:	09 f0       	breq	.+2      	; 0xc26 <__vector_11+0x30>
     c24:	09 95       	icall
     c26:	ff 91       	pop	r31
     c28:	ef 91       	pop	r30
     c2a:	bf 91       	pop	r27
     c2c:	af 91       	pop	r26
     c2e:	9f 91       	pop	r25
     c30:	8f 91       	pop	r24
     c32:	7f 91       	pop	r23
     c34:	6f 91       	pop	r22
     c36:	5f 91       	pop	r21
     c38:	4f 91       	pop	r20
     c3a:	3f 91       	pop	r19
     c3c:	2f 91       	pop	r18
     c3e:	0f 90       	pop	r0
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	0f 90       	pop	r0
     c44:	1f 90       	pop	r1
     c46:	18 95       	reti

00000c48 <TIMER0_OV_InterruptEnable>:
     c48:	89 b7       	in	r24, 0x39	; 57
     c4a:	81 60       	ori	r24, 0x01	; 1
     c4c:	89 bf       	out	0x39, r24	; 57
     c4e:	08 95       	ret

00000c50 <__vector_9>:
     c50:	1f 92       	push	r1
     c52:	0f 92       	push	r0
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	0f 92       	push	r0
     c58:	11 24       	eor	r1, r1
     c5a:	2f 93       	push	r18
     c5c:	3f 93       	push	r19
     c5e:	4f 93       	push	r20
     c60:	5f 93       	push	r21
     c62:	6f 93       	push	r22
     c64:	7f 93       	push	r23
     c66:	8f 93       	push	r24
     c68:	9f 93       	push	r25
     c6a:	af 93       	push	r26
     c6c:	bf 93       	push	r27
     c6e:	ef 93       	push	r30
     c70:	ff 93       	push	r31
     c72:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <Timer1_OVF_Fptr>
     c76:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <Timer1_OVF_Fptr+0x1>
     c7a:	30 97       	sbiw	r30, 0x00	; 0
     c7c:	09 f0       	breq	.+2      	; 0xc80 <__vector_9+0x30>
     c7e:	09 95       	icall
     c80:	ff 91       	pop	r31
     c82:	ef 91       	pop	r30
     c84:	bf 91       	pop	r27
     c86:	af 91       	pop	r26
     c88:	9f 91       	pop	r25
     c8a:	8f 91       	pop	r24
     c8c:	7f 91       	pop	r23
     c8e:	6f 91       	pop	r22
     c90:	5f 91       	pop	r21
     c92:	4f 91       	pop	r20
     c94:	3f 91       	pop	r19
     c96:	2f 91       	pop	r18
     c98:	0f 90       	pop	r0
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	0f 90       	pop	r0
     c9e:	1f 90       	pop	r1
     ca0:	18 95       	reti

00000ca2 <__vector_8>:
     ca2:	1f 92       	push	r1
     ca4:	0f 92       	push	r0
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	0f 92       	push	r0
     caa:	11 24       	eor	r1, r1
     cac:	2f 93       	push	r18
     cae:	3f 93       	push	r19
     cb0:	4f 93       	push	r20
     cb2:	5f 93       	push	r21
     cb4:	6f 93       	push	r22
     cb6:	7f 93       	push	r23
     cb8:	8f 93       	push	r24
     cba:	9f 93       	push	r25
     cbc:	af 93       	push	r26
     cbe:	bf 93       	push	r27
     cc0:	ef 93       	push	r30
     cc2:	ff 93       	push	r31
     cc4:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <Timer1_OCB_Fptr>
     cc8:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <Timer1_OCB_Fptr+0x1>
     ccc:	30 97       	sbiw	r30, 0x00	; 0
     cce:	09 f0       	breq	.+2      	; 0xcd2 <__vector_8+0x30>
     cd0:	09 95       	icall
     cd2:	ff 91       	pop	r31
     cd4:	ef 91       	pop	r30
     cd6:	bf 91       	pop	r27
     cd8:	af 91       	pop	r26
     cda:	9f 91       	pop	r25
     cdc:	8f 91       	pop	r24
     cde:	7f 91       	pop	r23
     ce0:	6f 91       	pop	r22
     ce2:	5f 91       	pop	r21
     ce4:	4f 91       	pop	r20
     ce6:	3f 91       	pop	r19
     ce8:	2f 91       	pop	r18
     cea:	0f 90       	pop	r0
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	0f 90       	pop	r0
     cf0:	1f 90       	pop	r1
     cf2:	18 95       	reti

00000cf4 <__vector_6>:
     cf4:	1f 92       	push	r1
     cf6:	0f 92       	push	r0
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	0f 92       	push	r0
     cfc:	11 24       	eor	r1, r1
     cfe:	2f 93       	push	r18
     d00:	3f 93       	push	r19
     d02:	4f 93       	push	r20
     d04:	5f 93       	push	r21
     d06:	6f 93       	push	r22
     d08:	7f 93       	push	r23
     d0a:	8f 93       	push	r24
     d0c:	9f 93       	push	r25
     d0e:	af 93       	push	r26
     d10:	bf 93       	push	r27
     d12:	ef 93       	push	r30
     d14:	ff 93       	push	r31
     d16:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <Timer1_ICU_Fptr>
     d1a:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <Timer1_ICU_Fptr+0x1>
     d1e:	30 97       	sbiw	r30, 0x00	; 0
     d20:	09 f0       	breq	.+2      	; 0xd24 <__vector_6+0x30>
     d22:	09 95       	icall
     d24:	ff 91       	pop	r31
     d26:	ef 91       	pop	r30
     d28:	bf 91       	pop	r27
     d2a:	af 91       	pop	r26
     d2c:	9f 91       	pop	r25
     d2e:	8f 91       	pop	r24
     d30:	7f 91       	pop	r23
     d32:	6f 91       	pop	r22
     d34:	5f 91       	pop	r21
     d36:	4f 91       	pop	r20
     d38:	3f 91       	pop	r19
     d3a:	2f 91       	pop	r18
     d3c:	0f 90       	pop	r0
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	0f 90       	pop	r0
     d42:	1f 90       	pop	r1
     d44:	18 95       	reti

00000d46 <__vector_5>:
}




ISR(TIMER2_OV_vect){
     d46:	1f 92       	push	r1
     d48:	0f 92       	push	r0
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	0f 92       	push	r0
     d4e:	11 24       	eor	r1, r1
     d50:	4f 93       	push	r20
     d52:	5f 93       	push	r21
     d54:	6f 93       	push	r22
     d56:	7f 93       	push	r23
     d58:	8f 93       	push	r24
     d5a:	9f 93       	push	r25
     d5c:	af 93       	push	r26
     d5e:	bf 93       	push	r27
	if(car_flag == 1){
     d60:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <car_flag>
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	e9 f5       	brne	.+122    	; 0xde2 <__vector_5+0x9c>
		
		if (ovf < mode_ovf ){
     d68:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <ovf>
     d6c:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <ovf+0x1>
     d70:	a0 91 85 00 	lds	r26, 0x0085	; 0x800085 <ovf+0x2>
     d74:	b0 91 86 00 	lds	r27, 0x0086	; 0x800086 <ovf+0x3>
     d78:	40 91 87 00 	lds	r20, 0x0087	; 0x800087 <mode_ovf>
     d7c:	50 91 88 00 	lds	r21, 0x0088	; 0x800088 <mode_ovf+0x1>
     d80:	60 91 89 00 	lds	r22, 0x0089	; 0x800089 <mode_ovf+0x2>
     d84:	70 91 8a 00 	lds	r23, 0x008A	; 0x80008a <mode_ovf+0x3>
     d88:	84 17       	cp	r24, r20
     d8a:	95 07       	cpc	r25, r21
     d8c:	a6 07       	cpc	r26, r22
     d8e:	b7 07       	cpc	r27, r23
     d90:	64 f4       	brge	.+24     	; 0xdaa <__vector_5+0x64>
			ovf++;
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	a1 1d       	adc	r26, r1
     d96:	b1 1d       	adc	r27, r1
     d98:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <ovf>
     d9c:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <ovf+0x1>
     da0:	a0 93 85 00 	sts	0x0085, r26	; 0x800085 <ovf+0x2>
     da4:	b0 93 86 00 	sts	0x0086, r27	; 0x800086 <ovf+0x3>
     da8:	1c c0       	rjmp	.+56     	; 0xde2 <__vector_5+0x9c>
		}
		else if ( ovf == mode_ovf && mode_ovf!=0){
     daa:	84 17       	cp	r24, r20
     dac:	95 07       	cpc	r25, r21
     dae:	a6 07       	cpc	r26, r22
     db0:	b7 07       	cpc	r27, r23
     db2:	b9 f4       	brne	.+46     	; 0xde2 <__vector_5+0x9c>
     db4:	45 2b       	or	r20, r21
     db6:	46 2b       	or	r20, r22
     db8:	47 2b       	or	r20, r23
     dba:	99 f0       	breq	.+38     	; 0xde2 <__vector_5+0x9c>
			ovf =0 ;
     dbc:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <ovf>
     dc0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <ovf+0x1>
     dc4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <ovf+0x2>
     dc8:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <ovf+0x3>
			
			if (car_mode < 8)
     dcc:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <car_mode>
     dd0:	88 30       	cpi	r24, 0x08	; 8
     dd2:	20 f4       	brcc	.+8      	; 0xddc <__vector_5+0x96>
			{
				car_mode++;
     dd4:	8f 5f       	subi	r24, 0xFF	; 255
     dd6:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <car_mode>
     dda:	03 c0       	rjmp	.+6      	; 0xde2 <__vector_5+0x9c>
				
				}else{
				car_mode = 1 ;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <car_mode>
			
		}
		
	}
	
     de2:	bf 91       	pop	r27
     de4:	af 91       	pop	r26
     de6:	9f 91       	pop	r25
     de8:	8f 91       	pop	r24
     dea:	7f 91       	pop	r23
     dec:	6f 91       	pop	r22
     dee:	5f 91       	pop	r21
     df0:	4f 91       	pop	r20
     df2:	0f 90       	pop	r0
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	0f 90       	pop	r0
     df8:	1f 90       	pop	r1
     dfa:	18 95       	reti

00000dfc <__subsf3>:
     dfc:	50 58       	subi	r21, 0x80	; 128

00000dfe <__addsf3>:
     dfe:	bb 27       	eor	r27, r27
     e00:	aa 27       	eor	r26, r26
     e02:	0e 94 16 07 	call	0xe2c	; 0xe2c <__addsf3x>
     e06:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_round>
     e0a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fp_pscA>
     e0e:	38 f0       	brcs	.+14     	; 0xe1e <__addsf3+0x20>
     e10:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__fp_pscB>
     e14:	20 f0       	brcs	.+8      	; 0xe1e <__addsf3+0x20>
     e16:	39 f4       	brne	.+14     	; 0xe26 <__addsf3+0x28>
     e18:	9f 3f       	cpi	r25, 0xFF	; 255
     e1a:	19 f4       	brne	.+6      	; 0xe22 <__addsf3+0x24>
     e1c:	26 f4       	brtc	.+8      	; 0xe26 <__addsf3+0x28>
     e1e:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__fp_nan>
     e22:	0e f4       	brtc	.+2      	; 0xe26 <__addsf3+0x28>
     e24:	e0 95       	com	r30
     e26:	e7 fb       	bst	r30, 7
     e28:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__fp_inf>

00000e2c <__addsf3x>:
     e2c:	e9 2f       	mov	r30, r25
     e2e:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__fp_split3>
     e32:	58 f3       	brcs	.-42     	; 0xe0a <__addsf3+0xc>
     e34:	ba 17       	cp	r27, r26
     e36:	62 07       	cpc	r22, r18
     e38:	73 07       	cpc	r23, r19
     e3a:	84 07       	cpc	r24, r20
     e3c:	95 07       	cpc	r25, r21
     e3e:	20 f0       	brcs	.+8      	; 0xe48 <__addsf3x+0x1c>
     e40:	79 f4       	brne	.+30     	; 0xe60 <__addsf3x+0x34>
     e42:	a6 f5       	brtc	.+104    	; 0xeac <__addsf3x+0x80>
     e44:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__fp_zero>
     e48:	0e f4       	brtc	.+2      	; 0xe4c <__addsf3x+0x20>
     e4a:	e0 95       	com	r30
     e4c:	0b 2e       	mov	r0, r27
     e4e:	ba 2f       	mov	r27, r26
     e50:	a0 2d       	mov	r26, r0
     e52:	0b 01       	movw	r0, r22
     e54:	b9 01       	movw	r22, r18
     e56:	90 01       	movw	r18, r0
     e58:	0c 01       	movw	r0, r24
     e5a:	ca 01       	movw	r24, r20
     e5c:	a0 01       	movw	r20, r0
     e5e:	11 24       	eor	r1, r1
     e60:	ff 27       	eor	r31, r31
     e62:	59 1b       	sub	r21, r25
     e64:	99 f0       	breq	.+38     	; 0xe8c <__addsf3x+0x60>
     e66:	59 3f       	cpi	r21, 0xF9	; 249
     e68:	50 f4       	brcc	.+20     	; 0xe7e <__addsf3x+0x52>
     e6a:	50 3e       	cpi	r21, 0xE0	; 224
     e6c:	68 f1       	brcs	.+90     	; 0xec8 <__addsf3x+0x9c>
     e6e:	1a 16       	cp	r1, r26
     e70:	f0 40       	sbci	r31, 0x00	; 0
     e72:	a2 2f       	mov	r26, r18
     e74:	23 2f       	mov	r18, r19
     e76:	34 2f       	mov	r19, r20
     e78:	44 27       	eor	r20, r20
     e7a:	58 5f       	subi	r21, 0xF8	; 248
     e7c:	f3 cf       	rjmp	.-26     	; 0xe64 <__addsf3x+0x38>
     e7e:	46 95       	lsr	r20
     e80:	37 95       	ror	r19
     e82:	27 95       	ror	r18
     e84:	a7 95       	ror	r26
     e86:	f0 40       	sbci	r31, 0x00	; 0
     e88:	53 95       	inc	r21
     e8a:	c9 f7       	brne	.-14     	; 0xe7e <__addsf3x+0x52>
     e8c:	7e f4       	brtc	.+30     	; 0xeac <__addsf3x+0x80>
     e8e:	1f 16       	cp	r1, r31
     e90:	ba 0b       	sbc	r27, r26
     e92:	62 0b       	sbc	r22, r18
     e94:	73 0b       	sbc	r23, r19
     e96:	84 0b       	sbc	r24, r20
     e98:	ba f0       	brmi	.+46     	; 0xec8 <__addsf3x+0x9c>
     e9a:	91 50       	subi	r25, 0x01	; 1
     e9c:	a1 f0       	breq	.+40     	; 0xec6 <__addsf3x+0x9a>
     e9e:	ff 0f       	add	r31, r31
     ea0:	bb 1f       	adc	r27, r27
     ea2:	66 1f       	adc	r22, r22
     ea4:	77 1f       	adc	r23, r23
     ea6:	88 1f       	adc	r24, r24
     ea8:	c2 f7       	brpl	.-16     	; 0xe9a <__addsf3x+0x6e>
     eaa:	0e c0       	rjmp	.+28     	; 0xec8 <__addsf3x+0x9c>
     eac:	ba 0f       	add	r27, r26
     eae:	62 1f       	adc	r22, r18
     eb0:	73 1f       	adc	r23, r19
     eb2:	84 1f       	adc	r24, r20
     eb4:	48 f4       	brcc	.+18     	; 0xec8 <__addsf3x+0x9c>
     eb6:	87 95       	ror	r24
     eb8:	77 95       	ror	r23
     eba:	67 95       	ror	r22
     ebc:	b7 95       	ror	r27
     ebe:	f7 95       	ror	r31
     ec0:	9e 3f       	cpi	r25, 0xFE	; 254
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <__addsf3x+0x9a>
     ec4:	b0 cf       	rjmp	.-160    	; 0xe26 <__addsf3+0x28>
     ec6:	93 95       	inc	r25
     ec8:	88 0f       	add	r24, r24
     eca:	08 f0       	brcs	.+2      	; 0xece <__addsf3x+0xa2>
     ecc:	99 27       	eor	r25, r25
     ece:	ee 0f       	add	r30, r30
     ed0:	97 95       	ror	r25
     ed2:	87 95       	ror	r24
     ed4:	08 95       	ret

00000ed6 <__divsf3>:
     ed6:	0e 94 7f 07 	call	0xefe	; 0xefe <__divsf3x>
     eda:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_round>
     ede:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__fp_pscB>
     ee2:	58 f0       	brcs	.+22     	; 0xefa <__divsf3+0x24>
     ee4:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fp_pscA>
     ee8:	40 f0       	brcs	.+16     	; 0xefa <__divsf3+0x24>
     eea:	29 f4       	brne	.+10     	; 0xef6 <__divsf3+0x20>
     eec:	5f 3f       	cpi	r21, 0xFF	; 255
     eee:	29 f0       	breq	.+10     	; 0xefa <__divsf3+0x24>
     ef0:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__fp_inf>
     ef4:	51 11       	cpse	r21, r1
     ef6:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__fp_szero>
     efa:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__fp_nan>

00000efe <__divsf3x>:
     efe:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__fp_split3>
     f02:	68 f3       	brcs	.-38     	; 0xede <__divsf3+0x8>

00000f04 <__divsf3_pse>:
     f04:	99 23       	and	r25, r25
     f06:	b1 f3       	breq	.-20     	; 0xef4 <__divsf3+0x1e>
     f08:	55 23       	and	r21, r21
     f0a:	91 f3       	breq	.-28     	; 0xef0 <__divsf3+0x1a>
     f0c:	95 1b       	sub	r25, r21
     f0e:	55 0b       	sbc	r21, r21
     f10:	bb 27       	eor	r27, r27
     f12:	aa 27       	eor	r26, r26
     f14:	62 17       	cp	r22, r18
     f16:	73 07       	cpc	r23, r19
     f18:	84 07       	cpc	r24, r20
     f1a:	38 f0       	brcs	.+14     	; 0xf2a <__divsf3_pse+0x26>
     f1c:	9f 5f       	subi	r25, 0xFF	; 255
     f1e:	5f 4f       	sbci	r21, 0xFF	; 255
     f20:	22 0f       	add	r18, r18
     f22:	33 1f       	adc	r19, r19
     f24:	44 1f       	adc	r20, r20
     f26:	aa 1f       	adc	r26, r26
     f28:	a9 f3       	breq	.-22     	; 0xf14 <__divsf3_pse+0x10>
     f2a:	35 d0       	rcall	.+106    	; 0xf96 <__divsf3_pse+0x92>
     f2c:	0e 2e       	mov	r0, r30
     f2e:	3a f0       	brmi	.+14     	; 0xf3e <__divsf3_pse+0x3a>
     f30:	e0 e8       	ldi	r30, 0x80	; 128
     f32:	32 d0       	rcall	.+100    	; 0xf98 <__divsf3_pse+0x94>
     f34:	91 50       	subi	r25, 0x01	; 1
     f36:	50 40       	sbci	r21, 0x00	; 0
     f38:	e6 95       	lsr	r30
     f3a:	00 1c       	adc	r0, r0
     f3c:	ca f7       	brpl	.-14     	; 0xf30 <__divsf3_pse+0x2c>
     f3e:	2b d0       	rcall	.+86     	; 0xf96 <__divsf3_pse+0x92>
     f40:	fe 2f       	mov	r31, r30
     f42:	29 d0       	rcall	.+82     	; 0xf96 <__divsf3_pse+0x92>
     f44:	66 0f       	add	r22, r22
     f46:	77 1f       	adc	r23, r23
     f48:	88 1f       	adc	r24, r24
     f4a:	bb 1f       	adc	r27, r27
     f4c:	26 17       	cp	r18, r22
     f4e:	37 07       	cpc	r19, r23
     f50:	48 07       	cpc	r20, r24
     f52:	ab 07       	cpc	r26, r27
     f54:	b0 e8       	ldi	r27, 0x80	; 128
     f56:	09 f0       	breq	.+2      	; 0xf5a <__divsf3_pse+0x56>
     f58:	bb 0b       	sbc	r27, r27
     f5a:	80 2d       	mov	r24, r0
     f5c:	bf 01       	movw	r22, r30
     f5e:	ff 27       	eor	r31, r31
     f60:	93 58       	subi	r25, 0x83	; 131
     f62:	5f 4f       	sbci	r21, 0xFF	; 255
     f64:	3a f0       	brmi	.+14     	; 0xf74 <__divsf3_pse+0x70>
     f66:	9e 3f       	cpi	r25, 0xFE	; 254
     f68:	51 05       	cpc	r21, r1
     f6a:	78 f0       	brcs	.+30     	; 0xf8a <__divsf3_pse+0x86>
     f6c:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__fp_inf>
     f70:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__fp_szero>
     f74:	5f 3f       	cpi	r21, 0xFF	; 255
     f76:	e4 f3       	brlt	.-8      	; 0xf70 <__divsf3_pse+0x6c>
     f78:	98 3e       	cpi	r25, 0xE8	; 232
     f7a:	d4 f3       	brlt	.-12     	; 0xf70 <__divsf3_pse+0x6c>
     f7c:	86 95       	lsr	r24
     f7e:	77 95       	ror	r23
     f80:	67 95       	ror	r22
     f82:	b7 95       	ror	r27
     f84:	f7 95       	ror	r31
     f86:	9f 5f       	subi	r25, 0xFF	; 255
     f88:	c9 f7       	brne	.-14     	; 0xf7c <__divsf3_pse+0x78>
     f8a:	88 0f       	add	r24, r24
     f8c:	91 1d       	adc	r25, r1
     f8e:	96 95       	lsr	r25
     f90:	87 95       	ror	r24
     f92:	97 f9       	bld	r25, 7
     f94:	08 95       	ret
     f96:	e1 e0       	ldi	r30, 0x01	; 1
     f98:	66 0f       	add	r22, r22
     f9a:	77 1f       	adc	r23, r23
     f9c:	88 1f       	adc	r24, r24
     f9e:	bb 1f       	adc	r27, r27
     fa0:	62 17       	cp	r22, r18
     fa2:	73 07       	cpc	r23, r19
     fa4:	84 07       	cpc	r24, r20
     fa6:	ba 07       	cpc	r27, r26
     fa8:	20 f0       	brcs	.+8      	; 0xfb2 <__divsf3_pse+0xae>
     faa:	62 1b       	sub	r22, r18
     fac:	73 0b       	sbc	r23, r19
     fae:	84 0b       	sbc	r24, r20
     fb0:	ba 0b       	sbc	r27, r26
     fb2:	ee 1f       	adc	r30, r30
     fb4:	88 f7       	brcc	.-30     	; 0xf98 <__divsf3_pse+0x94>
     fb6:	e0 95       	com	r30
     fb8:	08 95       	ret

00000fba <__fixunssfsi>:
     fba:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__fp_splitA>
     fbe:	88 f0       	brcs	.+34     	; 0xfe2 <__fixunssfsi+0x28>
     fc0:	9f 57       	subi	r25, 0x7F	; 127
     fc2:	98 f0       	brcs	.+38     	; 0xfea <__fixunssfsi+0x30>
     fc4:	b9 2f       	mov	r27, r25
     fc6:	99 27       	eor	r25, r25
     fc8:	b7 51       	subi	r27, 0x17	; 23
     fca:	b0 f0       	brcs	.+44     	; 0xff8 <__fixunssfsi+0x3e>
     fcc:	e1 f0       	breq	.+56     	; 0x1006 <__fixunssfsi+0x4c>
     fce:	66 0f       	add	r22, r22
     fd0:	77 1f       	adc	r23, r23
     fd2:	88 1f       	adc	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	1a f0       	brmi	.+6      	; 0xfde <__fixunssfsi+0x24>
     fd8:	ba 95       	dec	r27
     fda:	c9 f7       	brne	.-14     	; 0xfce <__fixunssfsi+0x14>
     fdc:	14 c0       	rjmp	.+40     	; 0x1006 <__fixunssfsi+0x4c>
     fde:	b1 30       	cpi	r27, 0x01	; 1
     fe0:	91 f0       	breq	.+36     	; 0x1006 <__fixunssfsi+0x4c>
     fe2:	0e 94 93 08 	call	0x1126	; 0x1126 <__fp_zero>
     fe6:	b1 e0       	ldi	r27, 0x01	; 1
     fe8:	08 95       	ret
     fea:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__fp_zero>
     fee:	67 2f       	mov	r22, r23
     ff0:	78 2f       	mov	r23, r24
     ff2:	88 27       	eor	r24, r24
     ff4:	b8 5f       	subi	r27, 0xF8	; 248
     ff6:	39 f0       	breq	.+14     	; 0x1006 <__fixunssfsi+0x4c>
     ff8:	b9 3f       	cpi	r27, 0xF9	; 249
     ffa:	cc f3       	brlt	.-14     	; 0xfee <__fixunssfsi+0x34>
     ffc:	86 95       	lsr	r24
     ffe:	77 95       	ror	r23
    1000:	67 95       	ror	r22
    1002:	b3 95       	inc	r27
    1004:	d9 f7       	brne	.-10     	; 0xffc <__fixunssfsi+0x42>
    1006:	3e f4       	brtc	.+14     	; 0x1016 <__fixunssfsi+0x5c>
    1008:	90 95       	com	r25
    100a:	80 95       	com	r24
    100c:	70 95       	com	r23
    100e:	61 95       	neg	r22
    1010:	7f 4f       	sbci	r23, 0xFF	; 255
    1012:	8f 4f       	sbci	r24, 0xFF	; 255
    1014:	9f 4f       	sbci	r25, 0xFF	; 255
    1016:	08 95       	ret

00001018 <__floatunsisf>:
    1018:	e8 94       	clt
    101a:	09 c0       	rjmp	.+18     	; 0x102e <__floatsisf+0x12>

0000101c <__floatsisf>:
    101c:	97 fb       	bst	r25, 7
    101e:	3e f4       	brtc	.+14     	; 0x102e <__floatsisf+0x12>
    1020:	90 95       	com	r25
    1022:	80 95       	com	r24
    1024:	70 95       	com	r23
    1026:	61 95       	neg	r22
    1028:	7f 4f       	sbci	r23, 0xFF	; 255
    102a:	8f 4f       	sbci	r24, 0xFF	; 255
    102c:	9f 4f       	sbci	r25, 0xFF	; 255
    102e:	99 23       	and	r25, r25
    1030:	a9 f0       	breq	.+42     	; 0x105c <__floatsisf+0x40>
    1032:	f9 2f       	mov	r31, r25
    1034:	96 e9       	ldi	r25, 0x96	; 150
    1036:	bb 27       	eor	r27, r27
    1038:	93 95       	inc	r25
    103a:	f6 95       	lsr	r31
    103c:	87 95       	ror	r24
    103e:	77 95       	ror	r23
    1040:	67 95       	ror	r22
    1042:	b7 95       	ror	r27
    1044:	f1 11       	cpse	r31, r1
    1046:	f8 cf       	rjmp	.-16     	; 0x1038 <__floatsisf+0x1c>
    1048:	fa f4       	brpl	.+62     	; 0x1088 <__floatsisf+0x6c>
    104a:	bb 0f       	add	r27, r27
    104c:	11 f4       	brne	.+4      	; 0x1052 <__floatsisf+0x36>
    104e:	60 ff       	sbrs	r22, 0
    1050:	1b c0       	rjmp	.+54     	; 0x1088 <__floatsisf+0x6c>
    1052:	6f 5f       	subi	r22, 0xFF	; 255
    1054:	7f 4f       	sbci	r23, 0xFF	; 255
    1056:	8f 4f       	sbci	r24, 0xFF	; 255
    1058:	9f 4f       	sbci	r25, 0xFF	; 255
    105a:	16 c0       	rjmp	.+44     	; 0x1088 <__floatsisf+0x6c>
    105c:	88 23       	and	r24, r24
    105e:	11 f0       	breq	.+4      	; 0x1064 <__floatsisf+0x48>
    1060:	96 e9       	ldi	r25, 0x96	; 150
    1062:	11 c0       	rjmp	.+34     	; 0x1086 <__floatsisf+0x6a>
    1064:	77 23       	and	r23, r23
    1066:	21 f0       	breq	.+8      	; 0x1070 <__floatsisf+0x54>
    1068:	9e e8       	ldi	r25, 0x8E	; 142
    106a:	87 2f       	mov	r24, r23
    106c:	76 2f       	mov	r23, r22
    106e:	05 c0       	rjmp	.+10     	; 0x107a <__floatsisf+0x5e>
    1070:	66 23       	and	r22, r22
    1072:	71 f0       	breq	.+28     	; 0x1090 <__floatsisf+0x74>
    1074:	96 e8       	ldi	r25, 0x86	; 134
    1076:	86 2f       	mov	r24, r22
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	2a f0       	brmi	.+10     	; 0x1088 <__floatsisf+0x6c>
    107e:	9a 95       	dec	r25
    1080:	66 0f       	add	r22, r22
    1082:	77 1f       	adc	r23, r23
    1084:	88 1f       	adc	r24, r24
    1086:	da f7       	brpl	.-10     	; 0x107e <__floatsisf+0x62>
    1088:	88 0f       	add	r24, r24
    108a:	96 95       	lsr	r25
    108c:	87 95       	ror	r24
    108e:	97 f9       	bld	r25, 7
    1090:	08 95       	ret

00001092 <__fp_inf>:
    1092:	97 f9       	bld	r25, 7
    1094:	9f 67       	ori	r25, 0x7F	; 127
    1096:	80 e8       	ldi	r24, 0x80	; 128
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	60 e0       	ldi	r22, 0x00	; 0
    109c:	08 95       	ret

0000109e <__fp_nan>:
    109e:	9f ef       	ldi	r25, 0xFF	; 255
    10a0:	80 ec       	ldi	r24, 0xC0	; 192
    10a2:	08 95       	ret

000010a4 <__fp_pscA>:
    10a4:	00 24       	eor	r0, r0
    10a6:	0a 94       	dec	r0
    10a8:	16 16       	cp	r1, r22
    10aa:	17 06       	cpc	r1, r23
    10ac:	18 06       	cpc	r1, r24
    10ae:	09 06       	cpc	r0, r25
    10b0:	08 95       	ret

000010b2 <__fp_pscB>:
    10b2:	00 24       	eor	r0, r0
    10b4:	0a 94       	dec	r0
    10b6:	12 16       	cp	r1, r18
    10b8:	13 06       	cpc	r1, r19
    10ba:	14 06       	cpc	r1, r20
    10bc:	05 06       	cpc	r0, r21
    10be:	08 95       	ret

000010c0 <__fp_round>:
    10c0:	09 2e       	mov	r0, r25
    10c2:	03 94       	inc	r0
    10c4:	00 0c       	add	r0, r0
    10c6:	11 f4       	brne	.+4      	; 0x10cc <__fp_round+0xc>
    10c8:	88 23       	and	r24, r24
    10ca:	52 f0       	brmi	.+20     	; 0x10e0 <__fp_round+0x20>
    10cc:	bb 0f       	add	r27, r27
    10ce:	40 f4       	brcc	.+16     	; 0x10e0 <__fp_round+0x20>
    10d0:	bf 2b       	or	r27, r31
    10d2:	11 f4       	brne	.+4      	; 0x10d8 <__fp_round+0x18>
    10d4:	60 ff       	sbrs	r22, 0
    10d6:	04 c0       	rjmp	.+8      	; 0x10e0 <__fp_round+0x20>
    10d8:	6f 5f       	subi	r22, 0xFF	; 255
    10da:	7f 4f       	sbci	r23, 0xFF	; 255
    10dc:	8f 4f       	sbci	r24, 0xFF	; 255
    10de:	9f 4f       	sbci	r25, 0xFF	; 255
    10e0:	08 95       	ret

000010e2 <__fp_split3>:
    10e2:	57 fd       	sbrc	r21, 7
    10e4:	90 58       	subi	r25, 0x80	; 128
    10e6:	44 0f       	add	r20, r20
    10e8:	55 1f       	adc	r21, r21
    10ea:	59 f0       	breq	.+22     	; 0x1102 <__fp_splitA+0x10>
    10ec:	5f 3f       	cpi	r21, 0xFF	; 255
    10ee:	71 f0       	breq	.+28     	; 0x110c <__fp_splitA+0x1a>
    10f0:	47 95       	ror	r20

000010f2 <__fp_splitA>:
    10f2:	88 0f       	add	r24, r24
    10f4:	97 fb       	bst	r25, 7
    10f6:	99 1f       	adc	r25, r25
    10f8:	61 f0       	breq	.+24     	; 0x1112 <__fp_splitA+0x20>
    10fa:	9f 3f       	cpi	r25, 0xFF	; 255
    10fc:	79 f0       	breq	.+30     	; 0x111c <__fp_splitA+0x2a>
    10fe:	87 95       	ror	r24
    1100:	08 95       	ret
    1102:	12 16       	cp	r1, r18
    1104:	13 06       	cpc	r1, r19
    1106:	14 06       	cpc	r1, r20
    1108:	55 1f       	adc	r21, r21
    110a:	f2 cf       	rjmp	.-28     	; 0x10f0 <__fp_split3+0xe>
    110c:	46 95       	lsr	r20
    110e:	f1 df       	rcall	.-30     	; 0x10f2 <__fp_splitA>
    1110:	08 c0       	rjmp	.+16     	; 0x1122 <__fp_splitA+0x30>
    1112:	16 16       	cp	r1, r22
    1114:	17 06       	cpc	r1, r23
    1116:	18 06       	cpc	r1, r24
    1118:	99 1f       	adc	r25, r25
    111a:	f1 cf       	rjmp	.-30     	; 0x10fe <__fp_splitA+0xc>
    111c:	86 95       	lsr	r24
    111e:	71 05       	cpc	r23, r1
    1120:	61 05       	cpc	r22, r1
    1122:	08 94       	sec
    1124:	08 95       	ret

00001126 <__fp_zero>:
    1126:	e8 94       	clt

00001128 <__fp_szero>:
    1128:	bb 27       	eor	r27, r27
    112a:	66 27       	eor	r22, r22
    112c:	77 27       	eor	r23, r23
    112e:	cb 01       	movw	r24, r22
    1130:	97 f9       	bld	r25, 7
    1132:	08 95       	ret

00001134 <__mulsf3>:
    1134:	0e 94 ad 08 	call	0x115a	; 0x115a <__mulsf3x>
    1138:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_round>
    113c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fp_pscA>
    1140:	38 f0       	brcs	.+14     	; 0x1150 <__mulsf3+0x1c>
    1142:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__fp_pscB>
    1146:	20 f0       	brcs	.+8      	; 0x1150 <__mulsf3+0x1c>
    1148:	95 23       	and	r25, r21
    114a:	11 f0       	breq	.+4      	; 0x1150 <__mulsf3+0x1c>
    114c:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__fp_inf>
    1150:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__fp_nan>
    1154:	11 24       	eor	r1, r1
    1156:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__fp_szero>

0000115a <__mulsf3x>:
    115a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__fp_split3>
    115e:	70 f3       	brcs	.-36     	; 0x113c <__mulsf3+0x8>

00001160 <__mulsf3_pse>:
    1160:	95 9f       	mul	r25, r21
    1162:	c1 f3       	breq	.-16     	; 0x1154 <__mulsf3+0x20>
    1164:	95 0f       	add	r25, r21
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	55 1f       	adc	r21, r21
    116a:	62 9f       	mul	r22, r18
    116c:	f0 01       	movw	r30, r0
    116e:	72 9f       	mul	r23, r18
    1170:	bb 27       	eor	r27, r27
    1172:	f0 0d       	add	r31, r0
    1174:	b1 1d       	adc	r27, r1
    1176:	63 9f       	mul	r22, r19
    1178:	aa 27       	eor	r26, r26
    117a:	f0 0d       	add	r31, r0
    117c:	b1 1d       	adc	r27, r1
    117e:	aa 1f       	adc	r26, r26
    1180:	64 9f       	mul	r22, r20
    1182:	66 27       	eor	r22, r22
    1184:	b0 0d       	add	r27, r0
    1186:	a1 1d       	adc	r26, r1
    1188:	66 1f       	adc	r22, r22
    118a:	82 9f       	mul	r24, r18
    118c:	22 27       	eor	r18, r18
    118e:	b0 0d       	add	r27, r0
    1190:	a1 1d       	adc	r26, r1
    1192:	62 1f       	adc	r22, r18
    1194:	73 9f       	mul	r23, r19
    1196:	b0 0d       	add	r27, r0
    1198:	a1 1d       	adc	r26, r1
    119a:	62 1f       	adc	r22, r18
    119c:	83 9f       	mul	r24, r19
    119e:	a0 0d       	add	r26, r0
    11a0:	61 1d       	adc	r22, r1
    11a2:	22 1f       	adc	r18, r18
    11a4:	74 9f       	mul	r23, r20
    11a6:	33 27       	eor	r19, r19
    11a8:	a0 0d       	add	r26, r0
    11aa:	61 1d       	adc	r22, r1
    11ac:	23 1f       	adc	r18, r19
    11ae:	84 9f       	mul	r24, r20
    11b0:	60 0d       	add	r22, r0
    11b2:	21 1d       	adc	r18, r1
    11b4:	82 2f       	mov	r24, r18
    11b6:	76 2f       	mov	r23, r22
    11b8:	6a 2f       	mov	r22, r26
    11ba:	11 24       	eor	r1, r1
    11bc:	9f 57       	subi	r25, 0x7F	; 127
    11be:	50 40       	sbci	r21, 0x00	; 0
    11c0:	9a f0       	brmi	.+38     	; 0x11e8 <__mulsf3_pse+0x88>
    11c2:	f1 f0       	breq	.+60     	; 0x1200 <__mulsf3_pse+0xa0>
    11c4:	88 23       	and	r24, r24
    11c6:	4a f0       	brmi	.+18     	; 0x11da <__mulsf3_pse+0x7a>
    11c8:	ee 0f       	add	r30, r30
    11ca:	ff 1f       	adc	r31, r31
    11cc:	bb 1f       	adc	r27, r27
    11ce:	66 1f       	adc	r22, r22
    11d0:	77 1f       	adc	r23, r23
    11d2:	88 1f       	adc	r24, r24
    11d4:	91 50       	subi	r25, 0x01	; 1
    11d6:	50 40       	sbci	r21, 0x00	; 0
    11d8:	a9 f7       	brne	.-22     	; 0x11c4 <__mulsf3_pse+0x64>
    11da:	9e 3f       	cpi	r25, 0xFE	; 254
    11dc:	51 05       	cpc	r21, r1
    11de:	80 f0       	brcs	.+32     	; 0x1200 <__mulsf3_pse+0xa0>
    11e0:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__fp_inf>
    11e4:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__fp_szero>
    11e8:	5f 3f       	cpi	r21, 0xFF	; 255
    11ea:	e4 f3       	brlt	.-8      	; 0x11e4 <__mulsf3_pse+0x84>
    11ec:	98 3e       	cpi	r25, 0xE8	; 232
    11ee:	d4 f3       	brlt	.-12     	; 0x11e4 <__mulsf3_pse+0x84>
    11f0:	86 95       	lsr	r24
    11f2:	77 95       	ror	r23
    11f4:	67 95       	ror	r22
    11f6:	b7 95       	ror	r27
    11f8:	f7 95       	ror	r31
    11fa:	e7 95       	ror	r30
    11fc:	9f 5f       	subi	r25, 0xFF	; 255
    11fe:	c1 f7       	brne	.-16     	; 0x11f0 <__mulsf3_pse+0x90>
    1200:	fe 2b       	or	r31, r30
    1202:	88 0f       	add	r24, r24
    1204:	91 1d       	adc	r25, r1
    1206:	96 95       	lsr	r25
    1208:	87 95       	ror	r24
    120a:	97 f9       	bld	r25, 7
    120c:	08 95       	ret

0000120e <__udivmodsi4>:
    120e:	a1 e2       	ldi	r26, 0x21	; 33
    1210:	1a 2e       	mov	r1, r26
    1212:	aa 1b       	sub	r26, r26
    1214:	bb 1b       	sub	r27, r27
    1216:	fd 01       	movw	r30, r26
    1218:	0d c0       	rjmp	.+26     	; 0x1234 <__udivmodsi4_ep>

0000121a <__udivmodsi4_loop>:
    121a:	aa 1f       	adc	r26, r26
    121c:	bb 1f       	adc	r27, r27
    121e:	ee 1f       	adc	r30, r30
    1220:	ff 1f       	adc	r31, r31
    1222:	a2 17       	cp	r26, r18
    1224:	b3 07       	cpc	r27, r19
    1226:	e4 07       	cpc	r30, r20
    1228:	f5 07       	cpc	r31, r21
    122a:	20 f0       	brcs	.+8      	; 0x1234 <__udivmodsi4_ep>
    122c:	a2 1b       	sub	r26, r18
    122e:	b3 0b       	sbc	r27, r19
    1230:	e4 0b       	sbc	r30, r20
    1232:	f5 0b       	sbc	r31, r21

00001234 <__udivmodsi4_ep>:
    1234:	66 1f       	adc	r22, r22
    1236:	77 1f       	adc	r23, r23
    1238:	88 1f       	adc	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	1a 94       	dec	r1
    123e:	69 f7       	brne	.-38     	; 0x121a <__udivmodsi4_loop>
    1240:	60 95       	com	r22
    1242:	70 95       	com	r23
    1244:	80 95       	com	r24
    1246:	90 95       	com	r25
    1248:	9b 01       	movw	r18, r22
    124a:	ac 01       	movw	r20, r24
    124c:	bd 01       	movw	r22, r26
    124e:	cf 01       	movw	r24, r30
    1250:	08 95       	ret

00001252 <__divmodsi4>:
    1252:	05 2e       	mov	r0, r21
    1254:	97 fb       	bst	r25, 7
    1256:	1e f4       	brtc	.+6      	; 0x125e <__divmodsi4+0xc>
    1258:	00 94       	com	r0
    125a:	0e 94 40 09 	call	0x1280	; 0x1280 <__negsi2>
    125e:	57 fd       	sbrc	r21, 7
    1260:	07 d0       	rcall	.+14     	; 0x1270 <__divmodsi4_neg2>
    1262:	0e 94 07 09 	call	0x120e	; 0x120e <__udivmodsi4>
    1266:	07 fc       	sbrc	r0, 7
    1268:	03 d0       	rcall	.+6      	; 0x1270 <__divmodsi4_neg2>
    126a:	4e f4       	brtc	.+18     	; 0x127e <__divmodsi4_exit>
    126c:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__negsi2>

00001270 <__divmodsi4_neg2>:
    1270:	50 95       	com	r21
    1272:	40 95       	com	r20
    1274:	30 95       	com	r19
    1276:	21 95       	neg	r18
    1278:	3f 4f       	sbci	r19, 0xFF	; 255
    127a:	4f 4f       	sbci	r20, 0xFF	; 255
    127c:	5f 4f       	sbci	r21, 0xFF	; 255

0000127e <__divmodsi4_exit>:
    127e:	08 95       	ret

00001280 <__negsi2>:
    1280:	90 95       	com	r25
    1282:	80 95       	com	r24
    1284:	70 95       	com	r23
    1286:	61 95       	neg	r22
    1288:	7f 4f       	sbci	r23, 0xFF	; 255
    128a:	8f 4f       	sbci	r24, 0xFF	; 255
    128c:	9f 4f       	sbci	r25, 0xFF	; 255
    128e:	08 95       	ret

00001290 <_exit>:
    1290:	f8 94       	cli

00001292 <__stop_program>:
    1292:	ff cf       	rjmp	.-2      	; 0x1292 <__stop_program>
