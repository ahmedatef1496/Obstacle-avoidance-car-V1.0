
Obstacle-avoidance-car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001880  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  00800060  00001880  00001914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  008000e4  008000e4  00001998  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000438  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000042b0  00000000  00000000  00001e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000140e  00000000  00000000  000060ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000235e  00000000  00000000  000074fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b48  00000000  00000000  00009858  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001412  00000000  00000000  0000a3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002717  00000000  00000000  0000b7b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000370  00000000  00000000  0000dec9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__vector_1>
       8:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__vector_2>
       c:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__vector_5>
      18:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__vector_8>
      24:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3e       	cpi	r26, 0xE4	; 228
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a4 ee       	ldi	r26, 0xE4	; 228
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 31       	cpi	r26, 0x11	; 17
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3f 04 	call	0x87e	; 0x87e <main>
      8a:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Speed_50_check>:
}*/


void Speed_50_check()
{
	if(g_speed_flag == 1)
      92:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <g_speed_flag>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	c9 f5       	brne	.+114    	; 0x10c <Speed_50_check+0x7a>
	{
		
		if (ovf < mode_ovf ){
      9a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ovf>
      9e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <ovf+0x1>
      a2:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <ovf+0x2>
      a6:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <ovf+0x3>
      aa:	40 91 fc 00 	lds	r20, 0x00FC	; 0x8000fc <mode_ovf>
      ae:	50 91 fd 00 	lds	r21, 0x00FD	; 0x8000fd <mode_ovf+0x1>
      b2:	60 91 fe 00 	lds	r22, 0x00FE	; 0x8000fe <mode_ovf+0x2>
      b6:	70 91 ff 00 	lds	r23, 0x00FF	; 0x8000ff <mode_ovf+0x3>
      ba:	84 17       	cp	r24, r20
      bc:	95 07       	cpc	r25, r21
      be:	a6 07       	cpc	r26, r22
      c0:	b7 07       	cpc	r27, r23
      c2:	64 f4       	brge	.+24     	; 0xdc <Speed_50_check+0x4a>
			ovf++;
      c4:	01 96       	adiw	r24, 0x01	; 1
      c6:	a1 1d       	adc	r26, r1
      c8:	b1 1d       	adc	r27, r1
      ca:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ovf>
      ce:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <ovf+0x1>
      d2:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <ovf+0x2>
      d6:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <ovf+0x3>
      da:	08 95       	ret
		}
		else if ( ovf == mode_ovf && mode_ovf!=0)
      dc:	84 17       	cp	r24, r20
      de:	95 07       	cpc	r25, r21
      e0:	a6 07       	cpc	r26, r22
      e2:	b7 07       	cpc	r27, r23
      e4:	99 f4       	brne	.+38     	; 0x10c <Speed_50_check+0x7a>
      e6:	45 2b       	or	r20, r21
      e8:	46 2b       	or	r20, r22
      ea:	47 2b       	or	r20, r23
      ec:	79 f0       	breq	.+30     	; 0x10c <Speed_50_check+0x7a>
		{
			ovf =0 ;
      ee:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ovf>
      f2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <ovf+0x1>
      f6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <ovf+0x2>
      fa:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <ovf+0x3>
			if (car_mode ==0)
      fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <car_mode>
     102:	81 11       	cpse	r24, r1
     104:	03 c0       	rjmp	.+6      	; 0x10c <Speed_50_check+0x7a>
			{
				car_mode=1;	
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <car_mode>
     10c:	08 95       	ret

0000010e <car_Forward_30>:



void car_Forward_30()
{	
	LCD_Clear();
     10e:	0e 94 14 03 	call	0x628	; 0x628 <LCD_Clear>
	PWM_set_duty(30,100);
     112:	44 e6       	ldi	r20, 0x64	; 100
     114:	50 e0       	ldi	r21, 0x00	; 0
     116:	60 e0       	ldi	r22, 0x00	; 0
     118:	70 e0       	ldi	r23, 0x00	; 0
     11a:	8e e1       	ldi	r24, 0x1E	; 30
     11c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <PWM_set_duty>
	timer_start(TIMER0_SCALER_8);
     120:	82 e0       	ldi	r24, 0x02	; 2
     122:	0e 94 5d 08 	call	0x10ba	; 0x10ba <timer_start>
	Car_Moving_FWD();
     126:	0e 94 ae 03 	call	0x75c	; 0x75c <Car_Moving_FWD>
	LCD_SetCursor(0,0);
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_SetCursor>
	LCD_WriteString("Speed:30% Dir:	F");
     132:	83 e6       	ldi	r24, 0x63	; 99
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_WriteString>
	LCD_SetCursor(1,0);
     13a:	60 e0       	ldi	r22, 0x00	; 0
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_SetCursor>
	LCD_WriteString("Dist.:");
     142:	84 e7       	ldi	r24, 0x74	; 116
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_WriteString>
	LCD_WriteNumber(g_distance);
     14a:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <g_distance>
     14e:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <g_distance+0x1>
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_WriteNumber>
	LCD_WriteString(" Cm");
     15a:	8b e7       	ldi	r24, 0x7B	; 123
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_WriteString>
     162:	08 95       	ret

00000164 <car_Forward_50>:
}

void car_Forward_50()
{
	LCD_Clear();
     164:	0e 94 14 03 	call	0x628	; 0x628 <LCD_Clear>
	PWM_set_duty(50,100);
     168:	44 e6       	ldi	r20, 0x64	; 100
     16a:	50 e0       	ldi	r21, 0x00	; 0
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	82 e3       	ldi	r24, 0x32	; 50
     172:	0e 94 cf 07 	call	0xf9e	; 0xf9e <PWM_set_duty>
	timer_start(TIMER0_SCALER_8);
     176:	82 e0       	ldi	r24, 0x02	; 2
     178:	0e 94 5d 08 	call	0x10ba	; 0x10ba <timer_start>
	Car_Moving_FWD();
     17c:	0e 94 ae 03 	call	0x75c	; 0x75c <Car_Moving_FWD>
	LCD_SetCursor(0,0);
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_SetCursor>
	LCD_WriteString("Speed:50% Dir:	F");
     188:	8f e7       	ldi	r24, 0x7F	; 127
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_WriteString>
	LCD_SetCursor(1,0);
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_SetCursor>
	LCD_WriteString("Dist.:");
     198:	84 e7       	ldi	r24, 0x74	; 116
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_WriteString>
	LCD_WriteNumber(g_distance);
     1a0:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <g_distance>
     1a4:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <g_distance+0x1>
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_WriteNumber>
	LCD_WriteString(" Cm");
     1b0:	8b e7       	ldi	r24, 0x7B	; 123
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_WriteString>
     1b8:	08 95       	ret

000001ba <car_Rotating>:
}

void car_Rotating()
{
	LCD_Clear();
     1ba:	0e 94 14 03 	call	0x628	; 0x628 <LCD_Clear>
	PWM_set_duty(30,100);
     1be:	44 e6       	ldi	r20, 0x64	; 100
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	8e e1       	ldi	r24, 0x1E	; 30
     1c8:	0e 94 cf 07 	call	0xf9e	; 0xf9e <PWM_set_duty>
	timer_start(TIMER0_SCALER_8);
     1cc:	82 e0       	ldi	r24, 0x02	; 2
     1ce:	0e 94 5d 08 	call	0x10ba	; 0x10ba <timer_start>
	LCD_SetCursor(0,0);
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_SetCursor>
	LCD_WriteString("Speed:30% Dir:	R");
     1da:	80 e9       	ldi	r24, 0x90	; 144
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_WriteString>
	LCD_SetCursor(1,0);
     1e2:	60 e0       	ldi	r22, 0x00	; 0
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_SetCursor>
	LCD_WriteString("Dist.:");
     1ea:	84 e7       	ldi	r24, 0x74	; 116
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_WriteString>
	LCD_WriteNumber(g_distance);
     1f2:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <g_distance>
     1f6:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <g_distance+0x1>
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_WriteNumber>
	LCD_WriteString(" Cm");
     202:	8b e7       	ldi	r24, 0x7B	; 123
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_WriteString>
	if (g_counter %2 == 0)
     20a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <g_counter>
     20e:	80 fd       	sbrc	r24, 0
     210:	03 c0       	rjmp	.+6      	; 0x218 <car_Rotating+0x5e>
	{
		Car_Rotate_Right();
     212:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <Car_Rotate_Right>
     216:	02 c0       	rjmp	.+4      	; 0x21c <car_Rotating+0x62>
	}
	else
	{
		Car_Rotate_Left();
     218:	0e 94 f6 03 	call	0x7ec	; 0x7ec <Car_Rotate_Left>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     21c:	2f ef       	ldi	r18, 0xFF	; 255
     21e:	8d e3       	ldi	r24, 0x3D	; 61
     220:	99 e4       	ldi	r25, 0x49	; 73
     222:	21 50       	subi	r18, 0x01	; 1
     224:	80 40       	sbci	r24, 0x00	; 0
     226:	90 40       	sbci	r25, 0x00	; 0
     228:	e1 f7       	brne	.-8      	; 0x222 <car_Rotating+0x68>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <car_Rotating+0x72>
     22c:	00 00       	nop
     22e:	08 95       	ret

00000230 <car_Backword_30>:
}


void car_Backword_30()
{
	while (g_distance <= 20)
     230:	2e c0       	rjmp	.+92     	; 0x28e <car_Backword_30+0x5e>
	{
		US_getdistance(&g_distance);
     232:	8b e0       	ldi	r24, 0x0B	; 11
     234:	91 e0       	ldi	r25, 0x01	; 1
     236:	0e 94 1b 04 	call	0x836	; 0x836 <US_getdistance>
		LCD_Clear();
     23a:	0e 94 14 03 	call	0x628	; 0x628 <LCD_Clear>
		PWM_set_duty(30,100);
     23e:	44 e6       	ldi	r20, 0x64	; 100
     240:	50 e0       	ldi	r21, 0x00	; 0
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	8e e1       	ldi	r24, 0x1E	; 30
     248:	0e 94 cf 07 	call	0xf9e	; 0xf9e <PWM_set_duty>
		timer_start(TIMER0_SCALER_8);
     24c:	82 e0       	ldi	r24, 0x02	; 2
     24e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <timer_start>
		Car_Moving_BWD();
     252:	0e 94 c0 03 	call	0x780	; 0x780 <Car_Moving_BWD>
		LCD_SetCursor(0,0);
     256:	60 e0       	ldi	r22, 0x00	; 0
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_SetCursor>
		LCD_WriteString("Speed:30% Dir:	B");
     25e:	81 ea       	ldi	r24, 0xA1	; 161
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_WriteString>
		LCD_SetCursor(1,0);
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_SetCursor>
		LCD_WriteString("Dist.:");
     26e:	84 e7       	ldi	r24, 0x74	; 116
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_WriteString>
		LCD_WriteNumber(g_distance);
     276:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <g_distance>
     27a:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <g_distance+0x1>
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_WriteNumber>
		LCD_WriteString(" Cm");
     286:	8b e7       	ldi	r24, 0x7B	; 123
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_WriteString>
}


void car_Backword_30()
{
	while (g_distance <= 20)
     28e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <g_distance>
     292:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <g_distance+0x1>
     296:	45 97       	sbiw	r24, 0x15	; 21
     298:	60 f2       	brcs	.-104    	; 0x232 <car_Backword_30+0x2>
		LCD_WriteString("Dist.:");
		LCD_WriteNumber(g_distance);
		LCD_WriteString(" Cm");
	}
	
}
     29a:	08 95       	ret

0000029c <Car_Stopping>:


void Car_Stopping()
{
	LCD_Clear();
     29c:	0e 94 14 03 	call	0x628	; 0x628 <LCD_Clear>
	PWM_set_duty(0,100);
     2a0:	44 e6       	ldi	r20, 0x64	; 100
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0e 94 cf 07 	call	0xf9e	; 0xf9e <PWM_set_duty>
	timer_start(TIMER0_SCALER_8);
     2ae:	82 e0       	ldi	r24, 0x02	; 2
     2b0:	0e 94 5d 08 	call	0x10ba	; 0x10ba <timer_start>
	Car_Stop();
     2b4:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <Car_Stop>
	LCD_SetCursor(0,0);
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_SetCursor>
	LCD_WriteString("Speed:00% Dir:	S");
     2c0:	82 eb       	ldi	r24, 0xB2	; 178
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_WriteString>
	LCD_SetCursor(1,0);
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_SetCursor>
	LCD_WriteString("Dist.:");
     2d0:	84 e7       	ldi	r24, 0x74	; 116
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_WriteString>
	LCD_WriteNumber(g_distance);
     2d8:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <g_distance>
     2dc:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <g_distance+0x1>
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_WriteNumber>
	LCD_WriteString(" Cm");
     2e8:	8b e7       	ldi	r24, 0x7B	; 123
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_WriteString>
     2f0:	08 95       	ret

000002f2 <app_init>:
	}
}

void app_init()
{
	LCD_PinsInit();
     2f2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCD_PinsInit>
	LCD_Init();
     2f6:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_Init>
	GLOBALE_ENABLE();
     2fa:	78 94       	sei
	pwm_init();
     2fc:	0e 94 c1 07 	call	0xf82	; 0xf82 <pwm_init>
	Car_Motors_init();
     300:	0e 94 9c 03 	call	0x738	; 0x738 <Car_Motors_init>
	LCD_Init();
     304:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_Init>
	KEYPAD_init();
     308:	0e 94 f7 01 	call	0x3ee	; 0x3ee <KEYPAD_init>
	DIO_initpin(PIND6,INPULL);
     30c:	62 e0       	ldi	r22, 0x02	; 2
     30e:	8e e1       	ldi	r24, 0x1E	; 30
     310:	0e 94 44 04 	call	0x888	; 0x888 <DIO_initpin>
	DIO_Init_All();
     314:	0e 94 55 05 	call	0xaaa	; 0xaaa <DIO_Init_All>
	US_init();
     318:	0e 94 18 04 	call	0x830	; 0x830 <US_init>
	TIMER_2_INT();
     31c:	0e 94 ab 09 	call	0x1356	; 0x1356 <TIMER_2_INT>
	TIMER2_OV_SetCallBack(Speed_50_check);
     320:	89 e4       	ldi	r24, 0x49	; 73
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 b7 09 	call	0x136e	; 0x136e <TIMER2_OV_SetCallBack>
     328:	08 95       	ret

0000032a <app_start>:
void app_start()
{
	//Start_stage();
	
	
	while (g_start_Flag)
     32a:	5c c0       	rjmp	.+184    	; 0x3e4 <app_start+0xba>
	{
		US_getdistance(&g_distance);
     32c:	8b e0       	ldi	r24, 0x0B	; 11
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	0e 94 1b 04 	call	0x836	; 0x836 <US_getdistance>
		if (g_distance > 70 && car_mode == 0)
     334:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <g_distance>
     338:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <g_distance+0x1>
     33c:	87 34       	cpi	r24, 0x47	; 71
     33e:	91 05       	cpc	r25, r1
     340:	b0 f0       	brcs	.+44     	; 0x36e <app_start+0x44>
     342:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <car_mode>
     346:	81 11       	cpse	r24, r1
     348:	12 c0       	rjmp	.+36     	; 0x36e <app_start+0x44>
		{
			car_Forward_30();
     34a:	0e 94 87 00 	call	0x10e	; 0x10e <car_Forward_30>
			g_speed_flag = 1;
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <g_speed_flag>
			mode_ovf = 100000;
     354:	80 ea       	ldi	r24, 0xA0	; 160
     356:	96 e8       	ldi	r25, 0x86	; 134
     358:	a1 e0       	ldi	r26, 0x01	; 1
     35a:	b0 e0       	ldi	r27, 0x00	; 0
     35c:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <mode_ovf>
     360:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <mode_ovf+0x1>
     364:	a0 93 fe 00 	sts	0x00FE, r26	; 0x8000fe <mode_ovf+0x2>
     368:	b0 93 ff 00 	sts	0x00FF, r27	; 0x8000ff <mode_ovf+0x3>
     36c:	3b c0       	rjmp	.+118    	; 0x3e4 <app_start+0xba>
		}
		else if (car_mode == 1 && g_distance > 70)
     36e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <car_mode>
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	51 f4       	brne	.+20     	; 0x38a <app_start+0x60>
     376:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <g_distance>
     37a:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <g_distance+0x1>
     37e:	87 34       	cpi	r24, 0x47	; 71
     380:	91 05       	cpc	r25, r1
     382:	18 f0       	brcs	.+6      	; 0x38a <app_start+0x60>
		{
			car_Forward_50();
     384:	0e 94 b2 00 	call	0x164	; 0x164 <car_Forward_50>
     388:	2d c0       	rjmp	.+90     	; 0x3e4 <app_start+0xba>
		}
		else if (g_distance <= 70 && g_distance > 30)
     38a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <g_distance>
     38e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <g_distance+0x1>
     392:	87 34       	cpi	r24, 0x47	; 71
     394:	91 05       	cpc	r25, r1
     396:	58 f4       	brcc	.+22     	; 0x3ae <app_start+0x84>
     398:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <g_distance>
     39c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <g_distance+0x1>
     3a0:	4f 97       	sbiw	r24, 0x1f	; 31
     3a2:	28 f0       	brcs	.+10     	; 0x3ae <app_start+0x84>
		{
			car_mode = 0;
     3a4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <car_mode>
			car_Forward_30();
     3a8:	0e 94 87 00 	call	0x10e	; 0x10e <car_Forward_30>
     3ac:	1b c0       	rjmp	.+54     	; 0x3e4 <app_start+0xba>
		}
		else if (g_distance <= 30 && g_distance > 20)
     3ae:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <g_distance>
     3b2:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <g_distance+0x1>
     3b6:	4f 97       	sbiw	r24, 0x1f	; 31
     3b8:	58 f4       	brcc	.+22     	; 0x3d0 <app_start+0xa6>
     3ba:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <g_distance>
     3be:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <g_distance+0x1>
     3c2:	45 97       	sbiw	r24, 0x15	; 21
     3c4:	28 f0       	brcs	.+10     	; 0x3d0 <app_start+0xa6>
		{
			Car_Stopping();
     3c6:	0e 94 4e 01 	call	0x29c	; 0x29c <Car_Stopping>
			
			car_Rotating();
     3ca:	0e 94 dd 00 	call	0x1ba	; 0x1ba <car_Rotating>
     3ce:	0a c0       	rjmp	.+20     	; 0x3e4 <app_start+0xba>
		}
		else if (g_distance <= 20)
     3d0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <g_distance>
     3d4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <g_distance+0x1>
     3d8:	45 97       	sbiw	r24, 0x15	; 21
     3da:	20 f4       	brcc	.+8      	; 0x3e4 <app_start+0xba>
		{
			Car_Stopping();
     3dc:	0e 94 4e 01 	call	0x29c	; 0x29c <Car_Stopping>
			car_Backword_30();
     3e0:	0e 94 18 01 	call	0x230	; 0x230 <car_Backword_30>
void app_start()
{
	//Start_stage();
	
	
	while (g_start_Flag)
     3e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3e8:	81 11       	cpse	r24, r1
     3ea:	a0 cf       	rjmp	.-192    	; 0x32c <app_start+0x2>
		{
			Car_Stopping();
			car_Backword_30();
		}
	}
     3ec:	08 95       	ret

000003ee <KEYPAD_init>:
		{BUTTON7, BUTTON8, BUTTON9}};
			
KEYPAD_initError KEYPAD_init(void){
	
	/*Set Column Initial Values to 1 */
	DIO_writepin (COL_1,HIGH);
     3ee:	61 e0       	ldi	r22, 0x01	; 1
     3f0:	88 e1       	ldi	r24, 0x18	; 24
     3f2:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	DIO_writepin (COL_2,HIGH);
     3f6:	61 e0       	ldi	r22, 0x01	; 1
     3f8:	89 e1       	ldi	r24, 0x19	; 25
     3fa:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	DIO_writepin (COL_3,HIGH);
     3fe:	61 e0       	ldi	r22, 0x01	; 1
     400:	8a e1       	ldi	r24, 0x1A	; 26
     402:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	
	/* Enable Pull Up Resistors at Input Rows */
	DIO_writepin (ROW_1,HIGH);
     406:	61 e0       	ldi	r22, 0x01	; 1
     408:	8b e1       	ldi	r24, 0x1B	; 27
     40a:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	DIO_writepin (ROW_2,HIGH);
     40e:	61 e0       	ldi	r22, 0x01	; 1
     410:	8c e1       	ldi	r24, 0x1C	; 28
     412:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	DIO_writepin (ROW_3,HIGH);
     416:	61 e0       	ldi	r22, 0x01	; 1
     418:	8d e1       	ldi	r24, 0x1D	; 29
     41a:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	
	return KEYPAD_initSuccess;
	
}
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	08 95       	ret

00000422 <WriteIns>:
	for(u8 i=0;i<8;i++)
	{
		WriteData(pattern[i]);
	}
	WriteIns(0x80);
}
     422:	cf 93       	push	r28
     424:	c8 2f       	mov	r28, r24
     426:	60 e0       	ldi	r22, 0x00	; 0
     428:	81 e1       	ldi	r24, 0x11	; 17
     42a:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     42e:	6c 2f       	mov	r22, r28
     430:	66 1f       	adc	r22, r22
     432:	66 27       	eor	r22, r22
     434:	66 1f       	adc	r22, r22
     436:	87 e1       	ldi	r24, 0x17	; 23
     438:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     43c:	c6 fb       	bst	r28, 6
     43e:	66 27       	eor	r22, r22
     440:	60 f9       	bld	r22, 0
     442:	86 e1       	ldi	r24, 0x16	; 22
     444:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     448:	c5 fb       	bst	r28, 5
     44a:	66 27       	eor	r22, r22
     44c:	60 f9       	bld	r22, 0
     44e:	85 e1       	ldi	r24, 0x15	; 21
     450:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     454:	c4 fb       	bst	r28, 4
     456:	66 27       	eor	r22, r22
     458:	60 f9       	bld	r22, 0
     45a:	84 e1       	ldi	r24, 0x14	; 20
     45c:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     460:	61 e0       	ldi	r22, 0x01	; 1
     462:	83 e1       	ldi	r24, 0x13	; 19
     464:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     468:	8f e9       	ldi	r24, 0x9F	; 159
     46a:	9f e0       	ldi	r25, 0x0F	; 15
     46c:	01 97       	sbiw	r24, 0x01	; 1
     46e:	f1 f7       	brne	.-4      	; 0x46c <WriteIns+0x4a>
     470:	00 c0       	rjmp	.+0      	; 0x472 <WriteIns+0x50>
     472:	00 00       	nop
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	83 e1       	ldi	r24, 0x13	; 19
     478:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     47c:	8f e9       	ldi	r24, 0x9F	; 159
     47e:	9f e0       	ldi	r25, 0x0F	; 15
     480:	01 97       	sbiw	r24, 0x01	; 1
     482:	f1 f7       	brne	.-4      	; 0x480 <WriteIns+0x5e>
     484:	00 c0       	rjmp	.+0      	; 0x486 <WriteIns+0x64>
     486:	00 00       	nop
     488:	c3 fb       	bst	r28, 3
     48a:	66 27       	eor	r22, r22
     48c:	60 f9       	bld	r22, 0
     48e:	87 e1       	ldi	r24, 0x17	; 23
     490:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     494:	c2 fb       	bst	r28, 2
     496:	66 27       	eor	r22, r22
     498:	60 f9       	bld	r22, 0
     49a:	86 e1       	ldi	r24, 0x16	; 22
     49c:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     4a0:	c1 fb       	bst	r28, 1
     4a2:	66 27       	eor	r22, r22
     4a4:	60 f9       	bld	r22, 0
     4a6:	85 e1       	ldi	r24, 0x15	; 21
     4a8:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     4ac:	6c 2f       	mov	r22, r28
     4ae:	61 70       	andi	r22, 0x01	; 1
     4b0:	84 e1       	ldi	r24, 0x14	; 20
     4b2:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	83 e1       	ldi	r24, 0x13	; 19
     4ba:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     4be:	8f e9       	ldi	r24, 0x9F	; 159
     4c0:	9f e0       	ldi	r25, 0x0F	; 15
     4c2:	01 97       	sbiw	r24, 0x01	; 1
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <WriteIns+0xa0>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <WriteIns+0xa6>
     4c8:	00 00       	nop
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	83 e1       	ldi	r24, 0x13	; 19
     4ce:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     4d2:	8f e9       	ldi	r24, 0x9F	; 159
     4d4:	9f e0       	ldi	r25, 0x0F	; 15
     4d6:	01 97       	sbiw	r24, 0x01	; 1
     4d8:	f1 f7       	brne	.-4      	; 0x4d6 <WriteIns+0xb4>
     4da:	00 c0       	rjmp	.+0      	; 0x4dc <WriteIns+0xba>
     4dc:	00 00       	nop
     4de:	cf 91       	pop	r28
     4e0:	08 95       	ret

000004e2 <WriteData>:
     4e2:	cf 93       	push	r28
     4e4:	c8 2f       	mov	r28, r24
     4e6:	61 e0       	ldi	r22, 0x01	; 1
     4e8:	81 e1       	ldi	r24, 0x11	; 17
     4ea:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     4ee:	6c 2f       	mov	r22, r28
     4f0:	66 1f       	adc	r22, r22
     4f2:	66 27       	eor	r22, r22
     4f4:	66 1f       	adc	r22, r22
     4f6:	87 e1       	ldi	r24, 0x17	; 23
     4f8:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     4fc:	c6 fb       	bst	r28, 6
     4fe:	66 27       	eor	r22, r22
     500:	60 f9       	bld	r22, 0
     502:	86 e1       	ldi	r24, 0x16	; 22
     504:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     508:	c5 fb       	bst	r28, 5
     50a:	66 27       	eor	r22, r22
     50c:	60 f9       	bld	r22, 0
     50e:	85 e1       	ldi	r24, 0x15	; 21
     510:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     514:	c4 fb       	bst	r28, 4
     516:	66 27       	eor	r22, r22
     518:	60 f9       	bld	r22, 0
     51a:	84 e1       	ldi	r24, 0x14	; 20
     51c:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     520:	61 e0       	ldi	r22, 0x01	; 1
     522:	83 e1       	ldi	r24, 0x13	; 19
     524:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     528:	8f e9       	ldi	r24, 0x9F	; 159
     52a:	9f e0       	ldi	r25, 0x0F	; 15
     52c:	01 97       	sbiw	r24, 0x01	; 1
     52e:	f1 f7       	brne	.-4      	; 0x52c <WriteData+0x4a>
     530:	00 c0       	rjmp	.+0      	; 0x532 <WriteData+0x50>
     532:	00 00       	nop
     534:	60 e0       	ldi	r22, 0x00	; 0
     536:	83 e1       	ldi	r24, 0x13	; 19
     538:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     53c:	8f e9       	ldi	r24, 0x9F	; 159
     53e:	9f e0       	ldi	r25, 0x0F	; 15
     540:	01 97       	sbiw	r24, 0x01	; 1
     542:	f1 f7       	brne	.-4      	; 0x540 <WriteData+0x5e>
     544:	00 c0       	rjmp	.+0      	; 0x546 <WriteData+0x64>
     546:	00 00       	nop
     548:	c3 fb       	bst	r28, 3
     54a:	66 27       	eor	r22, r22
     54c:	60 f9       	bld	r22, 0
     54e:	87 e1       	ldi	r24, 0x17	; 23
     550:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     554:	c2 fb       	bst	r28, 2
     556:	66 27       	eor	r22, r22
     558:	60 f9       	bld	r22, 0
     55a:	86 e1       	ldi	r24, 0x16	; 22
     55c:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     560:	c1 fb       	bst	r28, 1
     562:	66 27       	eor	r22, r22
     564:	60 f9       	bld	r22, 0
     566:	85 e1       	ldi	r24, 0x15	; 21
     568:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     56c:	6c 2f       	mov	r22, r28
     56e:	61 70       	andi	r22, 0x01	; 1
     570:	84 e1       	ldi	r24, 0x14	; 20
     572:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     576:	61 e0       	ldi	r22, 0x01	; 1
     578:	83 e1       	ldi	r24, 0x13	; 19
     57a:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     57e:	8f e9       	ldi	r24, 0x9F	; 159
     580:	9f e0       	ldi	r25, 0x0F	; 15
     582:	01 97       	sbiw	r24, 0x01	; 1
     584:	f1 f7       	brne	.-4      	; 0x582 <WriteData+0xa0>
     586:	00 c0       	rjmp	.+0      	; 0x588 <WriteData+0xa6>
     588:	00 00       	nop
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	83 e1       	ldi	r24, 0x13	; 19
     58e:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     592:	8f e9       	ldi	r24, 0x9F	; 159
     594:	9f e0       	ldi	r25, 0x0F	; 15
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <WriteData+0xb4>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <WriteData+0xba>
     59c:	00 00       	nop
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret

000005a2 <LCD_Init>:
     5a2:	2f ef       	ldi	r18, 0xFF	; 255
     5a4:	80 e7       	ldi	r24, 0x70	; 112
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	21 50       	subi	r18, 0x01	; 1
     5aa:	80 40       	sbci	r24, 0x00	; 0
     5ac:	90 40       	sbci	r25, 0x00	; 0
     5ae:	e1 f7       	brne	.-8      	; 0x5a8 <LCD_Init+0x6>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <LCD_Init+0x10>
     5b2:	00 00       	nop
     5b4:	82 e0       	ldi	r24, 0x02	; 2
     5b6:	0e 94 11 02 	call	0x422	; 0x422 <WriteIns>
     5ba:	88 e2       	ldi	r24, 0x28	; 40
     5bc:	0e 94 11 02 	call	0x422	; 0x422 <WriteIns>
     5c0:	8c e0       	ldi	r24, 0x0C	; 12
     5c2:	0e 94 11 02 	call	0x422	; 0x422 <WriteIns>
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	0e 94 11 02 	call	0x422	; 0x422 <WriteIns>
     5cc:	8f e9       	ldi	r24, 0x9F	; 159
     5ce:	9f e0       	ldi	r25, 0x0F	; 15
     5d0:	01 97       	sbiw	r24, 0x01	; 1
     5d2:	f1 f7       	brne	.-4      	; 0x5d0 <LCD_Init+0x2e>
     5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <LCD_Init+0x34>
     5d6:	00 00       	nop
     5d8:	86 e0       	ldi	r24, 0x06	; 6
     5da:	0e 94 11 02 	call	0x422	; 0x422 <WriteIns>
     5de:	08 95       	ret

000005e0 <LCD_WriteChar>:
     5e0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <WriteData>
     5e4:	08 95       	ret

000005e6 <LCD_WriteString>:
     5e6:	0f 93       	push	r16
     5e8:	1f 93       	push	r17
     5ea:	cf 93       	push	r28
     5ec:	8c 01       	movw	r16, r24
     5ee:	c0 e0       	ldi	r28, 0x00	; 0
     5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <LCD_WriteString+0x12>
     5f2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCD_WriteChar>
     5f6:	cf 5f       	subi	r28, 0xFF	; 255
     5f8:	f8 01       	movw	r30, r16
     5fa:	ec 0f       	add	r30, r28
     5fc:	f1 1d       	adc	r31, r1
     5fe:	80 81       	ld	r24, Z
     600:	81 11       	cpse	r24, r1
     602:	f7 cf       	rjmp	.-18     	; 0x5f2 <LCD_WriteString+0xc>
     604:	cf 91       	pop	r28
     606:	1f 91       	pop	r17
     608:	0f 91       	pop	r16
     60a:	08 95       	ret

0000060c <LCD_SetCursor>:
     60c:	81 11       	cpse	r24, r1
     60e:	05 c0       	rjmp	.+10     	; 0x61a <LCD_SetCursor+0xe>
     610:	86 2f       	mov	r24, r22
     612:	80 68       	ori	r24, 0x80	; 128
     614:	0e 94 11 02 	call	0x422	; 0x422 <WriteIns>
     618:	08 95       	ret
     61a:	81 30       	cpi	r24, 0x01	; 1
     61c:	21 f4       	brne	.+8      	; 0x626 <LCD_SetCursor+0x1a>
     61e:	80 ec       	ldi	r24, 0xC0	; 192
     620:	86 0f       	add	r24, r22
     622:	0e 94 11 02 	call	0x422	; 0x422 <WriteIns>
     626:	08 95       	ret

00000628 <LCD_Clear>:
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	0e 94 11 02 	call	0x422	; 0x422 <WriteIns>
     62e:	8f e9       	ldi	r24, 0x9F	; 159
     630:	9f e0       	ldi	r25, 0x0F	; 15
     632:	01 97       	sbiw	r24, 0x01	; 1
     634:	f1 f7       	brne	.-4      	; 0x632 <LCD_Clear+0xa>
     636:	00 c0       	rjmp	.+0      	; 0x638 <LCD_Clear+0x10>
     638:	00 00       	nop
     63a:	08 95       	ret

0000063c <LCD_WriteNumber>:
     63c:	cf 92       	push	r12
     63e:	df 92       	push	r13
     640:	ef 92       	push	r14
     642:	ff 92       	push	r15
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
     64e:	2a 97       	sbiw	r28, 0x0a	; 10
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	6b 01       	movw	r12, r22
     65c:	7c 01       	movw	r14, r24
     65e:	61 15       	cp	r22, r1
     660:	71 05       	cpc	r23, r1
     662:	81 05       	cpc	r24, r1
     664:	91 05       	cpc	r25, r1
     666:	21 f4       	brne	.+8      	; 0x670 <LCD_WriteNumber+0x34>
     668:	80 e3       	ldi	r24, 0x30	; 48
     66a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCD_WriteChar>
     66e:	39 c0       	rjmp	.+114    	; 0x6e2 <LCD_WriteNumber+0xa6>
     670:	99 23       	and	r25, r25
     672:	5c f4       	brge	.+22     	; 0x68a <LCD_WriteNumber+0x4e>
     674:	f0 94       	com	r15
     676:	e0 94       	com	r14
     678:	d0 94       	com	r13
     67a:	c0 94       	com	r12
     67c:	c1 1c       	adc	r12, r1
     67e:	d1 1c       	adc	r13, r1
     680:	e1 1c       	adc	r14, r1
     682:	f1 1c       	adc	r15, r1
     684:	8d e2       	ldi	r24, 0x2D	; 45
     686:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCD_WriteChar>
     68a:	10 e0       	ldi	r17, 0x00	; 0
     68c:	15 c0       	rjmp	.+42     	; 0x6b8 <LCD_WriteNumber+0x7c>
     68e:	c7 01       	movw	r24, r14
     690:	b6 01       	movw	r22, r12
     692:	2a e0       	ldi	r18, 0x0A	; 10
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	40 e0       	ldi	r20, 0x00	; 0
     698:	50 e0       	ldi	r21, 0x00	; 0
     69a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__divmodsi4>
     69e:	e1 e0       	ldi	r30, 0x01	; 1
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	ec 0f       	add	r30, r28
     6a4:	fd 1f       	adc	r31, r29
     6a6:	e1 0f       	add	r30, r17
     6a8:	f1 1d       	adc	r31, r1
     6aa:	60 5d       	subi	r22, 0xD0	; 208
     6ac:	60 83       	st	Z, r22
     6ae:	1f 5f       	subi	r17, 0xFF	; 255
     6b0:	c2 2e       	mov	r12, r18
     6b2:	d3 2e       	mov	r13, r19
     6b4:	e4 2e       	mov	r14, r20
     6b6:	f5 2e       	mov	r15, r21
     6b8:	c1 14       	cp	r12, r1
     6ba:	d1 04       	cpc	r13, r1
     6bc:	e1 04       	cpc	r14, r1
     6be:	f1 04       	cpc	r15, r1
     6c0:	31 f7       	brne	.-52     	; 0x68e <LCD_WriteNumber+0x52>
     6c2:	0d c0       	rjmp	.+26     	; 0x6de <LCD_WriteNumber+0xa2>
     6c4:	e1 2f       	mov	r30, r17
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	31 97       	sbiw	r30, 0x01	; 1
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	8c 0f       	add	r24, r28
     6d0:	9d 1f       	adc	r25, r29
     6d2:	e8 0f       	add	r30, r24
     6d4:	f9 1f       	adc	r31, r25
     6d6:	80 81       	ld	r24, Z
     6d8:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCD_WriteChar>
     6dc:	11 50       	subi	r17, 0x01	; 1
     6de:	11 11       	cpse	r17, r1
     6e0:	f1 cf       	rjmp	.-30     	; 0x6c4 <LCD_WriteNumber+0x88>
     6e2:	2a 96       	adiw	r28, 0x0a	; 10
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	cd bf       	out	0x3d, r28	; 61
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	ff 90       	pop	r15
     6f6:	ef 90       	pop	r14
     6f8:	df 90       	pop	r13
     6fa:	cf 90       	pop	r12
     6fc:	08 95       	ret

000006fe <LCD_PinsInit>:
   void LCD_PinsInit ()
   {
	   DIO_initpin(RS,OUTPUT);
     6fe:	60 e0       	ldi	r22, 0x00	; 0
     700:	81 e1       	ldi	r24, 0x11	; 17
     702:	0e 94 44 04 	call	0x888	; 0x888 <DIO_initpin>
	   DIO_initpin(EN,OUTPUT);
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	83 e1       	ldi	r24, 0x13	; 19
     70a:	0e 94 44 04 	call	0x888	; 0x888 <DIO_initpin>
	   DIO_initpin(RW,OUTPUT);
     70e:	60 e0       	ldi	r22, 0x00	; 0
     710:	82 e1       	ldi	r24, 0x12	; 18
     712:	0e 94 44 04 	call	0x888	; 0x888 <DIO_initpin>
	   DIO_initpin(D4,OUTPUT);
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	84 e1       	ldi	r24, 0x14	; 20
     71a:	0e 94 44 04 	call	0x888	; 0x888 <DIO_initpin>
	   DIO_initpin(D5,OUTPUT);
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	85 e1       	ldi	r24, 0x15	; 21
     722:	0e 94 44 04 	call	0x888	; 0x888 <DIO_initpin>
	   DIO_initpin(D6,OUTPUT);
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	86 e1       	ldi	r24, 0x16	; 22
     72a:	0e 94 44 04 	call	0x888	; 0x888 <DIO_initpin>
	   DIO_initpin(D7,OUTPUT);
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	87 e1       	ldi	r24, 0x17	; 23
     732:	0e 94 44 04 	call	0x888	; 0x888 <DIO_initpin>
     736:	08 95       	ret

00000738 <Car_Motors_init>:
/**DESCRIPTION:-
  this function initializes the DIO pins connected to the motors to be output
  **/
en_MotorError_t Car_Motors_init (void)
{
	DIO_initpin(motor1_0,OUTPUT);
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	0e 94 44 04 	call	0x888	; 0x888 <DIO_initpin>
	DIO_initpin(motor1_1,OUTPUT);
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	0e 94 44 04 	call	0x888	; 0x888 <DIO_initpin>
	DIO_initpin(motor2_0,OUTPUT);
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	82 e0       	ldi	r24, 0x02	; 2
     74c:	0e 94 44 04 	call	0x888	; 0x888 <DIO_initpin>
	DIO_initpin(motor2_1,OUTPUT);
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	0e 94 44 04 	call	0x888	; 0x888 <DIO_initpin>

	return motor_ok;
}
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	08 95       	ret

0000075c <Car_Moving_FWD>:
/**DESCRIPTION:-
this function is used to drive the motor to move in the +VE direction which will lead the car to move FWD
**/
en_MotorError_t Car_Moving_FWD(void)
{
	DIO_writepin(motor1_0,LOW);          //this is used to provide voltage to the +ve pin of the motor 
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	DIO_writepin(motor1_1,HIGH);           //this is used to provide the ground to the -ve pin of 
     764:	61 e0       	ldi	r22, 0x01	; 1
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	DIO_writepin(motor2_0,LOW);
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	DIO_writepin(motor2_1,HIGH);
     774:	61 e0       	ldi	r22, 0x01	; 1
     776:	83 e0       	ldi	r24, 0x03	; 3
     778:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	
	return motor_ok;

}
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	08 95       	ret

00000780 <Car_Moving_BWD>:
/**DESCRIPTION:-
this function is used to drive the motor to move in the -VE direction which will lead the car to move BWD
**/
en_MotorError_t Car_Moving_BWD(void)
{
	DIO_writepin(motor1_0,HIGH);          //this is used to provide voltage to the -ve pin of the motor
     780:	61 e0       	ldi	r22, 0x01	; 1
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	DIO_writepin(motor1_1,LOW);           //this is used to provide the ground to the +ve pin of
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	DIO_writepin(motor2_0,HIGH);
     790:	61 e0       	ldi	r22, 0x01	; 1
     792:	82 e0       	ldi	r24, 0x02	; 2
     794:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	DIO_writepin(motor2_1,LOW);
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	83 e0       	ldi	r24, 0x03	; 3
     79c:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	
	return motor_ok;
}
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	08 95       	ret

000007a4 <Car_Stop>:
this function is used to stop the 4 wheels by stopping the 4 motors*/
en_MotorError_t Car_Stop(void)
{
	
	
  DIO_writepin(motor1_0,LOW);          
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
  DIO_writepin(motor1_1,LOW);           
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
  DIO_writepin(motor2_0,LOW);
     7b4:	60 e0       	ldi	r22, 0x00	; 0
     7b6:	82 e0       	ldi	r24, 0x02	; 2
     7b8:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
  DIO_writepin(motor2_1,LOW);
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	83 e0       	ldi	r24, 0x03	; 3
     7c0:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>

	return motor_ok;
}
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	08 95       	ret

000007c8 <Car_Rotate_Right>:
this function is used to drive the right wheels to move BWD, and the left wheels to move FWD,
which will lead to rotation of the car */
en_MotorError_t Car_Rotate_Right(void)
{
	//this is used to provide the ground to the -ve pin of
	DIO_writepin(motor1_0,HIGH);
     7c8:	61 e0       	ldi	r22, 0x01	; 1
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	DIO_writepin(motor1_1,LOW);
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	
	//this is used to provide voltage to the +ve pin of the motor
	DIO_writepin(motor2_0,LOW);
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	82 e0       	ldi	r24, 0x02	; 2
     7dc:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	DIO_writepin(motor2_1,HIGH);
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	83 e0       	ldi	r24, 0x03	; 3
     7e4:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>

	return motor_ok;
}
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	08 95       	ret

000007ec <Car_Rotate_Left>:
this function is used to drive the right wheels to move FWD, and the left wheels to move BWD,
which will lead to rotation of the car */
en_MotorError_t Car_Rotate_Left(void)
{
	//this is used to provide the ground to the +ve pin of
	DIO_writepin(motor1_0,LOW);
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	DIO_writepin(motor1_1,HIGH);
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	
	//this is used to provide voltage to the -ve pin of the motor
	DIO_writepin(motor2_0,HIGH);
     7fc:	61 e0       	ldi	r22, 0x01	; 1
     7fe:	82 e0       	ldi	r24, 0x02	; 2
     800:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	DIO_writepin(motor2_1,LOW);
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	83 e0       	ldi	r24, 0x03	; 3
     808:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>

	return motor_ok;
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	08 95       	ret

00000810 <US_trigger>:
	ICU_init();
}

static void US_trigger()
{
	DIO_writepin(ICU_TRIGGER_CH ,HIGH);
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	8b e0       	ldi	r24, 0x0B	; 11
     814:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     818:	8a e1       	ldi	r24, 0x1A	; 26
     81a:	8a 95       	dec	r24
     81c:	f1 f7       	brne	.-4      	; 0x81a <US_trigger+0xa>
     81e:	00 c0       	rjmp	.+0      	; 0x820 <US_trigger+0x10>
	_delay_us(10);
	DIO_writepin(ICU_TRIGGER_CH ,LOW);
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	8b e0       	ldi	r24, 0x0B	; 11
     824:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
	timer1_setTimerValue(0);
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	0e 94 70 09 	call	0x12e0	; 0x12e0 <timer1_setTimerValue>
     82e:	08 95       	ret

00000830 <US_init>:
volatile u8 flag=0;
volatile u16 t1,t2,t3;

void US_init()
{
	ICU_init();
     830:	0e 94 20 06 	call	0xc40	; 0xc40 <ICU_init>
     834:	08 95       	ret

00000836 <US_getdistance>:
	timer1_setTimerValue(0);
}


u8 US_getdistance(u16 *pu16_distance)
{
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	00 d0       	rcall	.+0      	; 0x840 <US_getdistance+0xa>
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
     844:	8c 01       	movw	r16, r24
	u16 icu_time;
	US_trigger();
     846:	0e 94 08 04 	call	0x810	; 0x810 <US_trigger>
	ICU_Read(&icu_time);
     84a:	ce 01       	movw	r24, r28
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	0e 94 31 06 	call	0xc62	; 0xc62 <ICU_Read>
	*pu16_distance =(icu_time/58);   
     852:	29 81       	ldd	r18, Y+1	; 0x01
     854:	3a 81       	ldd	r19, Y+2	; 0x02
     856:	af e9       	ldi	r26, 0x9F	; 159
     858:	b6 e4       	ldi	r27, 0x46	; 70
     85a:	0e 94 0d 0c 	call	0x181a	; 0x181a <__umulhisi3>
     85e:	92 95       	swap	r25
     860:	82 95       	swap	r24
     862:	8f 70       	andi	r24, 0x0F	; 15
     864:	89 27       	eor	r24, r25
     866:	9f 70       	andi	r25, 0x0F	; 15
     868:	89 27       	eor	r24, r25
     86a:	f8 01       	movw	r30, r16
     86c:	91 83       	std	Z+1, r25	; 0x01
     86e:	80 83       	st	Z, r24
}
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	0f 91       	pop	r16
     87c:	08 95       	ret

0000087e <main>:
#include "APP/app.h"

int main(void)
{   
	
	 app_init();
     87e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <app_init>

    while (1) 
    {
		app_start();
     882:	0e 94 95 01 	call	0x32a	; 0x32a <app_start>
     886:	fd cf       	rjmp	.-6      	; 0x882 <main+0x4>

00000888 <DIO_initpin>:
		  DIO_initpin(i,PinsStatusArray[i]);
	  }
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
     888:	98 2f       	mov	r25, r24
     88a:	96 95       	lsr	r25
     88c:	96 95       	lsr	r25
     88e:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     890:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error = DIO_OK;
	  
	  if (pin_num < 8)
	  {

		  switch(status)
     892:	61 30       	cpi	r22, 0x01	; 1
     894:	09 f4       	brne	.+2      	; 0x898 <DIO_initpin+0x10>
     896:	59 c0       	rjmp	.+178    	; 0x94a <DIO_initpin+0xc2>
     898:	20 f0       	brcs	.+8      	; 0x8a2 <DIO_initpin+0x1a>
     89a:	62 30       	cpi	r22, 0x02	; 2
     89c:	09 f4       	brne	.+2      	; 0x8a0 <DIO_initpin+0x18>
     89e:	a9 c0       	rjmp	.+338    	; 0x9f2 <DIO_initpin+0x16a>
     8a0:	fc c0       	rjmp	.+504    	; 0xa9a <DIO_initpin+0x212>
		  {
			  case OUTPUT:
			  switch(port)
     8a2:	91 30       	cpi	r25, 0x01	; 1
     8a4:	c9 f0       	breq	.+50     	; 0x8d8 <DIO_initpin+0x50>
     8a6:	28 f0       	brcs	.+10     	; 0x8b2 <DIO_initpin+0x2a>
     8a8:	92 30       	cpi	r25, 0x02	; 2
     8aa:	49 f1       	breq	.+82     	; 0x8fe <DIO_initpin+0x76>
     8ac:	93 30       	cpi	r25, 0x03	; 3
     8ae:	d1 f1       	breq	.+116    	; 0x924 <DIO_initpin+0x9c>
     8b0:	f6 c0       	rjmp	.+492    	; 0xa9e <DIO_initpin+0x216>
			  {
				  case PA:
				  SET_BIT( DDRA,pin_num);
     8b2:	4a b3       	in	r20, 0x1a	; 26
     8b4:	21 e0       	ldi	r18, 0x01	; 1
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	b9 01       	movw	r22, r18
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <DIO_initpin+0x38>
     8bc:	66 0f       	add	r22, r22
     8be:	77 1f       	adc	r23, r23
     8c0:	8a 95       	dec	r24
     8c2:	e2 f7       	brpl	.-8      	; 0x8bc <DIO_initpin+0x34>
     8c4:	cb 01       	movw	r24, r22
     8c6:	94 2f       	mov	r25, r20
     8c8:	98 2b       	or	r25, r24
     8ca:	9a bb       	out	0x1a, r25	; 26
				  CLR_BIT(PORTA,pin_num);
     8cc:	9b b3       	in	r25, 0x1b	; 27
     8ce:	80 95       	com	r24
     8d0:	89 23       	and	r24, r25
     8d2:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     8d4:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  SET_BIT( DDRA,pin_num);
				  CLR_BIT(PORTA,pin_num);
				  break;
     8d6:	08 95       	ret
				  case PB:
				  SET_BIT( DDRB,pin_num);
     8d8:	47 b3       	in	r20, 0x17	; 23
     8da:	21 e0       	ldi	r18, 0x01	; 1
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	b9 01       	movw	r22, r18
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <DIO_initpin+0x5e>
     8e2:	66 0f       	add	r22, r22
     8e4:	77 1f       	adc	r23, r23
     8e6:	8a 95       	dec	r24
     8e8:	e2 f7       	brpl	.-8      	; 0x8e2 <DIO_initpin+0x5a>
     8ea:	cb 01       	movw	r24, r22
     8ec:	94 2f       	mov	r25, r20
     8ee:	98 2b       	or	r25, r24
     8f0:	97 bb       	out	0x17, r25	; 23
				  CLR_BIT(PORTB,pin_num);
     8f2:	98 b3       	in	r25, 0x18	; 24
     8f4:	80 95       	com	r24
     8f6:	89 23       	and	r24, r25
     8f8:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     8fa:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  SET_BIT( DDRB,pin_num);
				  CLR_BIT(PORTB,pin_num);
				  break;
     8fc:	08 95       	ret
				  case PC:
				  SET_BIT( DDRC,pin_num);
     8fe:	44 b3       	in	r20, 0x14	; 20
     900:	21 e0       	ldi	r18, 0x01	; 1
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	b9 01       	movw	r22, r18
     906:	02 c0       	rjmp	.+4      	; 0x90c <DIO_initpin+0x84>
     908:	66 0f       	add	r22, r22
     90a:	77 1f       	adc	r23, r23
     90c:	8a 95       	dec	r24
     90e:	e2 f7       	brpl	.-8      	; 0x908 <DIO_initpin+0x80>
     910:	cb 01       	movw	r24, r22
     912:	94 2f       	mov	r25, r20
     914:	98 2b       	or	r25, r24
     916:	94 bb       	out	0x14, r25	; 20
				  CLR_BIT(PORTC,pin_num);
     918:	95 b3       	in	r25, 0x15	; 21
     91a:	80 95       	com	r24
     91c:	89 23       	and	r24, r25
     91e:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     920:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  SET_BIT( DDRC,pin_num);
				  CLR_BIT(PORTC,pin_num);
				  break;
     922:	08 95       	ret
				  case PD:
				  SET_BIT( DDRD,pin_num);
     924:	41 b3       	in	r20, 0x11	; 17
     926:	21 e0       	ldi	r18, 0x01	; 1
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	b9 01       	movw	r22, r18
     92c:	02 c0       	rjmp	.+4      	; 0x932 <DIO_initpin+0xaa>
     92e:	66 0f       	add	r22, r22
     930:	77 1f       	adc	r23, r23
     932:	8a 95       	dec	r24
     934:	e2 f7       	brpl	.-8      	; 0x92e <DIO_initpin+0xa6>
     936:	cb 01       	movw	r24, r22
     938:	94 2f       	mov	r25, r20
     93a:	98 2b       	or	r25, r24
     93c:	91 bb       	out	0x11, r25	; 17
				  CLR_BIT(PORTD,pin_num);
     93e:	92 b3       	in	r25, 0x12	; 18
     940:	80 95       	com	r24
     942:	89 23       	and	r24, r25
     944:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     946:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  SET_BIT( DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
     948:	08 95       	ret
				  error = WRONG_PORT_NUMBER;
				  break;
			  }
			  break;
			  case INFREE:
			  switch(port)
     94a:	91 30       	cpi	r25, 0x01	; 1
     94c:	c9 f0       	breq	.+50     	; 0x980 <DIO_initpin+0xf8>
     94e:	28 f0       	brcs	.+10     	; 0x95a <DIO_initpin+0xd2>
     950:	92 30       	cpi	r25, 0x02	; 2
     952:	49 f1       	breq	.+82     	; 0x9a6 <DIO_initpin+0x11e>
     954:	93 30       	cpi	r25, 0x03	; 3
     956:	d1 f1       	breq	.+116    	; 0x9cc <DIO_initpin+0x144>
     958:	a4 c0       	rjmp	.+328    	; 0xaa2 <DIO_initpin+0x21a>
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
     95a:	4a b3       	in	r20, 0x1a	; 26
     95c:	21 e0       	ldi	r18, 0x01	; 1
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	b9 01       	movw	r22, r18
     962:	02 c0       	rjmp	.+4      	; 0x968 <DIO_initpin+0xe0>
     964:	66 0f       	add	r22, r22
     966:	77 1f       	adc	r23, r23
     968:	8a 95       	dec	r24
     96a:	e2 f7       	brpl	.-8      	; 0x964 <DIO_initpin+0xdc>
     96c:	cb 01       	movw	r24, r22
     96e:	80 95       	com	r24
     970:	94 2f       	mov	r25, r20
     972:	98 23       	and	r25, r24
     974:	9a bb       	out	0x1a, r25	; 26
				  CLR_BIT(PORTA,pin_num);
     976:	9b b3       	in	r25, 0x1b	; 27
     978:	89 23       	and	r24, r25
     97a:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     97c:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
				  CLR_BIT(PORTA,pin_num);
				  break;
     97e:	08 95       	ret
				  case PB:
				  CLR_BIT(DDRB,pin_num);
     980:	47 b3       	in	r20, 0x17	; 23
     982:	21 e0       	ldi	r18, 0x01	; 1
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	b9 01       	movw	r22, r18
     988:	02 c0       	rjmp	.+4      	; 0x98e <DIO_initpin+0x106>
     98a:	66 0f       	add	r22, r22
     98c:	77 1f       	adc	r23, r23
     98e:	8a 95       	dec	r24
     990:	e2 f7       	brpl	.-8      	; 0x98a <DIO_initpin+0x102>
     992:	cb 01       	movw	r24, r22
     994:	80 95       	com	r24
     996:	94 2f       	mov	r25, r20
     998:	98 23       	and	r25, r24
     99a:	97 bb       	out	0x17, r25	; 23
				  CLR_BIT(PORTB,pin_num);
     99c:	98 b3       	in	r25, 0x18	; 24
     99e:	89 23       	and	r24, r25
     9a0:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     9a2:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  CLR_BIT(DDRB,pin_num);
				  CLR_BIT(PORTB,pin_num);
				  break;
     9a4:	08 95       	ret
				  case PC:
				  CLR_BIT(DDRC,pin_num);
     9a6:	44 b3       	in	r20, 0x14	; 20
     9a8:	21 e0       	ldi	r18, 0x01	; 1
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	b9 01       	movw	r22, r18
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <DIO_initpin+0x12c>
     9b0:	66 0f       	add	r22, r22
     9b2:	77 1f       	adc	r23, r23
     9b4:	8a 95       	dec	r24
     9b6:	e2 f7       	brpl	.-8      	; 0x9b0 <DIO_initpin+0x128>
     9b8:	cb 01       	movw	r24, r22
     9ba:	80 95       	com	r24
     9bc:	94 2f       	mov	r25, r20
     9be:	98 23       	and	r25, r24
     9c0:	94 bb       	out	0x14, r25	; 20
				  CLR_BIT(PORTC,pin_num);
     9c2:	95 b3       	in	r25, 0x15	; 21
     9c4:	89 23       	and	r24, r25
     9c6:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     9c8:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  CLR_BIT(DDRC,pin_num);
				  CLR_BIT(PORTC,pin_num);
				  break;
     9ca:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
     9cc:	41 b3       	in	r20, 0x11	; 17
     9ce:	21 e0       	ldi	r18, 0x01	; 1
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	b9 01       	movw	r22, r18
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <DIO_initpin+0x152>
     9d6:	66 0f       	add	r22, r22
     9d8:	77 1f       	adc	r23, r23
     9da:	8a 95       	dec	r24
     9dc:	e2 f7       	brpl	.-8      	; 0x9d6 <DIO_initpin+0x14e>
     9de:	cb 01       	movw	r24, r22
     9e0:	80 95       	com	r24
     9e2:	94 2f       	mov	r25, r20
     9e4:	98 23       	and	r25, r24
     9e6:	91 bb       	out	0x11, r25	; 17
				  CLR_BIT(PORTD,pin_num);
     9e8:	92 b3       	in	r25, 0x12	; 18
     9ea:	89 23       	and	r24, r25
     9ec:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     9ee:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
     9f0:	08 95       	ret
				  break;
			  }
			  break;

			  case INPULL:
			  switch(port)
     9f2:	91 30       	cpi	r25, 0x01	; 1
     9f4:	c9 f0       	breq	.+50     	; 0xa28 <DIO_initpin+0x1a0>
     9f6:	28 f0       	brcs	.+10     	; 0xa02 <DIO_initpin+0x17a>
     9f8:	92 30       	cpi	r25, 0x02	; 2
     9fa:	49 f1       	breq	.+82     	; 0xa4e <DIO_initpin+0x1c6>
     9fc:	93 30       	cpi	r25, 0x03	; 3
     9fe:	d1 f1       	breq	.+116    	; 0xa74 <DIO_initpin+0x1ec>
     a00:	52 c0       	rjmp	.+164    	; 0xaa6 <DIO_initpin+0x21e>
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
     a02:	4a b3       	in	r20, 0x1a	; 26
     a04:	21 e0       	ldi	r18, 0x01	; 1
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	b9 01       	movw	r22, r18
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <DIO_initpin+0x188>
     a0c:	66 0f       	add	r22, r22
     a0e:	77 1f       	adc	r23, r23
     a10:	8a 95       	dec	r24
     a12:	e2 f7       	brpl	.-8      	; 0xa0c <DIO_initpin+0x184>
     a14:	cb 01       	movw	r24, r22
     a16:	96 2f       	mov	r25, r22
     a18:	90 95       	com	r25
     a1a:	94 23       	and	r25, r20
     a1c:	9a bb       	out	0x1a, r25	; 26
				  SET_BIT(PORTA,pin_num);
     a1e:	9b b3       	in	r25, 0x1b	; 27
     a20:	89 2b       	or	r24, r25
     a22:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     a24:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
				  SET_BIT(PORTA,pin_num);
				  break;
     a26:	08 95       	ret
				  case PB:
				  CLR_BIT(DDRB,pin_num);
     a28:	47 b3       	in	r20, 0x17	; 23
     a2a:	21 e0       	ldi	r18, 0x01	; 1
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	b9 01       	movw	r22, r18
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <DIO_initpin+0x1ae>
     a32:	66 0f       	add	r22, r22
     a34:	77 1f       	adc	r23, r23
     a36:	8a 95       	dec	r24
     a38:	e2 f7       	brpl	.-8      	; 0xa32 <DIO_initpin+0x1aa>
     a3a:	cb 01       	movw	r24, r22
     a3c:	96 2f       	mov	r25, r22
     a3e:	90 95       	com	r25
     a40:	94 23       	and	r25, r20
     a42:	97 bb       	out	0x17, r25	; 23
				  SET_BIT(PORTB,pin_num);
     a44:	98 b3       	in	r25, 0x18	; 24
     a46:	89 2b       	or	r24, r25
     a48:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     a4a:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  CLR_BIT(DDRB,pin_num);
				  SET_BIT(PORTB,pin_num);
				  break;
     a4c:	08 95       	ret
				  case PC:
				  CLR_BIT(DDRC,pin_num);
     a4e:	44 b3       	in	r20, 0x14	; 20
     a50:	21 e0       	ldi	r18, 0x01	; 1
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	b9 01       	movw	r22, r18
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <DIO_initpin+0x1d4>
     a58:	66 0f       	add	r22, r22
     a5a:	77 1f       	adc	r23, r23
     a5c:	8a 95       	dec	r24
     a5e:	e2 f7       	brpl	.-8      	; 0xa58 <DIO_initpin+0x1d0>
     a60:	cb 01       	movw	r24, r22
     a62:	96 2f       	mov	r25, r22
     a64:	90 95       	com	r25
     a66:	94 23       	and	r25, r20
     a68:	94 bb       	out	0x14, r25	; 20
				  SET_BIT(PORTC,pin_num);
     a6a:	95 b3       	in	r25, 0x15	; 21
     a6c:	89 2b       	or	r24, r25
     a6e:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     a70:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  CLR_BIT(DDRC,pin_num);
				  SET_BIT(PORTC,pin_num);
				  break;
     a72:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
     a74:	41 b3       	in	r20, 0x11	; 17
     a76:	21 e0       	ldi	r18, 0x01	; 1
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	b9 01       	movw	r22, r18
     a7c:	02 c0       	rjmp	.+4      	; 0xa82 <DIO_initpin+0x1fa>
     a7e:	66 0f       	add	r22, r22
     a80:	77 1f       	adc	r23, r23
     a82:	8a 95       	dec	r24
     a84:	e2 f7       	brpl	.-8      	; 0xa7e <DIO_initpin+0x1f6>
     a86:	cb 01       	movw	r24, r22
     a88:	96 2f       	mov	r25, r22
     a8a:	90 95       	com	r25
     a8c:	94 23       	and	r25, r20
     a8e:	91 bb       	out	0x11, r25	; 17
				  SET_BIT(PORTD,pin_num);
     a90:	92 b3       	in	r25, 0x12	; 18
     a92:	89 2b       	or	r24, r25
     a94:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     a96:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  SET_BIT(PORTD,pin_num);
				  break;
     a98:	08 95       	ret
				  error = WRONG_PORT_NUMBER;
				  break;
			  }
			  break;
			  default:
			  error = WRONG_PORT_NUMBER;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	08 95       	ret
				  case PD:
				  SET_BIT( DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  SET_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     aa6:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
     aa8:	08 95       	ret

00000aaa <DIO_Init_All>:
	    return error;
    }
//////////////////////////////////////////////////////////////////////*/
//pin MODE
  void DIO_Init_All(void)
  {
     aaa:	cf 93       	push	r28
	  DIO_Pin_type i;
	  for (i=PINA0; i<TOTAL_PINS; i++)
     aac:	c0 e0       	ldi	r28, 0x00	; 0
     aae:	09 c0       	rjmp	.+18     	; 0xac2 <DIO_Init_All+0x18>
	  {
		  DIO_initpin(i,PinsStatusArray[i]);
     ab0:	ec 2f       	mov	r30, r28
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	ed 53       	subi	r30, 0x3D	; 61
     ab6:	ff 4f       	sbci	r31, 0xFF	; 255
     ab8:	60 81       	ld	r22, Z
     aba:	8c 2f       	mov	r24, r28
     abc:	0e 94 44 04 	call	0x888	; 0x888 <DIO_initpin>
//////////////////////////////////////////////////////////////////////*/
//pin MODE
  void DIO_Init_All(void)
  {
	  DIO_Pin_type i;
	  for (i=PINA0; i<TOTAL_PINS; i++)
     ac0:	cf 5f       	subi	r28, 0xFF	; 255
     ac2:	c0 32       	cpi	r28, 0x20	; 32
     ac4:	a8 f3       	brcs	.-22     	; 0xab0 <DIO_Init_All+0x6>
	  {
		  DIO_initpin(i,PinsStatusArray[i]);
	  }
  }
     ac6:	cf 91       	pop	r28
     ac8:	08 95       	ret

00000aca <DIO_writepin>:
	  return error;

  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
     aca:	98 2f       	mov	r25, r24
     acc:	96 95       	lsr	r25
     ace:	96 95       	lsr	r25
     ad0:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     ad2:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error= DIO_OK;
	  if (pin_num<8)
	  {
		  switch (volt)
     ad4:	66 23       	and	r22, r22
     ad6:	09 f4       	brne	.+2      	; 0xada <DIO_writepin+0x10>
     ad8:	43 c0       	rjmp	.+134    	; 0xb60 <DIO_writepin+0x96>
     ada:	61 30       	cpi	r22, 0x01	; 1
     adc:	09 f0       	breq	.+2      	; 0xae0 <DIO_writepin+0x16>
     ade:	84 c0       	rjmp	.+264    	; 0xbe8 <DIO_writepin+0x11e>
		  {
			  case HIGH:

			  switch(port)
     ae0:	91 30       	cpi	r25, 0x01	; 1
     ae2:	a1 f0       	breq	.+40     	; 0xb0c <DIO_writepin+0x42>
     ae4:	28 f0       	brcs	.+10     	; 0xaf0 <DIO_writepin+0x26>
     ae6:	92 30       	cpi	r25, 0x02	; 2
     ae8:	f9 f0       	breq	.+62     	; 0xb28 <DIO_writepin+0x5e>
     aea:	93 30       	cpi	r25, 0x03	; 3
     aec:	59 f1       	breq	.+86     	; 0xb44 <DIO_writepin+0x7a>
     aee:	7e c0       	rjmp	.+252    	; 0xbec <DIO_writepin+0x122>
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
     af0:	4b b3       	in	r20, 0x1b	; 27
     af2:	21 e0       	ldi	r18, 0x01	; 1
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	b9 01       	movw	r22, r18
     af8:	02 c0       	rjmp	.+4      	; 0xafe <DIO_writepin+0x34>
     afa:	66 0f       	add	r22, r22
     afc:	77 1f       	adc	r23, r23
     afe:	8a 95       	dec	r24
     b00:	e2 f7       	brpl	.-8      	; 0xafa <DIO_writepin+0x30>
     b02:	cb 01       	movw	r24, r22
     b04:	84 2b       	or	r24, r20
     b06:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     b08:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
				  break;
     b0a:	08 95       	ret
				  case PB:

				  SET_BIT(PORTB,pin_num);
     b0c:	48 b3       	in	r20, 0x18	; 24
     b0e:	21 e0       	ldi	r18, 0x01	; 1
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	b9 01       	movw	r22, r18
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <DIO_writepin+0x50>
     b16:	66 0f       	add	r22, r22
     b18:	77 1f       	adc	r23, r23
     b1a:	8a 95       	dec	r24
     b1c:	e2 f7       	brpl	.-8      	; 0xb16 <DIO_writepin+0x4c>
     b1e:	cb 01       	movw	r24, r22
     b20:	84 2b       	or	r24, r20
     b22:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     b24:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  SET_BIT(PORTB,pin_num);
				  break;
     b26:	08 95       	ret
				  case PC:

				  SET_BIT(PORTC,pin_num);
     b28:	45 b3       	in	r20, 0x15	; 21
     b2a:	21 e0       	ldi	r18, 0x01	; 1
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	b9 01       	movw	r22, r18
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <DIO_writepin+0x6c>
     b32:	66 0f       	add	r22, r22
     b34:	77 1f       	adc	r23, r23
     b36:	8a 95       	dec	r24
     b38:	e2 f7       	brpl	.-8      	; 0xb32 <DIO_writepin+0x68>
     b3a:	cb 01       	movw	r24, r22
     b3c:	84 2b       	or	r24, r20
     b3e:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     b40:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  SET_BIT(PORTC,pin_num);
				  break;
     b42:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
     b44:	42 b3       	in	r20, 0x12	; 18
     b46:	21 e0       	ldi	r18, 0x01	; 1
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	b9 01       	movw	r22, r18
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <DIO_writepin+0x88>
     b4e:	66 0f       	add	r22, r22
     b50:	77 1f       	adc	r23, r23
     b52:	8a 95       	dec	r24
     b54:	e2 f7       	brpl	.-8      	; 0xb4e <DIO_writepin+0x84>
     b56:	cb 01       	movw	r24, r22
     b58:	84 2b       	or	r24, r20
     b5a:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     b5c:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
     b5e:	08 95       	ret
			  }
			  break;

			  case LOW:

			  switch(port)
     b60:	91 30       	cpi	r25, 0x01	; 1
     b62:	a9 f0       	breq	.+42     	; 0xb8e <DIO_writepin+0xc4>
     b64:	28 f0       	brcs	.+10     	; 0xb70 <DIO_writepin+0xa6>
     b66:	92 30       	cpi	r25, 0x02	; 2
     b68:	09 f1       	breq	.+66     	; 0xbac <DIO_writepin+0xe2>
     b6a:	93 30       	cpi	r25, 0x03	; 3
     b6c:	71 f1       	breq	.+92     	; 0xbca <DIO_writepin+0x100>
     b6e:	40 c0       	rjmp	.+128    	; 0xbf0 <DIO_writepin+0x126>
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
     b70:	4b b3       	in	r20, 0x1b	; 27
     b72:	21 e0       	ldi	r18, 0x01	; 1
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	b9 01       	movw	r22, r18
     b78:	02 c0       	rjmp	.+4      	; 0xb7e <DIO_writepin+0xb4>
     b7a:	66 0f       	add	r22, r22
     b7c:	77 1f       	adc	r23, r23
     b7e:	8a 95       	dec	r24
     b80:	e2 f7       	brpl	.-8      	; 0xb7a <DIO_writepin+0xb0>
     b82:	cb 01       	movw	r24, r22
     b84:	80 95       	com	r24
     b86:	84 23       	and	r24, r20
     b88:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     b8a:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
				  break;
     b8c:	08 95       	ret
				  case PB:

				  CLR_BIT(PORTB,pin_num);
     b8e:	48 b3       	in	r20, 0x18	; 24
     b90:	21 e0       	ldi	r18, 0x01	; 1
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	b9 01       	movw	r22, r18
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <DIO_writepin+0xd2>
     b98:	66 0f       	add	r22, r22
     b9a:	77 1f       	adc	r23, r23
     b9c:	8a 95       	dec	r24
     b9e:	e2 f7       	brpl	.-8      	; 0xb98 <DIO_writepin+0xce>
     ba0:	cb 01       	movw	r24, r22
     ba2:	80 95       	com	r24
     ba4:	84 23       	and	r24, r20
     ba6:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     ba8:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  CLR_BIT(PORTB,pin_num);
				  break;
     baa:	08 95       	ret
				  case PC:

				  CLR_BIT(PORTC,pin_num);
     bac:	45 b3       	in	r20, 0x15	; 21
     bae:	21 e0       	ldi	r18, 0x01	; 1
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	b9 01       	movw	r22, r18
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <DIO_writepin+0xf0>
     bb6:	66 0f       	add	r22, r22
     bb8:	77 1f       	adc	r23, r23
     bba:	8a 95       	dec	r24
     bbc:	e2 f7       	brpl	.-8      	; 0xbb6 <DIO_writepin+0xec>
     bbe:	cb 01       	movw	r24, r22
     bc0:	80 95       	com	r24
     bc2:	84 23       	and	r24, r20
     bc4:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     bc6:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  CLR_BIT(PORTC,pin_num);
				  break;
     bc8:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
     bca:	42 b3       	in	r20, 0x12	; 18
     bcc:	21 e0       	ldi	r18, 0x01	; 1
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	b9 01       	movw	r22, r18
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <DIO_writepin+0x10e>
     bd4:	66 0f       	add	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	e2 f7       	brpl	.-8      	; 0xbd4 <DIO_writepin+0x10a>
     bdc:	cb 01       	movw	r24, r22
     bde:	80 95       	com	r24
     be0:	84 23       	and	r24, r20
     be2:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     be4:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
     be6:	08 95       	ret
			  }

			  break;

			  default:
			  error = WRONG_VALUE;
     be8:	83 e0       	ldi	r24, 0x03	; 3
     bea:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     bf0:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
     bf2:	08 95       	ret

00000bf4 <ICU_Read_callbackfun>:

static volatile u16 t1,t2,ICU_flag=0;

static void ICU_Read_callbackfun(void)
{
	if (ICU_flag==0)
     bf4:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__data_end>
     bf8:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__data_end+0x1>
     bfc:	89 2b       	or	r24, r25
     bfe:	79 f4       	brne	.+30     	; 0xc1e <ICU_Read_callbackfun+0x2a>
	{
		timer1_ReadCounts(&t1);
     c00:	88 ee       	ldi	r24, 0xE8	; 232
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <timer1_ReadCounts>
		EXI_TriggerEdge(ICU_EXI_INT,FALLING_EDGE);
     c08:	62 e0       	ldi	r22, 0x02	; 2
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <EXI_TriggerEdge>
		ICU_flag=1;
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <__data_end+0x1>
     c18:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__data_end>
     c1c:	08 95       	ret
	}
	else if (ICU_flag==1)
     c1e:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__data_end>
     c22:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__data_end+0x1>
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	51 f4       	brne	.+20     	; 0xc3e <ICU_Read_callbackfun+0x4a>
	{
		timer1_ReadCounts(&t2);
     c2a:	86 ee       	ldi	r24, 0xE6	; 230
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <timer1_ReadCounts>
		ICU_flag=2;
     c32:	82 e0       	ldi	r24, 0x02	; 2
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <__data_end+0x1>
     c3a:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__data_end>
     c3e:	08 95       	ret

00000c40 <ICU_init>:
	}
}
void ICU_init ()
{
	Timer1_Init(TIMER1_NORMAL_MODE,TIMER1_SCALER_8);
     c40:	62 e0       	ldi	r22, 0x02	; 2
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	0e 94 9b 08 	call	0x1136	; 0x1136 <Timer1_Init>
	// DIO_initpin(ICU_CH,INFREE);                              // in init all pins
	EXI_Enable(ICU_EXI_INT);
     c48:	82 e0       	ldi	r24, 0x02	; 2
     c4a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <EXI_Enable>
	EXI_TriggerEdge(ICU_EXI_INT,RISING_EDGE);
     c4e:	63 e0       	ldi	r22, 0x03	; 3
     c50:	82 e0       	ldi	r24, 0x02	; 2
     c52:	0e 94 7e 06 	call	0xcfc	; 0xcfc <EXI_TriggerEdge>
	EXI_SetCallBack(ICU_EXI_INT, ICU_Read_callbackfun );
     c56:	6a ef       	ldi	r22, 0xFA	; 250
     c58:	75 e0       	ldi	r23, 0x05	; 5
     c5a:	82 e0       	ldi	r24, 0x02	; 2
     c5c:	0e 94 de 06 	call	0xdbc	; 0xdbc <EXI_SetCallBack>
     c60:	08 95       	ret

00000c62 <ICU_Read>:

}

u8 ICU_Read(u16 *pu16_PeriodTime)
{
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	8c 01       	movw	r16, r24

	u16 timeout ;
	EXI_TriggerEdge(ICU_EXI_INT,RISING_EDGE);
     c6c:	63 e0       	ldi	r22, 0x03	; 3
     c6e:	82 e0       	ldi	r24, 0x02	; 2
     c70:	0e 94 7e 06 	call	0xcfc	; 0xcfc <EXI_TriggerEdge>
	timer1_setTimerValue(0);
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	0e 94 70 09 	call	0x12e0	; 0x12e0 <timer1_setTimerValue>
	ICU_flag=0;
     c7a:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__data_end+0x1>
     c7e:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <__data_end>
		while((ICU_flag<2)&&(timeout<23000))
     c82:	05 c0       	rjmp	.+10     	; 0xc8e <ICU_Read+0x2c>
		{
			timeout++;
     c84:	21 96       	adiw	r28, 0x01	; 1
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	8a 95       	dec	r24
     c8a:	f1 f7       	brne	.-4      	; 0xc88 <ICU_Read+0x26>
     c8c:	00 c0       	rjmp	.+0      	; 0xc8e <ICU_Read+0x2c>

	u16 timeout ;
	EXI_TriggerEdge(ICU_EXI_INT,RISING_EDGE);
	timer1_setTimerValue(0);
	ICU_flag=0;
		while((ICU_flag<2)&&(timeout<23000))
     c8e:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__data_end>
     c92:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__data_end+0x1>
     c96:	02 97       	sbiw	r24, 0x02	; 2
     c98:	20 f4       	brcc	.+8      	; 0xca2 <ICU_Read+0x40>
     c9a:	c8 3d       	cpi	r28, 0xD8	; 216
     c9c:	e9 e5       	ldi	r30, 0x59	; 89
     c9e:	de 07       	cpc	r29, r30
     ca0:	88 f3       	brcs	.-30     	; 0xc84 <ICU_Read+0x22>
		{
			timeout++;
			_delay_us(1);
		}
		
		if(ICU_flag==2)
     ca2:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__data_end>
     ca6:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__data_end+0x1>
     caa:	02 97       	sbiw	r24, 0x02	; 2
     cac:	79 f4       	brne	.+30     	; 0xccc <ICU_Read+0x6a>
		{
			*pu16_PeriodTime =(t2-t1);
     cae:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <t2>
     cb2:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <t2+0x1>
     cb6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <t1>
     cba:	30 91 e9 00 	lds	r19, 0x00E9	; 0x8000e9 <t1+0x1>
     cbe:	82 1b       	sub	r24, r18
     cc0:	93 0b       	sbc	r25, r19
     cc2:	f8 01       	movw	r30, r16
     cc4:	91 83       	std	Z+1, r25	; 0x01
     cc6:	80 83       	st	Z, r24
			
			return 1 ;    //done
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	01 c0       	rjmp	.+2      	; 0xcce <ICU_Read+0x6c>
		}
	
	return  0; //timeout
     ccc:	80 e0       	ldi	r24, 0x00	; 0
}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	08 95       	ret

00000cd8 <EXI_Enable>:

void EXI_Init(void)
{
	EXI_TriggerEdge(EX_INT0,FALLING_EDGE);
	EXI_TriggerEdge(EX_INT1,FALLING_EDGE);
	EXI_TriggerEdge(EX_INT2,FALLING_EDGE);
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	41 f0       	breq	.+16     	; 0xcec <EXI_Enable+0x14>
     cdc:	18 f0       	brcs	.+6      	; 0xce4 <EXI_Enable+0xc>
     cde:	82 30       	cpi	r24, 0x02	; 2
     ce0:	49 f0       	breq	.+18     	; 0xcf4 <EXI_Enable+0x1c>
     ce2:	08 95       	ret
     ce4:	8b b7       	in	r24, 0x3b	; 59
     ce6:	80 64       	ori	r24, 0x40	; 64
     ce8:	8b bf       	out	0x3b, r24	; 59
     cea:	08 95       	ret
     cec:	8b b7       	in	r24, 0x3b	; 59
     cee:	80 68       	ori	r24, 0x80	; 128
     cf0:	8b bf       	out	0x3b, r24	; 59
     cf2:	08 95       	ret
     cf4:	8b b7       	in	r24, 0x3b	; 59
     cf6:	80 62       	ori	r24, 0x20	; 32
     cf8:	8b bf       	out	0x3b, r24	; 59
     cfa:	08 95       	ret

00000cfc <EXI_TriggerEdge>:
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	49 f1       	breq	.+82     	; 0xd52 <EXI_TriggerEdge+0x56>
     d00:	20 f0       	brcs	.+8      	; 0xd0a <EXI_TriggerEdge+0xe>
     d02:	82 30       	cpi	r24, 0x02	; 2
     d04:	09 f4       	brne	.+2      	; 0xd08 <EXI_TriggerEdge+0xc>
     d06:	49 c0       	rjmp	.+146    	; 0xd9a <EXI_TriggerEdge+0x9e>
     d08:	08 95       	ret
     d0a:	61 30       	cpi	r22, 0x01	; 1
     d0c:	69 f0       	breq	.+26     	; 0xd28 <EXI_TriggerEdge+0x2c>
     d0e:	28 f0       	brcs	.+10     	; 0xd1a <EXI_TriggerEdge+0x1e>
     d10:	62 30       	cpi	r22, 0x02	; 2
     d12:	89 f0       	breq	.+34     	; 0xd36 <EXI_TriggerEdge+0x3a>
     d14:	63 30       	cpi	r22, 0x03	; 3
     d16:	b1 f0       	breq	.+44     	; 0xd44 <EXI_TriggerEdge+0x48>
     d18:	08 95       	ret
     d1a:	85 b7       	in	r24, 0x35	; 53
     d1c:	8e 7f       	andi	r24, 0xFE	; 254
     d1e:	85 bf       	out	0x35, r24	; 53
     d20:	85 b7       	in	r24, 0x35	; 53
     d22:	8d 7f       	andi	r24, 0xFD	; 253
     d24:	85 bf       	out	0x35, r24	; 53
     d26:	08 95       	ret
     d28:	85 b7       	in	r24, 0x35	; 53
     d2a:	81 60       	ori	r24, 0x01	; 1
     d2c:	85 bf       	out	0x35, r24	; 53
     d2e:	85 b7       	in	r24, 0x35	; 53
     d30:	8d 7f       	andi	r24, 0xFD	; 253
     d32:	85 bf       	out	0x35, r24	; 53
     d34:	08 95       	ret
     d36:	85 b7       	in	r24, 0x35	; 53
     d38:	8e 7f       	andi	r24, 0xFE	; 254
     d3a:	85 bf       	out	0x35, r24	; 53
     d3c:	85 b7       	in	r24, 0x35	; 53
     d3e:	82 60       	ori	r24, 0x02	; 2
     d40:	85 bf       	out	0x35, r24	; 53
     d42:	08 95       	ret
     d44:	85 b7       	in	r24, 0x35	; 53
     d46:	81 60       	ori	r24, 0x01	; 1
     d48:	85 bf       	out	0x35, r24	; 53
     d4a:	85 b7       	in	r24, 0x35	; 53
     d4c:	82 60       	ori	r24, 0x02	; 2
     d4e:	85 bf       	out	0x35, r24	; 53
     d50:	08 95       	ret
     d52:	61 30       	cpi	r22, 0x01	; 1
     d54:	69 f0       	breq	.+26     	; 0xd70 <EXI_TriggerEdge+0x74>
     d56:	28 f0       	brcs	.+10     	; 0xd62 <EXI_TriggerEdge+0x66>
     d58:	62 30       	cpi	r22, 0x02	; 2
     d5a:	89 f0       	breq	.+34     	; 0xd7e <EXI_TriggerEdge+0x82>
     d5c:	63 30       	cpi	r22, 0x03	; 3
     d5e:	b1 f0       	breq	.+44     	; 0xd8c <EXI_TriggerEdge+0x90>
     d60:	08 95       	ret
     d62:	85 b7       	in	r24, 0x35	; 53
     d64:	8b 7f       	andi	r24, 0xFB	; 251
     d66:	85 bf       	out	0x35, r24	; 53
     d68:	85 b7       	in	r24, 0x35	; 53
     d6a:	87 7f       	andi	r24, 0xF7	; 247
     d6c:	85 bf       	out	0x35, r24	; 53
     d6e:	08 95       	ret
     d70:	85 b7       	in	r24, 0x35	; 53
     d72:	84 60       	ori	r24, 0x04	; 4
     d74:	85 bf       	out	0x35, r24	; 53
     d76:	85 b7       	in	r24, 0x35	; 53
     d78:	87 7f       	andi	r24, 0xF7	; 247
     d7a:	85 bf       	out	0x35, r24	; 53
     d7c:	08 95       	ret
     d7e:	85 b7       	in	r24, 0x35	; 53
     d80:	8b 7f       	andi	r24, 0xFB	; 251
     d82:	85 bf       	out	0x35, r24	; 53
     d84:	85 b7       	in	r24, 0x35	; 53
     d86:	88 60       	ori	r24, 0x08	; 8
     d88:	85 bf       	out	0x35, r24	; 53
     d8a:	08 95       	ret
     d8c:	85 b7       	in	r24, 0x35	; 53
     d8e:	84 60       	ori	r24, 0x04	; 4
     d90:	85 bf       	out	0x35, r24	; 53
     d92:	85 b7       	in	r24, 0x35	; 53
     d94:	88 60       	ori	r24, 0x08	; 8
     d96:	85 bf       	out	0x35, r24	; 53
     d98:	08 95       	ret
     d9a:	62 30       	cpi	r22, 0x02	; 2
     d9c:	19 f0       	breq	.+6      	; 0xda4 <EXI_TriggerEdge+0xa8>
     d9e:	63 30       	cpi	r22, 0x03	; 3
     da0:	29 f0       	breq	.+10     	; 0xdac <EXI_TriggerEdge+0xb0>
     da2:	08 c0       	rjmp	.+16     	; 0xdb4 <EXI_TriggerEdge+0xb8>
     da4:	84 b7       	in	r24, 0x34	; 52
     da6:	8f 7b       	andi	r24, 0xBF	; 191
     da8:	84 bf       	out	0x34, r24	; 52
     daa:	08 95       	ret
     dac:	84 b7       	in	r24, 0x34	; 52
     dae:	80 64       	ori	r24, 0x40	; 64
     db0:	84 bf       	out	0x34, r24	; 52
     db2:	08 95       	ret
     db4:	84 b7       	in	r24, 0x34	; 52
     db6:	8f 7b       	andi	r24, 0xBF	; 191
     db8:	84 bf       	out	0x34, r24	; 52
     dba:	08 95       	ret

00000dbc <EXI_SetCallBack>:
/************************************Call back functions*********************************************/
void EXI_SetCallBack(ExInterruptSource_type Interrupt,void(*LocalPtr)(void))
{
	
	
	switch(Interrupt){
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	49 f0       	breq	.+18     	; 0xdd2 <EXI_SetCallBack+0x16>
     dc0:	18 f0       	brcs	.+6      	; 0xdc8 <EXI_SetCallBack+0xc>
     dc2:	82 30       	cpi	r24, 0x02	; 2
     dc4:	59 f0       	breq	.+22     	; 0xddc <EXI_SetCallBack+0x20>
     dc6:	08 95       	ret
		case EX_INT0:
		INT0_Fptr=LocalPtr;
     dc8:	70 93 ef 00 	sts	0x00EF, r23	; 0x8000ef <INT0_Fptr+0x1>
     dcc:	60 93 ee 00 	sts	0x00EE, r22	; 0x8000ee <INT0_Fptr>
		break;
     dd0:	08 95       	ret
		case EX_INT1:
		INT1_Fptr=LocalPtr;
     dd2:	70 93 ed 00 	sts	0x00ED, r23	; 0x8000ed <INT1_Fptr+0x1>
     dd6:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <INT1_Fptr>
		break;
     dda:	08 95       	ret
		case EX_INT2:
		INT2_Fptr=LocalPtr;
     ddc:	70 93 eb 00 	sts	0x00EB, r23	; 0x8000eb <INT2_Fptr+0x1>
     de0:	60 93 ea 00 	sts	0x00EA, r22	; 0x8000ea <INT2_Fptr>
     de4:	08 95       	ret

00000de6 <__vector_1>:




ISR(INT0_vect)
{  
     de6:	1f 92       	push	r1
     de8:	0f 92       	push	r0
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	0f 92       	push	r0
     dee:	11 24       	eor	r1, r1
     df0:	2f 93       	push	r18
     df2:	3f 93       	push	r19
     df4:	4f 93       	push	r20
     df6:	5f 93       	push	r21
     df8:	6f 93       	push	r22
     dfa:	7f 93       	push	r23
     dfc:	8f 93       	push	r24
     dfe:	9f 93       	push	r25
     e00:	af 93       	push	r26
     e02:	bf 93       	push	r27
     e04:	ef 93       	push	r30
     e06:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
     e08:	e0 91 ee 00 	lds	r30, 0x00EE	; 0x8000ee <INT0_Fptr>
     e0c:	f0 91 ef 00 	lds	r31, 0x00EF	; 0x8000ef <INT0_Fptr+0x1>
     e10:	30 97       	sbiw	r30, 0x00	; 0
     e12:	09 f0       	breq	.+2      	; 0xe16 <__vector_1+0x30>
	{
		INT0_Fptr();
     e14:	09 95       	icall
	}
}
     e16:	ff 91       	pop	r31
     e18:	ef 91       	pop	r30
     e1a:	bf 91       	pop	r27
     e1c:	af 91       	pop	r26
     e1e:	9f 91       	pop	r25
     e20:	8f 91       	pop	r24
     e22:	7f 91       	pop	r23
     e24:	6f 91       	pop	r22
     e26:	5f 91       	pop	r21
     e28:	4f 91       	pop	r20
     e2a:	3f 91       	pop	r19
     e2c:	2f 91       	pop	r18
     e2e:	0f 90       	pop	r0
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	0f 90       	pop	r0
     e34:	1f 90       	pop	r1
     e36:	18 95       	reti

00000e38 <__vector_2>:
ISR(INT1_vect)
{
     e38:	1f 92       	push	r1
     e3a:	0f 92       	push	r0
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	0f 92       	push	r0
     e40:	11 24       	eor	r1, r1
     e42:	2f 93       	push	r18
     e44:	3f 93       	push	r19
     e46:	4f 93       	push	r20
     e48:	5f 93       	push	r21
     e4a:	6f 93       	push	r22
     e4c:	7f 93       	push	r23
     e4e:	8f 93       	push	r24
     e50:	9f 93       	push	r25
     e52:	af 93       	push	r26
     e54:	bf 93       	push	r27
     e56:	ef 93       	push	r30
     e58:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
     e5a:	e0 91 ec 00 	lds	r30, 0x00EC	; 0x8000ec <INT1_Fptr>
     e5e:	f0 91 ed 00 	lds	r31, 0x00ED	; 0x8000ed <INT1_Fptr+0x1>
     e62:	30 97       	sbiw	r30, 0x00	; 0
     e64:	09 f0       	breq	.+2      	; 0xe68 <__vector_2+0x30>
	{
		INT1_Fptr();
     e66:	09 95       	icall
	}
}
     e68:	ff 91       	pop	r31
     e6a:	ef 91       	pop	r30
     e6c:	bf 91       	pop	r27
     e6e:	af 91       	pop	r26
     e70:	9f 91       	pop	r25
     e72:	8f 91       	pop	r24
     e74:	7f 91       	pop	r23
     e76:	6f 91       	pop	r22
     e78:	5f 91       	pop	r21
     e7a:	4f 91       	pop	r20
     e7c:	3f 91       	pop	r19
     e7e:	2f 91       	pop	r18
     e80:	0f 90       	pop	r0
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	0f 90       	pop	r0
     e86:	1f 90       	pop	r1
     e88:	18 95       	reti

00000e8a <__vector_3>:
ISR(INT2_vect)
{
     e8a:	1f 92       	push	r1
     e8c:	0f 92       	push	r0
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	0f 92       	push	r0
     e92:	11 24       	eor	r1, r1
     e94:	2f 93       	push	r18
     e96:	3f 93       	push	r19
     e98:	4f 93       	push	r20
     e9a:	5f 93       	push	r21
     e9c:	6f 93       	push	r22
     e9e:	7f 93       	push	r23
     ea0:	8f 93       	push	r24
     ea2:	9f 93       	push	r25
     ea4:	af 93       	push	r26
     ea6:	bf 93       	push	r27
     ea8:	ef 93       	push	r30
     eaa:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
     eac:	e0 91 ea 00 	lds	r30, 0x00EA	; 0x8000ea <INT2_Fptr>
     eb0:	f0 91 eb 00 	lds	r31, 0x00EB	; 0x8000eb <INT2_Fptr+0x1>
     eb4:	30 97       	sbiw	r30, 0x00	; 0
     eb6:	09 f0       	breq	.+2      	; 0xeba <__vector_3+0x30>
	{
		INT2_Fptr();
     eb8:	09 95       	icall
	}
}
     eba:	ff 91       	pop	r31
     ebc:	ef 91       	pop	r30
     ebe:	bf 91       	pop	r27
     ec0:	af 91       	pop	r26
     ec2:	9f 91       	pop	r25
     ec4:	8f 91       	pop	r24
     ec6:	7f 91       	pop	r23
     ec8:	6f 91       	pop	r22
     eca:	5f 91       	pop	r21
     ecc:	4f 91       	pop	r20
     ece:	3f 91       	pop	r19
     ed0:	2f 91       	pop	r18
     ed2:	0f 90       	pop	r0
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	0f 90       	pop	r0
     ed8:	1f 90       	pop	r1
     eda:	18 95       	reti

00000edc <waveGen>:
	TIMER0_OV_SetCallBack(waveGen);
	
} 

void waveGen()
{  static u32 OV=0;
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
	TCNT0=6;
     ee0:	86 e0       	ldi	r24, 0x06	; 6
     ee2:	82 bf       	out	0x32, r24	; 50
	OV++;
     ee4:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <OV.2058>
     ee8:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <OV.2058+0x1>
     eec:	a0 91 f2 00 	lds	r26, 0x00F2	; 0x8000f2 <OV.2058+0x2>
     ef0:	b0 91 f3 00 	lds	r27, 0x00F3	; 0x8000f3 <OV.2058+0x3>
     ef4:	01 96       	adiw	r24, 0x01	; 1
     ef6:	a1 1d       	adc	r26, r1
     ef8:	b1 1d       	adc	r27, r1
     efa:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <OV.2058>
     efe:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <OV.2058+0x1>
     f02:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <OV.2058+0x2>
     f06:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <OV.2058+0x3>
	if (OV==(u32_OFFTicks+1))
     f0a:	00 91 f4 00 	lds	r16, 0x00F4	; 0x8000f4 <u32_OFFTicks>
     f0e:	10 91 f5 00 	lds	r17, 0x00F5	; 0x8000f5 <u32_OFFTicks+0x1>
     f12:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <u32_OFFTicks+0x2>
     f16:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <u32_OFFTicks+0x3>
     f1a:	b9 01       	movw	r22, r18
     f1c:	a8 01       	movw	r20, r16
     f1e:	4f 5f       	subi	r20, 0xFF	; 255
     f20:	5f 4f       	sbci	r21, 0xFF	; 255
     f22:	6f 4f       	sbci	r22, 0xFF	; 255
     f24:	7f 4f       	sbci	r23, 0xFF	; 255
     f26:	84 17       	cp	r24, r20
     f28:	95 07       	cpc	r25, r21
     f2a:	a6 07       	cpc	r26, r22
     f2c:	b7 07       	cpc	r27, r23
     f2e:	29 f4       	brne	.+10     	; 0xf3a <waveGen+0x5e>
	{
		DIO_writepin(PINB0,HIGH);//
     f30:	61 e0       	ldi	r22, 0x01	; 1
     f32:	88 e0       	ldi	r24, 0x08	; 8
     f34:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
     f38:	21 c0       	rjmp	.+66     	; 0xf7c <waveGen+0xa0>
	}
	else if (OV==(u32_ONTicks+u32_OFFTicks+2))
     f3a:	40 91 f8 00 	lds	r20, 0x00F8	; 0x8000f8 <u32_ONTicks>
     f3e:	50 91 f9 00 	lds	r21, 0x00F9	; 0x8000f9 <u32_ONTicks+0x1>
     f42:	60 91 fa 00 	lds	r22, 0x00FA	; 0x8000fa <u32_ONTicks+0x2>
     f46:	70 91 fb 00 	lds	r23, 0x00FB	; 0x8000fb <u32_ONTicks+0x3>
     f4a:	40 0f       	add	r20, r16
     f4c:	51 1f       	adc	r21, r17
     f4e:	62 1f       	adc	r22, r18
     f50:	73 1f       	adc	r23, r19
     f52:	4e 5f       	subi	r20, 0xFE	; 254
     f54:	5f 4f       	sbci	r21, 0xFF	; 255
     f56:	6f 4f       	sbci	r22, 0xFF	; 255
     f58:	7f 4f       	sbci	r23, 0xFF	; 255
     f5a:	84 17       	cp	r24, r20
     f5c:	95 07       	cpc	r25, r21
     f5e:	a6 07       	cpc	r26, r22
     f60:	b7 07       	cpc	r27, r23
     f62:	61 f4       	brne	.+24     	; 0xf7c <waveGen+0xa0>
	{
		DIO_writepin(PINB0,LOW);//
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	88 e0       	ldi	r24, 0x08	; 8
     f68:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
		OV=0;
     f6c:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <OV.2058>
     f70:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <OV.2058+0x1>
     f74:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <OV.2058+0x2>
     f78:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <OV.2058+0x3>
	}
	
}
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	08 95       	ret

00000f82 <pwm_init>:
u32 u32_ONTicks=0,u32_OFFTicks=0;


void pwm_init()
{
	DIO_initpin(PINB0,OUTPUT);
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	88 e0       	ldi	r24, 0x08	; 8
     f86:	0e 94 44 04 	call	0x888	; 0x888 <DIO_initpin>
	TIMER0_Init(TIMER0_NORMAL_MODE);
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	0e 94 39 08 	call	0x1072	; 0x1072 <TIMER0_Init>
	TIMER0_OV_InterruptEnable();
     f90:	0e 94 97 08 	call	0x112e	; 0x112e <TIMER0_OV_InterruptEnable>
	TIMER0_OV_SetCallBack(waveGen);
     f94:	8e e6       	ldi	r24, 0x6E	; 110
     f96:	97 e0       	ldi	r25, 0x07	; 7
     f98:	0e 94 69 08 	call	0x10d2	; 0x10d2 <TIMER0_OV_SetCallBack>
     f9c:	08 95       	ret

00000f9e <PWM_set_duty>:
	
}


void PWM_set_duty(u8 u8_DutyCycle,u32 u32_Freq)
{
     f9e:	8f 92       	push	r8
     fa0:	9f 92       	push	r9
     fa2:	af 92       	push	r10
     fa4:	bf 92       	push	r11
     fa6:	cf 92       	push	r12
     fa8:	df 92       	push	r13
     faa:	ef 92       	push	r14
     fac:	ff 92       	push	r15
     fae:	cf 93       	push	r28
     fb0:	c8 2f       	mov	r28, r24
	f64 f64_wavePeriodTime = (f32)1 / u32_Freq*1000000;					         // The Periodic Time for the Generated Pulse in Seconds //
     fb2:	cb 01       	movw	r24, r22
     fb4:	ba 01       	movw	r22, r20
     fb6:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__floatunsisf>
     fba:	9b 01       	movw	r18, r22
     fbc:	ac 01       	movw	r20, r24
     fbe:	60 e0       	ldi	r22, 0x00	; 0
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	80 e8       	ldi	r24, 0x80	; 128
     fc4:	9f e3       	ldi	r25, 0x3F	; 63
     fc6:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divsf3>
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	34 e2       	ldi	r19, 0x24	; 36
     fce:	44 e7       	ldi	r20, 0x74	; 116
     fd0:	59 e4       	ldi	r21, 0x49	; 73
     fd2:	0e 94 81 0b 	call	0x1702	; 0x1702 <__mulsf3>
     fd6:	4b 01       	movw	r8, r22
     fd8:	5c 01       	movw	r10, r24
	f64 f64_waveONTime = (f64_wavePeriodTime*u8_DutyCycle) / 100;		// The HIGH Level Time in Seconds //
     fda:	6c 2f       	mov	r22, r28
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__floatsisf>
     fe6:	a5 01       	movw	r20, r10
     fe8:	94 01       	movw	r18, r8
     fea:	0e 94 81 0b 	call	0x1702	; 0x1702 <__mulsf3>
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	48 ec       	ldi	r20, 0xC8	; 200
     ff4:	52 e4       	ldi	r21, 0x42	; 66
     ff6:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divsf3>
     ffa:	6b 01       	movw	r12, r22
     ffc:	7c 01       	movw	r14, r24
	f64 f64_waveOFFTime = f64_wavePeriodTime - f64_waveONTime;		   // The LOW Level Time in Seconds //
     ffe:	9b 01       	movw	r18, r22
    1000:	ac 01       	movw	r20, r24
    1002:	c5 01       	movw	r24, r10
    1004:	b4 01       	movw	r22, r8
    1006:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__subsf3>
    100a:	4b 01       	movw	r8, r22
    100c:	5c 01       	movw	r10, r24
	f64 f64_oneTickTime = 0.0;
	f64_oneTickTime = (f64) (((f64)PWM_PRESCALER/(f64)F_CPU)*1000000);   //1u at 8,8
	//LCD_WriteNumber(f64_wavePeriodTime) ;
	f64 f64_max_time = (256*f64_oneTickTime); //256u
	//LCD_WriteNumber( f64_max_time) ;
	u32_ONTicks     =  f64_waveONTime/(f64_max_time-6);
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	4a e7       	ldi	r20, 0x7A	; 122
    1014:	53 e4       	ldi	r21, 0x43	; 67
    1016:	c7 01       	movw	r24, r14
    1018:	b6 01       	movw	r22, r12
    101a:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divsf3>
    101e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__fixunssfsi>
    1022:	60 93 f8 00 	sts	0x00F8, r22	; 0x8000f8 <u32_ONTicks>
    1026:	70 93 f9 00 	sts	0x00F9, r23	; 0x8000f9 <u32_ONTicks+0x1>
    102a:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <u32_ONTicks+0x2>
    102e:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <u32_ONTicks+0x3>
	u32_OFFTicks    =  f64_waveOFFTime/(f64_max_time-6);
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	4a e7       	ldi	r20, 0x7A	; 122
    1038:	53 e4       	ldi	r21, 0x43	; 67
    103a:	c5 01       	movw	r24, r10
    103c:	b4 01       	movw	r22, r8
    103e:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divsf3>
    1042:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__fixunssfsi>
    1046:	60 93 f4 00 	sts	0x00F4, r22	; 0x8000f4 <u32_OFFTicks>
    104a:	70 93 f5 00 	sts	0x00F5, r23	; 0x8000f5 <u32_OFFTicks+0x1>
    104e:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <u32_OFFTicks+0x2>
    1052:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <u32_OFFTicks+0x3>
	DIO_writepin(PINB0,HIGH);
    1056:	61 e0       	ldi	r22, 0x01	; 1
    1058:	88 e0       	ldi	r24, 0x08	; 8
    105a:	0e 94 65 05 	call	0xaca	; 0xaca <DIO_writepin>
}
    105e:	cf 91       	pop	r28
    1060:	ff 90       	pop	r15
    1062:	ef 90       	pop	r14
    1064:	df 90       	pop	r13
    1066:	cf 90       	pop	r12
    1068:	bf 90       	pop	r11
    106a:	af 90       	pop	r10
    106c:	9f 90       	pop	r9
    106e:	8f 90       	pop	r8
    1070:	08 95       	ret

00001072 <TIMER0_Init>:
{
	SET_BIT(TIMSK,TOIE2);
}
void TIMER2_OV_InterruptDisable(void)
{
	CLR_BIT(TIMSK,TOIE2);
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	69 f0       	breq	.+26     	; 0x1090 <TIMER0_Init+0x1e>
    1076:	28 f0       	brcs	.+10     	; 0x1082 <TIMER0_Init+0x10>
    1078:	82 30       	cpi	r24, 0x02	; 2
    107a:	89 f0       	breq	.+34     	; 0x109e <TIMER0_Init+0x2c>
    107c:	83 30       	cpi	r24, 0x03	; 3
    107e:	b1 f0       	breq	.+44     	; 0x10ac <TIMER0_Init+0x3a>
    1080:	08 95       	ret
    1082:	83 b7       	in	r24, 0x33	; 51
    1084:	8f 7b       	andi	r24, 0xBF	; 191
    1086:	83 bf       	out	0x33, r24	; 51
    1088:	83 b7       	in	r24, 0x33	; 51
    108a:	87 7f       	andi	r24, 0xF7	; 247
    108c:	83 bf       	out	0x33, r24	; 51
    108e:	08 95       	ret
    1090:	83 b7       	in	r24, 0x33	; 51
    1092:	80 64       	ori	r24, 0x40	; 64
    1094:	83 bf       	out	0x33, r24	; 51
    1096:	83 b7       	in	r24, 0x33	; 51
    1098:	87 7f       	andi	r24, 0xF7	; 247
    109a:	83 bf       	out	0x33, r24	; 51
    109c:	08 95       	ret
    109e:	83 b7       	in	r24, 0x33	; 51
    10a0:	8f 7b       	andi	r24, 0xBF	; 191
    10a2:	83 bf       	out	0x33, r24	; 51
    10a4:	83 b7       	in	r24, 0x33	; 51
    10a6:	88 60       	ori	r24, 0x08	; 8
    10a8:	83 bf       	out	0x33, r24	; 51
    10aa:	08 95       	ret
    10ac:	83 b7       	in	r24, 0x33	; 51
    10ae:	80 64       	ori	r24, 0x40	; 64
    10b0:	83 bf       	out	0x33, r24	; 51
    10b2:	83 b7       	in	r24, 0x33	; 51
    10b4:	88 60       	ori	r24, 0x08	; 8
    10b6:	83 bf       	out	0x33, r24	; 51
    10b8:	08 95       	ret

000010ba <timer_start>:
    10ba:	88 30       	cpi	r24, 0x08	; 8
    10bc:	40 f4       	brcc	.+16     	; 0x10ce <timer_start+0x14>
    10be:	93 b7       	in	r25, 0x33	; 51
    10c0:	98 7f       	andi	r25, 0xF8	; 248
    10c2:	93 bf       	out	0x33, r25	; 51
    10c4:	93 b7       	in	r25, 0x33	; 51
    10c6:	89 2b       	or	r24, r25
    10c8:	83 bf       	out	0x33, r24	; 51
    10ca:	84 e0       	ldi	r24, 0x04	; 4
    10cc:	08 95       	ret
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	08 95       	ret

000010d2 <TIMER0_OV_SetCallBack>:
    10d2:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <Timer0_OVF_Fptr+0x1>
    10d6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Timer0_OVF_Fptr>
    10da:	08 95       	ret

000010dc <__vector_11>:
    10dc:	1f 92       	push	r1
    10de:	0f 92       	push	r0
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	0f 92       	push	r0
    10e4:	11 24       	eor	r1, r1
    10e6:	2f 93       	push	r18
    10e8:	3f 93       	push	r19
    10ea:	4f 93       	push	r20
    10ec:	5f 93       	push	r21
    10ee:	6f 93       	push	r22
    10f0:	7f 93       	push	r23
    10f2:	8f 93       	push	r24
    10f4:	9f 93       	push	r25
    10f6:	af 93       	push	r26
    10f8:	bf 93       	push	r27
    10fa:	ef 93       	push	r30
    10fc:	ff 93       	push	r31
    10fe:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <Timer0_OVF_Fptr>
    1102:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <Timer0_OVF_Fptr+0x1>
    1106:	30 97       	sbiw	r30, 0x00	; 0
    1108:	09 f0       	breq	.+2      	; 0x110c <__vector_11+0x30>
    110a:	09 95       	icall
    110c:	ff 91       	pop	r31
    110e:	ef 91       	pop	r30
    1110:	bf 91       	pop	r27
    1112:	af 91       	pop	r26
    1114:	9f 91       	pop	r25
    1116:	8f 91       	pop	r24
    1118:	7f 91       	pop	r23
    111a:	6f 91       	pop	r22
    111c:	5f 91       	pop	r21
    111e:	4f 91       	pop	r20
    1120:	3f 91       	pop	r19
    1122:	2f 91       	pop	r18
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	0f 90       	pop	r0
    112a:	1f 90       	pop	r1
    112c:	18 95       	reti

0000112e <TIMER0_OV_InterruptEnable>:
    112e:	89 b7       	in	r24, 0x39	; 57
    1130:	81 60       	ori	r24, 0x01	; 1
    1132:	89 bf       	out	0x39, r24	; 57
    1134:	08 95       	ret

00001136 <Timer1_Init>:
    1136:	82 30       	cpi	r24, 0x02	; 2
    1138:	29 f1       	breq	.+74     	; 0x1184 <Timer1_Init+0x4e>
    113a:	28 f4       	brcc	.+10     	; 0x1146 <Timer1_Init+0x10>
    113c:	88 23       	and	r24, r24
    113e:	41 f0       	breq	.+16     	; 0x1150 <Timer1_Init+0x1a>
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	99 f0       	breq	.+38     	; 0x116a <Timer1_Init+0x34>
    1144:	45 c0       	rjmp	.+138    	; 0x11d0 <Timer1_Init+0x9a>
    1146:	83 30       	cpi	r24, 0x03	; 3
    1148:	51 f1       	breq	.+84     	; 0x119e <Timer1_Init+0x68>
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	a9 f1       	breq	.+106    	; 0x11b8 <Timer1_Init+0x82>
    114e:	40 c0       	rjmp	.+128    	; 0x11d0 <Timer1_Init+0x9a>
    1150:	8f b5       	in	r24, 0x2f	; 47
    1152:	8e 7f       	andi	r24, 0xFE	; 254
    1154:	8f bd       	out	0x2f, r24	; 47
    1156:	8f b5       	in	r24, 0x2f	; 47
    1158:	8d 7f       	andi	r24, 0xFD	; 253
    115a:	8f bd       	out	0x2f, r24	; 47
    115c:	8e b5       	in	r24, 0x2e	; 46
    115e:	87 7f       	andi	r24, 0xF7	; 247
    1160:	8e bd       	out	0x2e, r24	; 46
    1162:	8e b5       	in	r24, 0x2e	; 46
    1164:	8f 7e       	andi	r24, 0xEF	; 239
    1166:	8e bd       	out	0x2e, r24	; 46
    1168:	33 c0       	rjmp	.+102    	; 0x11d0 <Timer1_Init+0x9a>
    116a:	8f b5       	in	r24, 0x2f	; 47
    116c:	8e 7f       	andi	r24, 0xFE	; 254
    116e:	8f bd       	out	0x2f, r24	; 47
    1170:	8f b5       	in	r24, 0x2f	; 47
    1172:	8d 7f       	andi	r24, 0xFD	; 253
    1174:	8f bd       	out	0x2f, r24	; 47
    1176:	8e b5       	in	r24, 0x2e	; 46
    1178:	88 60       	ori	r24, 0x08	; 8
    117a:	8e bd       	out	0x2e, r24	; 46
    117c:	8e b5       	in	r24, 0x2e	; 46
    117e:	80 61       	ori	r24, 0x10	; 16
    1180:	8e bd       	out	0x2e, r24	; 46
    1182:	26 c0       	rjmp	.+76     	; 0x11d0 <Timer1_Init+0x9a>
    1184:	8f b5       	in	r24, 0x2f	; 47
    1186:	8e 7f       	andi	r24, 0xFE	; 254
    1188:	8f bd       	out	0x2f, r24	; 47
    118a:	8f b5       	in	r24, 0x2f	; 47
    118c:	8d 7f       	andi	r24, 0xFD	; 253
    118e:	8f bd       	out	0x2f, r24	; 47
    1190:	8e b5       	in	r24, 0x2e	; 46
    1192:	88 60       	ori	r24, 0x08	; 8
    1194:	8e bd       	out	0x2e, r24	; 46
    1196:	8e b5       	in	r24, 0x2e	; 46
    1198:	8f 7e       	andi	r24, 0xEF	; 239
    119a:	8e bd       	out	0x2e, r24	; 46
    119c:	19 c0       	rjmp	.+50     	; 0x11d0 <Timer1_Init+0x9a>
    119e:	8f b5       	in	r24, 0x2f	; 47
    11a0:	8e 7f       	andi	r24, 0xFE	; 254
    11a2:	8f bd       	out	0x2f, r24	; 47
    11a4:	8f b5       	in	r24, 0x2f	; 47
    11a6:	82 60       	ori	r24, 0x02	; 2
    11a8:	8f bd       	out	0x2f, r24	; 47
    11aa:	8e b5       	in	r24, 0x2e	; 46
    11ac:	88 60       	ori	r24, 0x08	; 8
    11ae:	8e bd       	out	0x2e, r24	; 46
    11b0:	8e b5       	in	r24, 0x2e	; 46
    11b2:	80 61       	ori	r24, 0x10	; 16
    11b4:	8e bd       	out	0x2e, r24	; 46
    11b6:	0c c0       	rjmp	.+24     	; 0x11d0 <Timer1_Init+0x9a>
    11b8:	8f b5       	in	r24, 0x2f	; 47
    11ba:	81 60       	ori	r24, 0x01	; 1
    11bc:	8f bd       	out	0x2f, r24	; 47
    11be:	8f b5       	in	r24, 0x2f	; 47
    11c0:	82 60       	ori	r24, 0x02	; 2
    11c2:	8f bd       	out	0x2f, r24	; 47
    11c4:	8e b5       	in	r24, 0x2e	; 46
    11c6:	88 60       	ori	r24, 0x08	; 8
    11c8:	8e bd       	out	0x2e, r24	; 46
    11ca:	8e b5       	in	r24, 0x2e	; 46
    11cc:	80 61       	ori	r24, 0x10	; 16
    11ce:	8e bd       	out	0x2e, r24	; 46
    11d0:	8e b5       	in	r24, 0x2e	; 46
    11d2:	88 7f       	andi	r24, 0xF8	; 248
    11d4:	8e bd       	out	0x2e, r24	; 46
    11d6:	8e b5       	in	r24, 0x2e	; 46
    11d8:	68 2b       	or	r22, r24
    11da:	6e bd       	out	0x2e, r22	; 46
    11dc:	08 95       	ret

000011de <__vector_9>:
    11de:	1f 92       	push	r1
    11e0:	0f 92       	push	r0
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	0f 92       	push	r0
    11e6:	11 24       	eor	r1, r1
    11e8:	2f 93       	push	r18
    11ea:	3f 93       	push	r19
    11ec:	4f 93       	push	r20
    11ee:	5f 93       	push	r21
    11f0:	6f 93       	push	r22
    11f2:	7f 93       	push	r23
    11f4:	8f 93       	push	r24
    11f6:	9f 93       	push	r25
    11f8:	af 93       	push	r26
    11fa:	bf 93       	push	r27
    11fc:	ef 93       	push	r30
    11fe:	ff 93       	push	r31
    1200:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <Timer1_OVF_Fptr>
    1204:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <Timer1_OVF_Fptr+0x1>
    1208:	30 97       	sbiw	r30, 0x00	; 0
    120a:	09 f0       	breq	.+2      	; 0x120e <__vector_9+0x30>
    120c:	09 95       	icall
    120e:	ff 91       	pop	r31
    1210:	ef 91       	pop	r30
    1212:	bf 91       	pop	r27
    1214:	af 91       	pop	r26
    1216:	9f 91       	pop	r25
    1218:	8f 91       	pop	r24
    121a:	7f 91       	pop	r23
    121c:	6f 91       	pop	r22
    121e:	5f 91       	pop	r21
    1220:	4f 91       	pop	r20
    1222:	3f 91       	pop	r19
    1224:	2f 91       	pop	r18
    1226:	0f 90       	pop	r0
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	0f 90       	pop	r0
    122c:	1f 90       	pop	r1
    122e:	18 95       	reti

00001230 <__vector_8>:
    1230:	1f 92       	push	r1
    1232:	0f 92       	push	r0
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	0f 92       	push	r0
    1238:	11 24       	eor	r1, r1
    123a:	2f 93       	push	r18
    123c:	3f 93       	push	r19
    123e:	4f 93       	push	r20
    1240:	5f 93       	push	r21
    1242:	6f 93       	push	r22
    1244:	7f 93       	push	r23
    1246:	8f 93       	push	r24
    1248:	9f 93       	push	r25
    124a:	af 93       	push	r26
    124c:	bf 93       	push	r27
    124e:	ef 93       	push	r30
    1250:	ff 93       	push	r31
    1252:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <Timer1_OCB_Fptr>
    1256:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <Timer1_OCB_Fptr+0x1>
    125a:	30 97       	sbiw	r30, 0x00	; 0
    125c:	09 f0       	breq	.+2      	; 0x1260 <__vector_8+0x30>
    125e:	09 95       	icall
    1260:	ff 91       	pop	r31
    1262:	ef 91       	pop	r30
    1264:	bf 91       	pop	r27
    1266:	af 91       	pop	r26
    1268:	9f 91       	pop	r25
    126a:	8f 91       	pop	r24
    126c:	7f 91       	pop	r23
    126e:	6f 91       	pop	r22
    1270:	5f 91       	pop	r21
    1272:	4f 91       	pop	r20
    1274:	3f 91       	pop	r19
    1276:	2f 91       	pop	r18
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	0f 90       	pop	r0
    127e:	1f 90       	pop	r1
    1280:	18 95       	reti

00001282 <__vector_6>:
    1282:	1f 92       	push	r1
    1284:	0f 92       	push	r0
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	0f 92       	push	r0
    128a:	11 24       	eor	r1, r1
    128c:	2f 93       	push	r18
    128e:	3f 93       	push	r19
    1290:	4f 93       	push	r20
    1292:	5f 93       	push	r21
    1294:	6f 93       	push	r22
    1296:	7f 93       	push	r23
    1298:	8f 93       	push	r24
    129a:	9f 93       	push	r25
    129c:	af 93       	push	r26
    129e:	bf 93       	push	r27
    12a0:	ef 93       	push	r30
    12a2:	ff 93       	push	r31
    12a4:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <Timer1_ICU_Fptr>
    12a8:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <Timer1_ICU_Fptr+0x1>
    12ac:	30 97       	sbiw	r30, 0x00	; 0
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <__vector_6+0x30>
    12b0:	09 95       	icall
    12b2:	ff 91       	pop	r31
    12b4:	ef 91       	pop	r30
    12b6:	bf 91       	pop	r27
    12b8:	af 91       	pop	r26
    12ba:	9f 91       	pop	r25
    12bc:	8f 91       	pop	r24
    12be:	7f 91       	pop	r23
    12c0:	6f 91       	pop	r22
    12c2:	5f 91       	pop	r21
    12c4:	4f 91       	pop	r20
    12c6:	3f 91       	pop	r19
    12c8:	2f 91       	pop	r18
    12ca:	0f 90       	pop	r0
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	0f 90       	pop	r0
    12d0:	1f 90       	pop	r1
    12d2:	18 95       	reti

000012d4 <timer1_ReadCounts>:
    12d4:	2c b5       	in	r18, 0x2c	; 44
    12d6:	3d b5       	in	r19, 0x2d	; 45
    12d8:	fc 01       	movw	r30, r24
    12da:	31 83       	std	Z+1, r19	; 0x01
    12dc:	20 83       	st	Z, r18
    12de:	08 95       	ret

000012e0 <timer1_setTimerValue>:
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	9d bd       	out	0x2d, r25	; 45
    12e4:	8c bd       	out	0x2c, r24	; 44
    12e6:	08 95       	ret

000012e8 <TIMER2_Init>:
    12e8:	81 30       	cpi	r24, 0x01	; 1
    12ea:	69 f0       	breq	.+26     	; 0x1306 <TIMER2_Init+0x1e>
    12ec:	28 f0       	brcs	.+10     	; 0x12f8 <TIMER2_Init+0x10>
    12ee:	82 30       	cpi	r24, 0x02	; 2
    12f0:	89 f0       	breq	.+34     	; 0x1314 <TIMER2_Init+0x2c>
    12f2:	83 30       	cpi	r24, 0x03	; 3
    12f4:	b1 f0       	breq	.+44     	; 0x1322 <TIMER2_Init+0x3a>
    12f6:	08 95       	ret
    12f8:	85 b5       	in	r24, 0x25	; 37
    12fa:	8f 7b       	andi	r24, 0xBF	; 191
    12fc:	85 bd       	out	0x25, r24	; 37
    12fe:	85 b5       	in	r24, 0x25	; 37
    1300:	87 7f       	andi	r24, 0xF7	; 247
    1302:	85 bd       	out	0x25, r24	; 37
    1304:	08 95       	ret
    1306:	85 b5       	in	r24, 0x25	; 37
    1308:	80 64       	ori	r24, 0x40	; 64
    130a:	85 bd       	out	0x25, r24	; 37
    130c:	85 b5       	in	r24, 0x25	; 37
    130e:	87 7f       	andi	r24, 0xF7	; 247
    1310:	85 bd       	out	0x25, r24	; 37
    1312:	08 95       	ret
    1314:	85 b5       	in	r24, 0x25	; 37
    1316:	8f 7b       	andi	r24, 0xBF	; 191
    1318:	85 bd       	out	0x25, r24	; 37
    131a:	85 b5       	in	r24, 0x25	; 37
    131c:	88 60       	ori	r24, 0x08	; 8
    131e:	85 bd       	out	0x25, r24	; 37
    1320:	08 95       	ret
    1322:	85 b5       	in	r24, 0x25	; 37
    1324:	80 64       	ori	r24, 0x40	; 64
    1326:	85 bd       	out	0x25, r24	; 37
    1328:	85 b5       	in	r24, 0x25	; 37
    132a:	88 60       	ori	r24, 0x08	; 8
    132c:	85 bd       	out	0x25, r24	; 37
    132e:	08 95       	ret

00001330 <TIMER_2_setIntialValue>:
    1330:	84 bd       	out	0x24, r24	; 36
    1332:	84 e0       	ldi	r24, 0x04	; 4
    1334:	08 95       	ret

00001336 <timer2_start>:
    1336:	88 30       	cpi	r24, 0x08	; 8
    1338:	40 f4       	brcc	.+16     	; 0x134a <timer2_start+0x14>
    133a:	95 b5       	in	r25, 0x25	; 37
    133c:	98 7f       	andi	r25, 0xF8	; 248
    133e:	95 bd       	out	0x25, r25	; 37
    1340:	95 b5       	in	r25, 0x25	; 37
    1342:	89 2b       	or	r24, r25
    1344:	85 bd       	out	0x25, r24	; 37
    1346:	84 e0       	ldi	r24, 0x04	; 4
    1348:	08 95       	ret
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	08 95       	ret

0000134e <TIMER2_OV_InterruptEnable>:
    134e:	89 b7       	in	r24, 0x39	; 57
    1350:	80 64       	ori	r24, 0x40	; 64
    1352:	89 bf       	out	0x39, r24	; 57
    1354:	08 95       	ret

00001356 <TIMER_2_INT>:
    1356:	0e 94 a7 09 	call	0x134e	; 0x134e <TIMER2_OV_InterruptEnable>
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	0e 94 74 09 	call	0x12e8	; 0x12e8 <TIMER2_Init>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	0e 94 98 09 	call	0x1330	; 0x1330 <TIMER_2_setIntialValue>
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	0e 94 9b 09 	call	0x1336	; 0x1336 <timer2_start>
    136c:	08 95       	ret

0000136e <TIMER2_OV_SetCallBack>:
}

////////////////////////////////////////////Timer 2 Call Back functions///////////////////////////////////////
void TIMER2_OV_SetCallBack(void(*LocalFptr)(void))
{
	Timer2_OVF_Fptr=LocalFptr;
    136e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <Timer2_OVF_Fptr+0x1>
    1372:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Timer2_OVF_Fptr>
    1376:	08 95       	ret

00001378 <__vector_5>:
}



ISR(TIMER2_OV_vect)
{
    1378:	1f 92       	push	r1
    137a:	0f 92       	push	r0
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	0f 92       	push	r0
    1380:	11 24       	eor	r1, r1
    1382:	2f 93       	push	r18
    1384:	3f 93       	push	r19
    1386:	4f 93       	push	r20
    1388:	5f 93       	push	r21
    138a:	6f 93       	push	r22
    138c:	7f 93       	push	r23
    138e:	8f 93       	push	r24
    1390:	9f 93       	push	r25
    1392:	af 93       	push	r26
    1394:	bf 93       	push	r27
    1396:	ef 93       	push	r30
    1398:	ff 93       	push	r31
	if(Timer2_OVF_Fptr!=NULLPTR)
    139a:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <Timer2_OVF_Fptr>
    139e:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <Timer2_OVF_Fptr+0x1>
    13a2:	30 97       	sbiw	r30, 0x00	; 0
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <__vector_5+0x30>
	{
		Timer2_OVF_Fptr();
    13a6:	09 95       	icall
	}
}
    13a8:	ff 91       	pop	r31
    13aa:	ef 91       	pop	r30
    13ac:	bf 91       	pop	r27
    13ae:	af 91       	pop	r26
    13b0:	9f 91       	pop	r25
    13b2:	8f 91       	pop	r24
    13b4:	7f 91       	pop	r23
    13b6:	6f 91       	pop	r22
    13b8:	5f 91       	pop	r21
    13ba:	4f 91       	pop	r20
    13bc:	3f 91       	pop	r19
    13be:	2f 91       	pop	r18
    13c0:	0f 90       	pop	r0
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	0f 90       	pop	r0
    13c6:	1f 90       	pop	r1
    13c8:	18 95       	reti

000013ca <__subsf3>:
    13ca:	50 58       	subi	r21, 0x80	; 128

000013cc <__addsf3>:
    13cc:	bb 27       	eor	r27, r27
    13ce:	aa 27       	eor	r26, r26
    13d0:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__addsf3x>
    13d4:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_round>
    13d8:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fp_pscA>
    13dc:	38 f0       	brcs	.+14     	; 0x13ec <__addsf3+0x20>
    13de:	0e 94 40 0b 	call	0x1680	; 0x1680 <__fp_pscB>
    13e2:	20 f0       	brcs	.+8      	; 0x13ec <__addsf3+0x20>
    13e4:	39 f4       	brne	.+14     	; 0x13f4 <__addsf3+0x28>
    13e6:	9f 3f       	cpi	r25, 0xFF	; 255
    13e8:	19 f4       	brne	.+6      	; 0x13f0 <__addsf3+0x24>
    13ea:	26 f4       	brtc	.+8      	; 0x13f4 <__addsf3+0x28>
    13ec:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__fp_nan>
    13f0:	0e f4       	brtc	.+2      	; 0x13f4 <__addsf3+0x28>
    13f2:	e0 95       	com	r30
    13f4:	e7 fb       	bst	r30, 7
    13f6:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__fp_inf>

000013fa <__addsf3x>:
    13fa:	e9 2f       	mov	r30, r25
    13fc:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fp_split3>
    1400:	58 f3       	brcs	.-42     	; 0x13d8 <__addsf3+0xc>
    1402:	ba 17       	cp	r27, r26
    1404:	62 07       	cpc	r22, r18
    1406:	73 07       	cpc	r23, r19
    1408:	84 07       	cpc	r24, r20
    140a:	95 07       	cpc	r25, r21
    140c:	20 f0       	brcs	.+8      	; 0x1416 <__addsf3x+0x1c>
    140e:	79 f4       	brne	.+30     	; 0x142e <__addsf3x+0x34>
    1410:	a6 f5       	brtc	.+104    	; 0x147a <__addsf3x+0x80>
    1412:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__fp_zero>
    1416:	0e f4       	brtc	.+2      	; 0x141a <__addsf3x+0x20>
    1418:	e0 95       	com	r30
    141a:	0b 2e       	mov	r0, r27
    141c:	ba 2f       	mov	r27, r26
    141e:	a0 2d       	mov	r26, r0
    1420:	0b 01       	movw	r0, r22
    1422:	b9 01       	movw	r22, r18
    1424:	90 01       	movw	r18, r0
    1426:	0c 01       	movw	r0, r24
    1428:	ca 01       	movw	r24, r20
    142a:	a0 01       	movw	r20, r0
    142c:	11 24       	eor	r1, r1
    142e:	ff 27       	eor	r31, r31
    1430:	59 1b       	sub	r21, r25
    1432:	99 f0       	breq	.+38     	; 0x145a <__addsf3x+0x60>
    1434:	59 3f       	cpi	r21, 0xF9	; 249
    1436:	50 f4       	brcc	.+20     	; 0x144c <__addsf3x+0x52>
    1438:	50 3e       	cpi	r21, 0xE0	; 224
    143a:	68 f1       	brcs	.+90     	; 0x1496 <__addsf3x+0x9c>
    143c:	1a 16       	cp	r1, r26
    143e:	f0 40       	sbci	r31, 0x00	; 0
    1440:	a2 2f       	mov	r26, r18
    1442:	23 2f       	mov	r18, r19
    1444:	34 2f       	mov	r19, r20
    1446:	44 27       	eor	r20, r20
    1448:	58 5f       	subi	r21, 0xF8	; 248
    144a:	f3 cf       	rjmp	.-26     	; 0x1432 <__addsf3x+0x38>
    144c:	46 95       	lsr	r20
    144e:	37 95       	ror	r19
    1450:	27 95       	ror	r18
    1452:	a7 95       	ror	r26
    1454:	f0 40       	sbci	r31, 0x00	; 0
    1456:	53 95       	inc	r21
    1458:	c9 f7       	brne	.-14     	; 0x144c <__addsf3x+0x52>
    145a:	7e f4       	brtc	.+30     	; 0x147a <__addsf3x+0x80>
    145c:	1f 16       	cp	r1, r31
    145e:	ba 0b       	sbc	r27, r26
    1460:	62 0b       	sbc	r22, r18
    1462:	73 0b       	sbc	r23, r19
    1464:	84 0b       	sbc	r24, r20
    1466:	ba f0       	brmi	.+46     	; 0x1496 <__addsf3x+0x9c>
    1468:	91 50       	subi	r25, 0x01	; 1
    146a:	a1 f0       	breq	.+40     	; 0x1494 <__addsf3x+0x9a>
    146c:	ff 0f       	add	r31, r31
    146e:	bb 1f       	adc	r27, r27
    1470:	66 1f       	adc	r22, r22
    1472:	77 1f       	adc	r23, r23
    1474:	88 1f       	adc	r24, r24
    1476:	c2 f7       	brpl	.-16     	; 0x1468 <__addsf3x+0x6e>
    1478:	0e c0       	rjmp	.+28     	; 0x1496 <__addsf3x+0x9c>
    147a:	ba 0f       	add	r27, r26
    147c:	62 1f       	adc	r22, r18
    147e:	73 1f       	adc	r23, r19
    1480:	84 1f       	adc	r24, r20
    1482:	48 f4       	brcc	.+18     	; 0x1496 <__addsf3x+0x9c>
    1484:	87 95       	ror	r24
    1486:	77 95       	ror	r23
    1488:	67 95       	ror	r22
    148a:	b7 95       	ror	r27
    148c:	f7 95       	ror	r31
    148e:	9e 3f       	cpi	r25, 0xFE	; 254
    1490:	08 f0       	brcs	.+2      	; 0x1494 <__addsf3x+0x9a>
    1492:	b0 cf       	rjmp	.-160    	; 0x13f4 <__addsf3+0x28>
    1494:	93 95       	inc	r25
    1496:	88 0f       	add	r24, r24
    1498:	08 f0       	brcs	.+2      	; 0x149c <__addsf3x+0xa2>
    149a:	99 27       	eor	r25, r25
    149c:	ee 0f       	add	r30, r30
    149e:	97 95       	ror	r25
    14a0:	87 95       	ror	r24
    14a2:	08 95       	ret

000014a4 <__divsf3>:
    14a4:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__divsf3x>
    14a8:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_round>
    14ac:	0e 94 40 0b 	call	0x1680	; 0x1680 <__fp_pscB>
    14b0:	58 f0       	brcs	.+22     	; 0x14c8 <__divsf3+0x24>
    14b2:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fp_pscA>
    14b6:	40 f0       	brcs	.+16     	; 0x14c8 <__divsf3+0x24>
    14b8:	29 f4       	brne	.+10     	; 0x14c4 <__divsf3+0x20>
    14ba:	5f 3f       	cpi	r21, 0xFF	; 255
    14bc:	29 f0       	breq	.+10     	; 0x14c8 <__divsf3+0x24>
    14be:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__fp_inf>
    14c2:	51 11       	cpse	r21, r1
    14c4:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__fp_szero>
    14c8:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__fp_nan>

000014cc <__divsf3x>:
    14cc:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fp_split3>
    14d0:	68 f3       	brcs	.-38     	; 0x14ac <__divsf3+0x8>

000014d2 <__divsf3_pse>:
    14d2:	99 23       	and	r25, r25
    14d4:	b1 f3       	breq	.-20     	; 0x14c2 <__divsf3+0x1e>
    14d6:	55 23       	and	r21, r21
    14d8:	91 f3       	breq	.-28     	; 0x14be <__divsf3+0x1a>
    14da:	95 1b       	sub	r25, r21
    14dc:	55 0b       	sbc	r21, r21
    14de:	bb 27       	eor	r27, r27
    14e0:	aa 27       	eor	r26, r26
    14e2:	62 17       	cp	r22, r18
    14e4:	73 07       	cpc	r23, r19
    14e6:	84 07       	cpc	r24, r20
    14e8:	38 f0       	brcs	.+14     	; 0x14f8 <__divsf3_pse+0x26>
    14ea:	9f 5f       	subi	r25, 0xFF	; 255
    14ec:	5f 4f       	sbci	r21, 0xFF	; 255
    14ee:	22 0f       	add	r18, r18
    14f0:	33 1f       	adc	r19, r19
    14f2:	44 1f       	adc	r20, r20
    14f4:	aa 1f       	adc	r26, r26
    14f6:	a9 f3       	breq	.-22     	; 0x14e2 <__divsf3_pse+0x10>
    14f8:	35 d0       	rcall	.+106    	; 0x1564 <__divsf3_pse+0x92>
    14fa:	0e 2e       	mov	r0, r30
    14fc:	3a f0       	brmi	.+14     	; 0x150c <__divsf3_pse+0x3a>
    14fe:	e0 e8       	ldi	r30, 0x80	; 128
    1500:	32 d0       	rcall	.+100    	; 0x1566 <__divsf3_pse+0x94>
    1502:	91 50       	subi	r25, 0x01	; 1
    1504:	50 40       	sbci	r21, 0x00	; 0
    1506:	e6 95       	lsr	r30
    1508:	00 1c       	adc	r0, r0
    150a:	ca f7       	brpl	.-14     	; 0x14fe <__divsf3_pse+0x2c>
    150c:	2b d0       	rcall	.+86     	; 0x1564 <__divsf3_pse+0x92>
    150e:	fe 2f       	mov	r31, r30
    1510:	29 d0       	rcall	.+82     	; 0x1564 <__divsf3_pse+0x92>
    1512:	66 0f       	add	r22, r22
    1514:	77 1f       	adc	r23, r23
    1516:	88 1f       	adc	r24, r24
    1518:	bb 1f       	adc	r27, r27
    151a:	26 17       	cp	r18, r22
    151c:	37 07       	cpc	r19, r23
    151e:	48 07       	cpc	r20, r24
    1520:	ab 07       	cpc	r26, r27
    1522:	b0 e8       	ldi	r27, 0x80	; 128
    1524:	09 f0       	breq	.+2      	; 0x1528 <__divsf3_pse+0x56>
    1526:	bb 0b       	sbc	r27, r27
    1528:	80 2d       	mov	r24, r0
    152a:	bf 01       	movw	r22, r30
    152c:	ff 27       	eor	r31, r31
    152e:	93 58       	subi	r25, 0x83	; 131
    1530:	5f 4f       	sbci	r21, 0xFF	; 255
    1532:	3a f0       	brmi	.+14     	; 0x1542 <__divsf3_pse+0x70>
    1534:	9e 3f       	cpi	r25, 0xFE	; 254
    1536:	51 05       	cpc	r21, r1
    1538:	78 f0       	brcs	.+30     	; 0x1558 <__divsf3_pse+0x86>
    153a:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__fp_inf>
    153e:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__fp_szero>
    1542:	5f 3f       	cpi	r21, 0xFF	; 255
    1544:	e4 f3       	brlt	.-8      	; 0x153e <__divsf3_pse+0x6c>
    1546:	98 3e       	cpi	r25, 0xE8	; 232
    1548:	d4 f3       	brlt	.-12     	; 0x153e <__divsf3_pse+0x6c>
    154a:	86 95       	lsr	r24
    154c:	77 95       	ror	r23
    154e:	67 95       	ror	r22
    1550:	b7 95       	ror	r27
    1552:	f7 95       	ror	r31
    1554:	9f 5f       	subi	r25, 0xFF	; 255
    1556:	c9 f7       	brne	.-14     	; 0x154a <__divsf3_pse+0x78>
    1558:	88 0f       	add	r24, r24
    155a:	91 1d       	adc	r25, r1
    155c:	96 95       	lsr	r25
    155e:	87 95       	ror	r24
    1560:	97 f9       	bld	r25, 7
    1562:	08 95       	ret
    1564:	e1 e0       	ldi	r30, 0x01	; 1
    1566:	66 0f       	add	r22, r22
    1568:	77 1f       	adc	r23, r23
    156a:	88 1f       	adc	r24, r24
    156c:	bb 1f       	adc	r27, r27
    156e:	62 17       	cp	r22, r18
    1570:	73 07       	cpc	r23, r19
    1572:	84 07       	cpc	r24, r20
    1574:	ba 07       	cpc	r27, r26
    1576:	20 f0       	brcs	.+8      	; 0x1580 <__divsf3_pse+0xae>
    1578:	62 1b       	sub	r22, r18
    157a:	73 0b       	sbc	r23, r19
    157c:	84 0b       	sbc	r24, r20
    157e:	ba 0b       	sbc	r27, r26
    1580:	ee 1f       	adc	r30, r30
    1582:	88 f7       	brcc	.-30     	; 0x1566 <__divsf3_pse+0x94>
    1584:	e0 95       	com	r30
    1586:	08 95       	ret

00001588 <__fixunssfsi>:
    1588:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__fp_splitA>
    158c:	88 f0       	brcs	.+34     	; 0x15b0 <__fixunssfsi+0x28>
    158e:	9f 57       	subi	r25, 0x7F	; 127
    1590:	98 f0       	brcs	.+38     	; 0x15b8 <__fixunssfsi+0x30>
    1592:	b9 2f       	mov	r27, r25
    1594:	99 27       	eor	r25, r25
    1596:	b7 51       	subi	r27, 0x17	; 23
    1598:	b0 f0       	brcs	.+44     	; 0x15c6 <__fixunssfsi+0x3e>
    159a:	e1 f0       	breq	.+56     	; 0x15d4 <__fixunssfsi+0x4c>
    159c:	66 0f       	add	r22, r22
    159e:	77 1f       	adc	r23, r23
    15a0:	88 1f       	adc	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	1a f0       	brmi	.+6      	; 0x15ac <__fixunssfsi+0x24>
    15a6:	ba 95       	dec	r27
    15a8:	c9 f7       	brne	.-14     	; 0x159c <__fixunssfsi+0x14>
    15aa:	14 c0       	rjmp	.+40     	; 0x15d4 <__fixunssfsi+0x4c>
    15ac:	b1 30       	cpi	r27, 0x01	; 1
    15ae:	91 f0       	breq	.+36     	; 0x15d4 <__fixunssfsi+0x4c>
    15b0:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__fp_zero>
    15b4:	b1 e0       	ldi	r27, 0x01	; 1
    15b6:	08 95       	ret
    15b8:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__fp_zero>
    15bc:	67 2f       	mov	r22, r23
    15be:	78 2f       	mov	r23, r24
    15c0:	88 27       	eor	r24, r24
    15c2:	b8 5f       	subi	r27, 0xF8	; 248
    15c4:	39 f0       	breq	.+14     	; 0x15d4 <__fixunssfsi+0x4c>
    15c6:	b9 3f       	cpi	r27, 0xF9	; 249
    15c8:	cc f3       	brlt	.-14     	; 0x15bc <__fixunssfsi+0x34>
    15ca:	86 95       	lsr	r24
    15cc:	77 95       	ror	r23
    15ce:	67 95       	ror	r22
    15d0:	b3 95       	inc	r27
    15d2:	d9 f7       	brne	.-10     	; 0x15ca <__fixunssfsi+0x42>
    15d4:	3e f4       	brtc	.+14     	; 0x15e4 <__fixunssfsi+0x5c>
    15d6:	90 95       	com	r25
    15d8:	80 95       	com	r24
    15da:	70 95       	com	r23
    15dc:	61 95       	neg	r22
    15de:	7f 4f       	sbci	r23, 0xFF	; 255
    15e0:	8f 4f       	sbci	r24, 0xFF	; 255
    15e2:	9f 4f       	sbci	r25, 0xFF	; 255
    15e4:	08 95       	ret

000015e6 <__floatunsisf>:
    15e6:	e8 94       	clt
    15e8:	09 c0       	rjmp	.+18     	; 0x15fc <__floatsisf+0x12>

000015ea <__floatsisf>:
    15ea:	97 fb       	bst	r25, 7
    15ec:	3e f4       	brtc	.+14     	; 0x15fc <__floatsisf+0x12>
    15ee:	90 95       	com	r25
    15f0:	80 95       	com	r24
    15f2:	70 95       	com	r23
    15f4:	61 95       	neg	r22
    15f6:	7f 4f       	sbci	r23, 0xFF	; 255
    15f8:	8f 4f       	sbci	r24, 0xFF	; 255
    15fa:	9f 4f       	sbci	r25, 0xFF	; 255
    15fc:	99 23       	and	r25, r25
    15fe:	a9 f0       	breq	.+42     	; 0x162a <__floatsisf+0x40>
    1600:	f9 2f       	mov	r31, r25
    1602:	96 e9       	ldi	r25, 0x96	; 150
    1604:	bb 27       	eor	r27, r27
    1606:	93 95       	inc	r25
    1608:	f6 95       	lsr	r31
    160a:	87 95       	ror	r24
    160c:	77 95       	ror	r23
    160e:	67 95       	ror	r22
    1610:	b7 95       	ror	r27
    1612:	f1 11       	cpse	r31, r1
    1614:	f8 cf       	rjmp	.-16     	; 0x1606 <__floatsisf+0x1c>
    1616:	fa f4       	brpl	.+62     	; 0x1656 <__floatsisf+0x6c>
    1618:	bb 0f       	add	r27, r27
    161a:	11 f4       	brne	.+4      	; 0x1620 <__floatsisf+0x36>
    161c:	60 ff       	sbrs	r22, 0
    161e:	1b c0       	rjmp	.+54     	; 0x1656 <__floatsisf+0x6c>
    1620:	6f 5f       	subi	r22, 0xFF	; 255
    1622:	7f 4f       	sbci	r23, 0xFF	; 255
    1624:	8f 4f       	sbci	r24, 0xFF	; 255
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	16 c0       	rjmp	.+44     	; 0x1656 <__floatsisf+0x6c>
    162a:	88 23       	and	r24, r24
    162c:	11 f0       	breq	.+4      	; 0x1632 <__floatsisf+0x48>
    162e:	96 e9       	ldi	r25, 0x96	; 150
    1630:	11 c0       	rjmp	.+34     	; 0x1654 <__floatsisf+0x6a>
    1632:	77 23       	and	r23, r23
    1634:	21 f0       	breq	.+8      	; 0x163e <__floatsisf+0x54>
    1636:	9e e8       	ldi	r25, 0x8E	; 142
    1638:	87 2f       	mov	r24, r23
    163a:	76 2f       	mov	r23, r22
    163c:	05 c0       	rjmp	.+10     	; 0x1648 <__floatsisf+0x5e>
    163e:	66 23       	and	r22, r22
    1640:	71 f0       	breq	.+28     	; 0x165e <__floatsisf+0x74>
    1642:	96 e8       	ldi	r25, 0x86	; 134
    1644:	86 2f       	mov	r24, r22
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	2a f0       	brmi	.+10     	; 0x1656 <__floatsisf+0x6c>
    164c:	9a 95       	dec	r25
    164e:	66 0f       	add	r22, r22
    1650:	77 1f       	adc	r23, r23
    1652:	88 1f       	adc	r24, r24
    1654:	da f7       	brpl	.-10     	; 0x164c <__floatsisf+0x62>
    1656:	88 0f       	add	r24, r24
    1658:	96 95       	lsr	r25
    165a:	87 95       	ror	r24
    165c:	97 f9       	bld	r25, 7
    165e:	08 95       	ret

00001660 <__fp_inf>:
    1660:	97 f9       	bld	r25, 7
    1662:	9f 67       	ori	r25, 0x7F	; 127
    1664:	80 e8       	ldi	r24, 0x80	; 128
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	08 95       	ret

0000166c <__fp_nan>:
    166c:	9f ef       	ldi	r25, 0xFF	; 255
    166e:	80 ec       	ldi	r24, 0xC0	; 192
    1670:	08 95       	ret

00001672 <__fp_pscA>:
    1672:	00 24       	eor	r0, r0
    1674:	0a 94       	dec	r0
    1676:	16 16       	cp	r1, r22
    1678:	17 06       	cpc	r1, r23
    167a:	18 06       	cpc	r1, r24
    167c:	09 06       	cpc	r0, r25
    167e:	08 95       	ret

00001680 <__fp_pscB>:
    1680:	00 24       	eor	r0, r0
    1682:	0a 94       	dec	r0
    1684:	12 16       	cp	r1, r18
    1686:	13 06       	cpc	r1, r19
    1688:	14 06       	cpc	r1, r20
    168a:	05 06       	cpc	r0, r21
    168c:	08 95       	ret

0000168e <__fp_round>:
    168e:	09 2e       	mov	r0, r25
    1690:	03 94       	inc	r0
    1692:	00 0c       	add	r0, r0
    1694:	11 f4       	brne	.+4      	; 0x169a <__fp_round+0xc>
    1696:	88 23       	and	r24, r24
    1698:	52 f0       	brmi	.+20     	; 0x16ae <__fp_round+0x20>
    169a:	bb 0f       	add	r27, r27
    169c:	40 f4       	brcc	.+16     	; 0x16ae <__fp_round+0x20>
    169e:	bf 2b       	or	r27, r31
    16a0:	11 f4       	brne	.+4      	; 0x16a6 <__fp_round+0x18>
    16a2:	60 ff       	sbrs	r22, 0
    16a4:	04 c0       	rjmp	.+8      	; 0x16ae <__fp_round+0x20>
    16a6:	6f 5f       	subi	r22, 0xFF	; 255
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	8f 4f       	sbci	r24, 0xFF	; 255
    16ac:	9f 4f       	sbci	r25, 0xFF	; 255
    16ae:	08 95       	ret

000016b0 <__fp_split3>:
    16b0:	57 fd       	sbrc	r21, 7
    16b2:	90 58       	subi	r25, 0x80	; 128
    16b4:	44 0f       	add	r20, r20
    16b6:	55 1f       	adc	r21, r21
    16b8:	59 f0       	breq	.+22     	; 0x16d0 <__fp_splitA+0x10>
    16ba:	5f 3f       	cpi	r21, 0xFF	; 255
    16bc:	71 f0       	breq	.+28     	; 0x16da <__fp_splitA+0x1a>
    16be:	47 95       	ror	r20

000016c0 <__fp_splitA>:
    16c0:	88 0f       	add	r24, r24
    16c2:	97 fb       	bst	r25, 7
    16c4:	99 1f       	adc	r25, r25
    16c6:	61 f0       	breq	.+24     	; 0x16e0 <__fp_splitA+0x20>
    16c8:	9f 3f       	cpi	r25, 0xFF	; 255
    16ca:	79 f0       	breq	.+30     	; 0x16ea <__fp_splitA+0x2a>
    16cc:	87 95       	ror	r24
    16ce:	08 95       	ret
    16d0:	12 16       	cp	r1, r18
    16d2:	13 06       	cpc	r1, r19
    16d4:	14 06       	cpc	r1, r20
    16d6:	55 1f       	adc	r21, r21
    16d8:	f2 cf       	rjmp	.-28     	; 0x16be <__fp_split3+0xe>
    16da:	46 95       	lsr	r20
    16dc:	f1 df       	rcall	.-30     	; 0x16c0 <__fp_splitA>
    16de:	08 c0       	rjmp	.+16     	; 0x16f0 <__fp_splitA+0x30>
    16e0:	16 16       	cp	r1, r22
    16e2:	17 06       	cpc	r1, r23
    16e4:	18 06       	cpc	r1, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	f1 cf       	rjmp	.-30     	; 0x16cc <__fp_splitA+0xc>
    16ea:	86 95       	lsr	r24
    16ec:	71 05       	cpc	r23, r1
    16ee:	61 05       	cpc	r22, r1
    16f0:	08 94       	sec
    16f2:	08 95       	ret

000016f4 <__fp_zero>:
    16f4:	e8 94       	clt

000016f6 <__fp_szero>:
    16f6:	bb 27       	eor	r27, r27
    16f8:	66 27       	eor	r22, r22
    16fa:	77 27       	eor	r23, r23
    16fc:	cb 01       	movw	r24, r22
    16fe:	97 f9       	bld	r25, 7
    1700:	08 95       	ret

00001702 <__mulsf3>:
    1702:	0e 94 94 0b 	call	0x1728	; 0x1728 <__mulsf3x>
    1706:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_round>
    170a:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fp_pscA>
    170e:	38 f0       	brcs	.+14     	; 0x171e <__mulsf3+0x1c>
    1710:	0e 94 40 0b 	call	0x1680	; 0x1680 <__fp_pscB>
    1714:	20 f0       	brcs	.+8      	; 0x171e <__mulsf3+0x1c>
    1716:	95 23       	and	r25, r21
    1718:	11 f0       	breq	.+4      	; 0x171e <__mulsf3+0x1c>
    171a:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__fp_inf>
    171e:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__fp_nan>
    1722:	11 24       	eor	r1, r1
    1724:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__fp_szero>

00001728 <__mulsf3x>:
    1728:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fp_split3>
    172c:	70 f3       	brcs	.-36     	; 0x170a <__mulsf3+0x8>

0000172e <__mulsf3_pse>:
    172e:	95 9f       	mul	r25, r21
    1730:	c1 f3       	breq	.-16     	; 0x1722 <__mulsf3+0x20>
    1732:	95 0f       	add	r25, r21
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	55 1f       	adc	r21, r21
    1738:	62 9f       	mul	r22, r18
    173a:	f0 01       	movw	r30, r0
    173c:	72 9f       	mul	r23, r18
    173e:	bb 27       	eor	r27, r27
    1740:	f0 0d       	add	r31, r0
    1742:	b1 1d       	adc	r27, r1
    1744:	63 9f       	mul	r22, r19
    1746:	aa 27       	eor	r26, r26
    1748:	f0 0d       	add	r31, r0
    174a:	b1 1d       	adc	r27, r1
    174c:	aa 1f       	adc	r26, r26
    174e:	64 9f       	mul	r22, r20
    1750:	66 27       	eor	r22, r22
    1752:	b0 0d       	add	r27, r0
    1754:	a1 1d       	adc	r26, r1
    1756:	66 1f       	adc	r22, r22
    1758:	82 9f       	mul	r24, r18
    175a:	22 27       	eor	r18, r18
    175c:	b0 0d       	add	r27, r0
    175e:	a1 1d       	adc	r26, r1
    1760:	62 1f       	adc	r22, r18
    1762:	73 9f       	mul	r23, r19
    1764:	b0 0d       	add	r27, r0
    1766:	a1 1d       	adc	r26, r1
    1768:	62 1f       	adc	r22, r18
    176a:	83 9f       	mul	r24, r19
    176c:	a0 0d       	add	r26, r0
    176e:	61 1d       	adc	r22, r1
    1770:	22 1f       	adc	r18, r18
    1772:	74 9f       	mul	r23, r20
    1774:	33 27       	eor	r19, r19
    1776:	a0 0d       	add	r26, r0
    1778:	61 1d       	adc	r22, r1
    177a:	23 1f       	adc	r18, r19
    177c:	84 9f       	mul	r24, r20
    177e:	60 0d       	add	r22, r0
    1780:	21 1d       	adc	r18, r1
    1782:	82 2f       	mov	r24, r18
    1784:	76 2f       	mov	r23, r22
    1786:	6a 2f       	mov	r22, r26
    1788:	11 24       	eor	r1, r1
    178a:	9f 57       	subi	r25, 0x7F	; 127
    178c:	50 40       	sbci	r21, 0x00	; 0
    178e:	9a f0       	brmi	.+38     	; 0x17b6 <__mulsf3_pse+0x88>
    1790:	f1 f0       	breq	.+60     	; 0x17ce <__mulsf3_pse+0xa0>
    1792:	88 23       	and	r24, r24
    1794:	4a f0       	brmi	.+18     	; 0x17a8 <__mulsf3_pse+0x7a>
    1796:	ee 0f       	add	r30, r30
    1798:	ff 1f       	adc	r31, r31
    179a:	bb 1f       	adc	r27, r27
    179c:	66 1f       	adc	r22, r22
    179e:	77 1f       	adc	r23, r23
    17a0:	88 1f       	adc	r24, r24
    17a2:	91 50       	subi	r25, 0x01	; 1
    17a4:	50 40       	sbci	r21, 0x00	; 0
    17a6:	a9 f7       	brne	.-22     	; 0x1792 <__mulsf3_pse+0x64>
    17a8:	9e 3f       	cpi	r25, 0xFE	; 254
    17aa:	51 05       	cpc	r21, r1
    17ac:	80 f0       	brcs	.+32     	; 0x17ce <__mulsf3_pse+0xa0>
    17ae:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__fp_inf>
    17b2:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__fp_szero>
    17b6:	5f 3f       	cpi	r21, 0xFF	; 255
    17b8:	e4 f3       	brlt	.-8      	; 0x17b2 <__mulsf3_pse+0x84>
    17ba:	98 3e       	cpi	r25, 0xE8	; 232
    17bc:	d4 f3       	brlt	.-12     	; 0x17b2 <__mulsf3_pse+0x84>
    17be:	86 95       	lsr	r24
    17c0:	77 95       	ror	r23
    17c2:	67 95       	ror	r22
    17c4:	b7 95       	ror	r27
    17c6:	f7 95       	ror	r31
    17c8:	e7 95       	ror	r30
    17ca:	9f 5f       	subi	r25, 0xFF	; 255
    17cc:	c1 f7       	brne	.-16     	; 0x17be <__mulsf3_pse+0x90>
    17ce:	fe 2b       	or	r31, r30
    17d0:	88 0f       	add	r24, r24
    17d2:	91 1d       	adc	r25, r1
    17d4:	96 95       	lsr	r25
    17d6:	87 95       	ror	r24
    17d8:	97 f9       	bld	r25, 7
    17da:	08 95       	ret

000017dc <__divmodsi4>:
    17dc:	05 2e       	mov	r0, r21
    17de:	97 fb       	bst	r25, 7
    17e0:	1e f4       	brtc	.+6      	; 0x17e8 <__divmodsi4+0xc>
    17e2:	00 94       	com	r0
    17e4:	0e 94 05 0c 	call	0x180a	; 0x180a <__negsi2>
    17e8:	57 fd       	sbrc	r21, 7
    17ea:	07 d0       	rcall	.+14     	; 0x17fa <__divmodsi4_neg2>
    17ec:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__udivmodsi4>
    17f0:	07 fc       	sbrc	r0, 7
    17f2:	03 d0       	rcall	.+6      	; 0x17fa <__divmodsi4_neg2>
    17f4:	4e f4       	brtc	.+18     	; 0x1808 <__divmodsi4_exit>
    17f6:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__negsi2>

000017fa <__divmodsi4_neg2>:
    17fa:	50 95       	com	r21
    17fc:	40 95       	com	r20
    17fe:	30 95       	com	r19
    1800:	21 95       	neg	r18
    1802:	3f 4f       	sbci	r19, 0xFF	; 255
    1804:	4f 4f       	sbci	r20, 0xFF	; 255
    1806:	5f 4f       	sbci	r21, 0xFF	; 255

00001808 <__divmodsi4_exit>:
    1808:	08 95       	ret

0000180a <__negsi2>:
    180a:	90 95       	com	r25
    180c:	80 95       	com	r24
    180e:	70 95       	com	r23
    1810:	61 95       	neg	r22
    1812:	7f 4f       	sbci	r23, 0xFF	; 255
    1814:	8f 4f       	sbci	r24, 0xFF	; 255
    1816:	9f 4f       	sbci	r25, 0xFF	; 255
    1818:	08 95       	ret

0000181a <__umulhisi3>:
    181a:	a2 9f       	mul	r26, r18
    181c:	b0 01       	movw	r22, r0
    181e:	b3 9f       	mul	r27, r19
    1820:	c0 01       	movw	r24, r0
    1822:	a3 9f       	mul	r26, r19
    1824:	70 0d       	add	r23, r0
    1826:	81 1d       	adc	r24, r1
    1828:	11 24       	eor	r1, r1
    182a:	91 1d       	adc	r25, r1
    182c:	b2 9f       	mul	r27, r18
    182e:	70 0d       	add	r23, r0
    1830:	81 1d       	adc	r24, r1
    1832:	11 24       	eor	r1, r1
    1834:	91 1d       	adc	r25, r1
    1836:	08 95       	ret

00001838 <__udivmodsi4>:
    1838:	a1 e2       	ldi	r26, 0x21	; 33
    183a:	1a 2e       	mov	r1, r26
    183c:	aa 1b       	sub	r26, r26
    183e:	bb 1b       	sub	r27, r27
    1840:	fd 01       	movw	r30, r26
    1842:	0d c0       	rjmp	.+26     	; 0x185e <__udivmodsi4_ep>

00001844 <__udivmodsi4_loop>:
    1844:	aa 1f       	adc	r26, r26
    1846:	bb 1f       	adc	r27, r27
    1848:	ee 1f       	adc	r30, r30
    184a:	ff 1f       	adc	r31, r31
    184c:	a2 17       	cp	r26, r18
    184e:	b3 07       	cpc	r27, r19
    1850:	e4 07       	cpc	r30, r20
    1852:	f5 07       	cpc	r31, r21
    1854:	20 f0       	brcs	.+8      	; 0x185e <__udivmodsi4_ep>
    1856:	a2 1b       	sub	r26, r18
    1858:	b3 0b       	sbc	r27, r19
    185a:	e4 0b       	sbc	r30, r20
    185c:	f5 0b       	sbc	r31, r21

0000185e <__udivmodsi4_ep>:
    185e:	66 1f       	adc	r22, r22
    1860:	77 1f       	adc	r23, r23
    1862:	88 1f       	adc	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	1a 94       	dec	r1
    1868:	69 f7       	brne	.-38     	; 0x1844 <__udivmodsi4_loop>
    186a:	60 95       	com	r22
    186c:	70 95       	com	r23
    186e:	80 95       	com	r24
    1870:	90 95       	com	r25
    1872:	9b 01       	movw	r18, r22
    1874:	ac 01       	movw	r20, r24
    1876:	bd 01       	movw	r22, r26
    1878:	cf 01       	movw	r24, r30
    187a:	08 95       	ret

0000187c <_exit>:
    187c:	f8 94       	cli

0000187e <__stop_program>:
    187e:	ff cf       	rjmp	.-2      	; 0x187e <__stop_program>
