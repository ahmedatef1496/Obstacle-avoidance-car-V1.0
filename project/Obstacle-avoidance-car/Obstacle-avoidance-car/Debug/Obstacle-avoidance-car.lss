
Obstacle-avoidance-car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c0  00800060  00001c6a  00001cfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000032  00800120  00800120  00001dbe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001dbe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001df0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000470  00000000  00000000  00001e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000047d6  00000000  00000000  0000229c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001574  00000000  00000000  00006a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002716  00000000  00000000  00007fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be8  00000000  00000000  0000a6fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014d7  00000000  00000000  0000b2e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000295d  00000000  00000000  0000c7bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  0000f118  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__vector_1>
       8:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__vector_2>
       c:	0c 94 46 09 	jmp	0x128c	; 0x128c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__vector_5>
      18:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__vector_8>
      24:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 32       	cpi	r26, 0x20	; 32
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 e2       	ldi	r26, 0x20	; 32
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 35       	cpi	r26, 0x52	; 82
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <main>
      8a:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Speed_50_check>:
	LCD_WriteNumber(g_distance);
	LCD_WriteString(" Cm");
}

void Speed_50_check()
{
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
	if(g_speed_flag == 1)
      96:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <g_speed_flag>
      9a:	81 30       	cpi	r24, 0x01	; 1
      9c:	c9 f5       	brne	.+114    	; 0x110 <Speed_50_check+0x7e>
	{
		
		if (ovf < mode_ovf ){
      9e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <ovf>
      a2:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <ovf+0x1>
      a6:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <ovf+0x2>
      aa:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <ovf+0x3>
      ae:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <mode_ovf>
      b2:	50 91 42 01 	lds	r21, 0x0142	; 0x800142 <mode_ovf+0x1>
      b6:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <mode_ovf+0x2>
      ba:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <mode_ovf+0x3>
      be:	84 17       	cp	r24, r20
      c0:	95 07       	cpc	r25, r21
      c2:	a6 07       	cpc	r26, r22
      c4:	b7 07       	cpc	r27, r23
      c6:	60 f4       	brcc	.+24     	; 0xe0 <Speed_50_check+0x4e>
			ovf++;
      c8:	01 96       	adiw	r24, 0x01	; 1
      ca:	a1 1d       	adc	r26, r1
      cc:	b1 1d       	adc	r27, r1
      ce:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <ovf>
      d2:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <ovf+0x1>
      d6:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <ovf+0x2>
      da:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <ovf+0x3>
      de:	18 c0       	rjmp	.+48     	; 0x110 <Speed_50_check+0x7e>
		}
		else if ( ovf == mode_ovf && mode_ovf!=0)
      e0:	84 17       	cp	r24, r20
      e2:	95 07       	cpc	r25, r21
      e4:	a6 07       	cpc	r26, r22
      e6:	b7 07       	cpc	r27, r23
      e8:	99 f4       	brne	.+38     	; 0x110 <Speed_50_check+0x7e>
      ea:	45 2b       	or	r20, r21
      ec:	46 2b       	or	r20, r22
      ee:	47 2b       	or	r20, r23
      f0:	79 f0       	breq	.+30     	; 0x110 <Speed_50_check+0x7e>
		{
			ovf =0 ;
      f2:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ovf>
      f6:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <ovf+0x1>
      fa:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ovf+0x2>
      fe:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ovf+0x3>
			if (car_mode ==0)
     102:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <car_mode>
     106:	81 11       	cpse	r24, r1
     108:	03 c0       	rjmp	.+6      	; 0x110 <Speed_50_check+0x7e>
			{
				car_mode=1;
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <car_mode>
			}
			
		}
	}
}
     110:	1f 91       	pop	r17
     112:	0f 91       	pop	r16
     114:	08 95       	ret

00000116 <STOP_check>:
static u8 g_Rotate_Counter;


void STOP_check (void)
{
	KEYPAD_getpressedkey(&g_keyPressed);
     116:	86 e2       	ldi	r24, 0x26	; 38
     118:	91 e0       	ldi	r25, 0x01	; 1
     11a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <KEYPAD_getpressedkey>
	if (g_keyPressed == '2')
     11e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <g_keyPressed>
     122:	82 33       	cpi	r24, 0x32	; 50
     124:	a1 f4       	brne	.+40     	; 0x14e <STOP_check+0x38>
	{
		LCD_Clear();
     126:	0e 94 ce 04 	call	0x99c	; 0x99c <LCD_Clear>
		LCD_SetCursor(0,4);
     12a:	64 e0       	ldi	r22, 0x04	; 4
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_SetCursor>
		LCD_WriteString("STOPPED!");
     132:	88 e6       	ldi	r24, 0x68	; 104
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
		Car_Stop();
     13a:	0e 94 8c 05 	call	0xb18	; 0xb18 <Car_Stop>
		do {
			KEYPAD_getpressedkey(&g_keyPressed);
     13e:	86 e2       	ldi	r24, 0x26	; 38
     140:	91 e0       	ldi	r25, 0x01	; 1
     142:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <KEYPAD_getpressedkey>
		} while (g_keyPressed != '1');				//Key 1 is pressed.
     146:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <g_keyPressed>
     14a:	81 33       	cpi	r24, 0x31	; 49
     14c:	c1 f7       	brne	.-16     	; 0x13e <STOP_check+0x28>
     14e:	08 95       	ret

00000150 <car_Forward_30>:
	}
}

void car_Forward_30()
{	
	PWM_set_duty(30,100);
     150:	44 e6       	ldi	r20, 0x64	; 100
     152:	50 e0       	ldi	r21, 0x00	; 0
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	70 e0       	ldi	r23, 0x00	; 0
     158:	8e e1       	ldi	r24, 0x1E	; 30
     15a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <PWM_set_duty>
	Car_Moving_FWD();
     15e:	0e 94 68 05 	call	0xad0	; 0xad0 <Car_Moving_FWD>
	LCD_SetCursor(0,0);
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_SetCursor>
	LCD_WriteString("Speed:30% Dir:	F");
     16a:	81 e7       	ldi	r24, 0x71	; 113
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
	LCD_SetCursor(1,0);
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_SetCursor>
	LCD_WriteString("Dist.:");
     17a:	82 e8       	ldi	r24, 0x82	; 130
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
	LCD_WriteNumber(g_distance);
     182:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <g_distance>
     186:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <g_distance+0x1>
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCD_WriteNumber>
	LCD_WriteString(" Cm");
     192:	89 e8       	ldi	r24, 0x89	; 137
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
     19a:	08 95       	ret

0000019c <car_Forward_50>:
}

void car_Forward_50()
{
	PWM_set_duty(50,100);
     19c:	44 e6       	ldi	r20, 0x64	; 100
     19e:	50 e0       	ldi	r21, 0x00	; 0
     1a0:	60 e0       	ldi	r22, 0x00	; 0
     1a2:	70 e0       	ldi	r23, 0x00	; 0
     1a4:	82 e3       	ldi	r24, 0x32	; 50
     1a6:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <PWM_set_duty>
	Car_Moving_FWD();
     1aa:	0e 94 68 05 	call	0xad0	; 0xad0 <Car_Moving_FWD>
	LCD_SetCursor(0,0);
     1ae:	60 e0       	ldi	r22, 0x00	; 0
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_SetCursor>
	LCD_WriteString("Speed:50% Dir:	F");
     1b6:	8d e8       	ldi	r24, 0x8D	; 141
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
	LCD_SetCursor(1,0);
     1be:	60 e0       	ldi	r22, 0x00	; 0
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_SetCursor>
	LCD_WriteString("Dist.:");
     1c6:	82 e8       	ldi	r24, 0x82	; 130
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
	LCD_WriteNumber(g_distance);
     1ce:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <g_distance>
     1d2:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <g_distance+0x1>
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCD_WriteNumber>
	LCD_WriteString(" Cm");
     1de:	89 e8       	ldi	r24, 0x89	; 137
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
     1e6:	08 95       	ret

000001e8 <car_Rotating>:
}

void car_Rotating()
{	
	while (car_mode == 0 && (g_distance <= 30 && g_distance > 20))
     1e8:	32 c0       	rjmp	.+100    	; 0x24e <car_Rotating+0x66>
	{
		
		US_getdistance(&g_distance);
     1ea:	80 e5       	ldi	r24, 0x50	; 80
     1ec:	91 e0       	ldi	r25, 0x01	; 1
     1ee:	0e 94 d5 05 	call	0xbaa	; 0xbaa <US_getdistance>
		STOP_check ();
     1f2:	0e 94 8b 00 	call	0x116	; 0x116 <STOP_check>
		PWM_set_duty(30,100);
     1f6:	44 e6       	ldi	r20, 0x64	; 100
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	8e e1       	ldi	r24, 0x1E	; 30
     200:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <PWM_set_duty>
		LCD_SetCursor(0,0);
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_SetCursor>
		LCD_WriteString("Speed:30% Dir:	R");
     20c:	8e e9       	ldi	r24, 0x9E	; 158
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
		LCD_SetCursor(1,0);
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_SetCursor>
		LCD_WriteString("Dist.:");
     21c:	82 e8       	ldi	r24, 0x82	; 130
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
		LCD_WriteNumber(g_distance);
     224:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <g_distance>
     228:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <g_distance+0x1>
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCD_WriteNumber>
		LCD_WriteString(" Cm");
     234:	89 e8       	ldi	r24, 0x89	; 137
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
		if (g_buttonCounter %2 == 0)
     23c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <g_buttonCounter>
     240:	80 fd       	sbrc	r24, 0
     242:	03 c0       	rjmp	.+6      	; 0x24a <car_Rotating+0x62>
		{
			Car_Rotate_Right();
     244:	0e 94 9e 05 	call	0xb3c	; 0xb3c <Car_Rotate_Right>
     248:	02 c0       	rjmp	.+4      	; 0x24e <car_Rotating+0x66>
		}
		else
		{
			Car_Rotate_Left();
     24a:	0e 94 b0 05 	call	0xb60	; 0xb60 <Car_Rotate_Left>
	LCD_WriteString(" Cm");
}

void car_Rotating()
{	
	while (car_mode == 0 && (g_distance <= 30 && g_distance > 20))
     24e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <car_mode>
     252:	81 11       	cpse	r24, r1
     254:	0d c0       	rjmp	.+26     	; 0x270 <car_Rotating+0x88>
     256:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     25a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     25e:	4f 97       	sbiw	r24, 0x1f	; 31
     260:	38 f4       	brcc	.+14     	; 0x270 <car_Rotating+0x88>
     262:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     266:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     26a:	45 97       	sbiw	r24, 0x15	; 21
     26c:	08 f0       	brcs	.+2      	; 0x270 <car_Rotating+0x88>
     26e:	bd cf       	rjmp	.-134    	; 0x1ea <car_Rotating+0x2>
     270:	08 95       	ret

00000272 <car_Backword_30>:
	}
}

void car_Backword_30()
{
	while (g_distance <= 20)
     272:	2b c0       	rjmp	.+86     	; 0x2ca <car_Backword_30+0x58>
	{
		STOP_check();
     274:	0e 94 8b 00 	call	0x116	; 0x116 <STOP_check>
		US_getdistance(&g_distance);
     278:	80 e5       	ldi	r24, 0x50	; 80
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <US_getdistance>
		PWM_set_duty(30,100);
     280:	44 e6       	ldi	r20, 0x64	; 100
     282:	50 e0       	ldi	r21, 0x00	; 0
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	70 e0       	ldi	r23, 0x00	; 0
     288:	8e e1       	ldi	r24, 0x1E	; 30
     28a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <PWM_set_duty>
		Car_Moving_BWD();
     28e:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <Car_Moving_BWD>
		LCD_SetCursor(0,0);
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_SetCursor>
		LCD_WriteString("Speed:30% Dir:	B");
     29a:	8f ea       	ldi	r24, 0xAF	; 175
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
		LCD_SetCursor(1,0);
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_SetCursor>
		LCD_WriteString("Dist.:");
     2aa:	82 e8       	ldi	r24, 0x82	; 130
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
		LCD_WriteNumber(g_distance);
     2b2:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <g_distance>
     2b6:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <g_distance+0x1>
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCD_WriteNumber>
		LCD_WriteString(" Cm");
     2c2:	89 e8       	ldi	r24, 0x89	; 137
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
	}
}

void car_Backword_30()
{
	while (g_distance <= 20)
     2ca:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     2ce:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     2d2:	45 97       	sbiw	r24, 0x15	; 21
     2d4:	78 f2       	brcs	.-98     	; 0x274 <car_Backword_30+0x2>
		LCD_WriteString("Dist.:");
		LCD_WriteNumber(g_distance);
		LCD_WriteString(" Cm");
	}
	
}
     2d6:	08 95       	ret

000002d8 <Car_Stopping>:

void Car_Stopping()
{
	PWM_set_duty(0,100);
     2d8:	44 e6       	ldi	r20, 0x64	; 100
     2da:	50 e0       	ldi	r21, 0x00	; 0
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <PWM_set_duty>
	Car_Stop();
     2e6:	0e 94 8c 05 	call	0xb18	; 0xb18 <Car_Stop>
	LCD_SetCursor(0,0);
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_SetCursor>
	LCD_WriteString("Speed:00% Dir:	S");
     2f2:	80 ec       	ldi	r24, 0xC0	; 192
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
	LCD_SetCursor(1,0);
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_SetCursor>
	LCD_WriteString("Dist.:");
     302:	82 e8       	ldi	r24, 0x82	; 130
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
	LCD_WriteNumber(g_distance);
     30a:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <g_distance>
     30e:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <g_distance+0x1>
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCD_WriteNumber>
	LCD_WriteString(" Cm");
     31a:	89 e8       	ldi	r24, 0x89	; 137
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
     322:	08 95       	ret

00000324 <startStage>:
		}
	}
}

void startStage(void) 
{	
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	1f 92       	push	r1
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
	Button_State buttonState = 0;
     32e:	19 82       	std	Y+1, r1	; 0x01


	do {							
		KEYPAD_getpressedkey(&g_keyPressed);
     330:	86 e2       	ldi	r24, 0x26	; 38
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <KEYPAD_getpressedkey>
		} while (g_keyPressed != '1');				//Key 1 is pressed. 
     338:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <g_keyPressed>
     33c:	81 33       	cpi	r24, 0x31	; 49
     33e:	c1 f7       	brne	.-16     	; 0x330 <startStage+0xc>
	
	LCD_SetCursor(0, 0);
     340:	60 e0       	ldi	r22, 0x00	; 0
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_SetCursor>
	LCD_WriteString("Set Def Rot");
     348:	81 ed       	ldi	r24, 0xD1	; 209
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
	LCD_SetCursor(1, 0);
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_SetCursor>
	LCD_WriteString("Right");
     358:	8d ed       	ldi	r24, 0xDD	; 221
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
	
	ovf = 0;
     360:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ovf>
     364:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <ovf+0x1>
     368:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ovf+0x2>
     36c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ovf+0x3>
	mode_ovf = 156250;								//starts 5 seconds timer in ISR
     370:	8a e5       	ldi	r24, 0x5A	; 90
     372:	92 e6       	ldi	r25, 0x62	; 98
     374:	a2 e0       	ldi	r26, 0x02	; 2
     376:	b0 e0       	ldi	r27, 0x00	; 0
     378:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <mode_ovf>
     37c:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <mode_ovf+0x1>
     380:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <mode_ovf+0x2>
     384:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <mode_ovf+0x3>
	g_speed_flag = 1;
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <g_speed_flag>
	
	while (car_mode == 0)
     38e:	56 c0       	rjmp	.+172    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
	{
		Is_pressed(BUTTON_PIN, &buttonState);
     390:	be 01       	movw	r22, r28
     392:	6f 5f       	subi	r22, 0xFF	; 255
     394:	7f 4f       	sbci	r23, 0xFF	; 255
     396:	8e e1       	ldi	r24, 0x1E	; 30
     398:	0e 94 42 03 	call	0x684	; 0x684 <Is_pressed>
			if (buttonState == pressed)
     39c:	89 81       	ldd	r24, Y+1	; 0x01
     39e:	81 30       	cpi	r24, 0x01	; 1
     3a0:	79 f4       	brne	.+30     	; 0x3c0 <startStage+0x9c>
			{
				g_buttonCounter++;
     3a2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <g_buttonCounter>
     3a6:	8f 5f       	subi	r24, 0xFF	; 255
     3a8:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <g_buttonCounter>
				while (buttonState == pressed) {
     3ac:	06 c0       	rjmp	.+12     	; 0x3ba <startStage+0x96>
					Is_pressed(BUTTON_PIN, &buttonState);
     3ae:	be 01       	movw	r22, r28
     3b0:	6f 5f       	subi	r22, 0xFF	; 255
     3b2:	7f 4f       	sbci	r23, 0xFF	; 255
     3b4:	8e e1       	ldi	r24, 0x1E	; 30
     3b6:	0e 94 42 03 	call	0x684	; 0x684 <Is_pressed>
	{
		Is_pressed(BUTTON_PIN, &buttonState);
			if (buttonState == pressed)
			{
				g_buttonCounter++;
				while (buttonState == pressed) {
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	81 30       	cpi	r24, 0x01	; 1
     3be:	b9 f3       	breq	.-18     	; 0x3ae <startStage+0x8a>
					Is_pressed(BUTTON_PIN, &buttonState);
				}
			}
			if ( (g_buttonCounter % 2 == 0 || g_buttonCounter == 0) && lcdFlag == 0 )
     3c0:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <g_buttonCounter>
     3c4:	80 ff       	sbrs	r24, 0
     3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <startStage+0xac>
     3c8:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <g_buttonCounter>
     3cc:	81 11       	cpse	r24, r1
     3ce:	19 c0       	rjmp	.+50     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     3d0:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <lcdFlag>
     3d4:	81 11       	cpse	r24, r1
     3d6:	15 c0       	rjmp	.+42     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
			{
				LCD_SetCursor(0, 0);
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_SetCursor>
				LCD_WriteString("Set Def. Rot.");
     3de:	83 ee       	ldi	r24, 0xE3	; 227
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
				LCD_SetCursor(1, 0);
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_SetCursor>
				LCD_WriteString("Right");
     3ee:	8d ed       	ldi	r24, 0xDD	; 221
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
				lcdFlag = 1;
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <lcdFlag>
				lcdFlag2 = 0;
     3fc:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <lcdFlag2>
     400:	1d c0       	rjmp	.+58     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
			} 
			else if (lcdFlag2 == 0 && g_buttonCounter % 2 != 0)
     402:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <lcdFlag2>
     406:	81 11       	cpse	r24, r1
     408:	19 c0       	rjmp	.+50     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     40a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <g_buttonCounter>
     40e:	80 ff       	sbrs	r24, 0
     410:	15 c0       	rjmp	.+42     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
				{
					LCD_SetCursor(0, 0);
     412:	60 e0       	ldi	r22, 0x00	; 0
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_SetCursor>
					LCD_WriteString("Set Def. Rot.");
     41a:	83 ee       	ldi	r24, 0xE3	; 227
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
					LCD_SetCursor(1, 0);
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_SetCursor>
					LCD_WriteString("Left ");
     42a:	81 ef       	ldi	r24, 0xF1	; 241
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
					lcdFlag2 = 1;
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <lcdFlag2>
					lcdFlag = 0;
     438:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <lcdFlag>
	
	ovf = 0;
	mode_ovf = 156250;								//starts 5 seconds timer in ISR
	g_speed_flag = 1;
	
	while (car_mode == 0)
     43c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <car_mode>
     440:	88 23       	and	r24, r24
     442:	09 f4       	brne	.+2      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     444:	a5 cf       	rjmp	.-182    	; 0x390 <startStage+0x6c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     446:	2f ef       	ldi	r18, 0xFF	; 255
     448:	89 e6       	ldi	r24, 0x69	; 105
     44a:	98 e1       	ldi	r25, 0x18	; 24
     44c:	21 50       	subi	r18, 0x01	; 1
     44e:	80 40       	sbci	r24, 0x00	; 0
     450:	90 40       	sbci	r25, 0x00	; 0
     452:	e1 f7       	brne	.-8      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     454:	00 c0       	rjmp	.+0      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     456:	00 00       	nop
					lcdFlag2 = 1;
					lcdFlag = 0;
				}
	}
	_delay_ms(1000);
	g_start_Flag = 1;
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	car_mode =0;
     45e:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <car_mode>
	mode_ovf =0;
     462:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <mode_ovf>
     466:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <mode_ovf+0x1>
     46a:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <mode_ovf+0x2>
     46e:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <mode_ovf+0x3>
	g_speed_flag=0;
     472:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <g_speed_flag>
	ovf = 0;
     476:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ovf>
     47a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <ovf+0x1>
     47e:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ovf+0x2>
     482:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ovf+0x3>
}
     486:	0f 90       	pop	r0
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	08 95       	ret

0000048e <app_init>:



void app_init()
{
	LCD_PinsInit();
     48e:	0e 94 39 05 	call	0xa72	; 0xa72 <LCD_PinsInit>
	LCD_Init();
     492:	0e 94 8b 04 	call	0x916	; 0x916 <LCD_Init>
	GLOBALE_ENABLE();
     496:	78 94       	sei
	pwm_init();
     498:	0e 94 c2 09 	call	0x1384	; 0x1384 <pwm_init>
	Car_Motors_init();
     49c:	0e 94 56 05 	call	0xaac	; 0xaac <Car_Motors_init>
	LCD_Init();
     4a0:	0e 94 8b 04 	call	0x916	; 0x916 <LCD_Init>
	KEYPAD_init();
     4a4:	0e 94 61 03 	call	0x6c2	; 0x6c2 <KEYPAD_init>
	DIO_initpin(PIND6,INPULL);
     4a8:	62 e0       	ldi	r22, 0x02	; 2
     4aa:	8e e1       	ldi	r24, 0x1E	; 30
     4ac:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_initpin>
	DIO_Init_All();
     4b0:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_Init_All>
	US_init();
     4b4:	0e 94 d2 05 	call	0xba4	; 0xba4 <US_init>
	TIMER_2_INT();
     4b8:	0e 94 a0 0b 	call	0x1740	; 0x1740 <TIMER_2_INT>
	TIMER2_OV_SetCallBack(Speed_50_check);
     4bc:	89 e4       	ldi	r24, 0x49	; 73
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 ac 0b 	call	0x1758	; 0x1758 <TIMER2_OV_SetCallBack>
     4c4:	08 95       	ret

000004c6 <app_start>:
}

void app_start()
{
	
	startStage();
     4c6:	0e 94 92 01 	call	0x324	; 0x324 <startStage>
	
	
	while (g_start_Flag)
     4ca:	d7 c0       	rjmp	.+430    	; 0x67a <app_start+0x1b4>
	{
		STOP_check ();
     4cc:	0e 94 8b 00 	call	0x116	; 0x116 <STOP_check>
		US_getdistance(&g_distance);
     4d0:	80 e5       	ldi	r24, 0x50	; 80
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	0e 94 d5 05 	call	0xbaa	; 0xbaa <US_getdistance>
		if (g_distance > 70 && car_mode == 0)
     4d8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     4dc:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     4e0:	87 34       	cpi	r24, 0x47	; 71
     4e2:	91 05       	cpc	r25, r1
     4e4:	b0 f0       	brcs	.+44     	; 0x512 <app_start+0x4c>
     4e6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <car_mode>
     4ea:	81 11       	cpse	r24, r1
     4ec:	12 c0       	rjmp	.+36     	; 0x512 <app_start+0x4c>
		{
			car_Forward_30();
     4ee:	0e 94 a8 00 	call	0x150	; 0x150 <car_Forward_30>
			g_speed_flag = 1;
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <g_speed_flag>
			mode_ovf = 156250;								//starts 5 sec. timer to increase the speed
     4f8:	8a e5       	ldi	r24, 0x5A	; 90
     4fa:	92 e6       	ldi	r25, 0x62	; 98
     4fc:	a2 e0       	ldi	r26, 0x02	; 2
     4fe:	b0 e0       	ldi	r27, 0x00	; 0
     500:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <mode_ovf>
     504:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <mode_ovf+0x1>
     508:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <mode_ovf+0x2>
     50c:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <mode_ovf+0x3>
     510:	b4 c0       	rjmp	.+360    	; 0x67a <app_start+0x1b4>
		}
		else if (car_mode == 1 && g_distance > 70)
     512:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <car_mode>
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	51 f4       	brne	.+20     	; 0x52e <app_start+0x68>
     51a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     51e:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     522:	87 34       	cpi	r24, 0x47	; 71
     524:	91 05       	cpc	r25, r1
     526:	18 f0       	brcs	.+6      	; 0x52e <app_start+0x68>
		{
			car_Forward_50();
     528:	0e 94 ce 00 	call	0x19c	; 0x19c <car_Forward_50>
     52c:	a6 c0       	rjmp	.+332    	; 0x67a <app_start+0x1b4>
		}
		else if (g_distance <= 70 && g_distance > 30)
     52e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     532:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     536:	87 34       	cpi	r24, 0x47	; 71
     538:	91 05       	cpc	r25, r1
     53a:	f8 f4       	brcc	.+62     	; 0x57a <app_start+0xb4>
     53c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     540:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     544:	4f 97       	sbiw	r24, 0x1f	; 31
     546:	c8 f0       	brcs	.+50     	; 0x57a <app_start+0xb4>
		{
			car_mode = 0;
     548:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <car_mode>
			mode_ovf=0;
     54c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <mode_ovf>
     550:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <mode_ovf+0x1>
     554:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <mode_ovf+0x2>
     558:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <mode_ovf+0x3>
			ovf = 0;
     55c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ovf>
     560:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <ovf+0x1>
     564:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ovf+0x2>
     568:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ovf+0x3>
			g_speed_flag =0;
     56c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <g_speed_flag>
			g_Rotate_Counter = 0;
     570:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
			car_Forward_30();
     574:	0e 94 a8 00 	call	0x150	; 0x150 <car_Forward_30>
     578:	80 c0       	rjmp	.+256    	; 0x67a <app_start+0x1b4>
		}
		else if (g_distance <= 30 && g_distance > 20)
     57a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     57e:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     582:	4f 97       	sbiw	r24, 0x1f	; 31
     584:	08 f0       	brcs	.+2      	; 0x588 <app_start+0xc2>
     586:	6d c0       	rjmp	.+218    	; 0x662 <app_start+0x19c>
     588:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     58c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     590:	45 97       	sbiw	r24, 0x15	; 21
     592:	08 f4       	brcc	.+2      	; 0x596 <app_start+0xd0>
     594:	66 c0       	rjmp	.+204    	; 0x662 <app_start+0x19c>
		{
			Car_Stopping();
     596:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Car_Stopping>
			g_speed_flag = 1;
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <g_speed_flag>
			ovf = 0;
     5a0:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ovf>
     5a4:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <ovf+0x1>
     5a8:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ovf+0x2>
     5ac:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ovf+0x3>
			mode_ovf = 62500;								//starts timer for 90 degree rotation
     5b0:	84 e2       	ldi	r24, 0x24	; 36
     5b2:	94 ef       	ldi	r25, 0xF4	; 244
     5b4:	a0 e0       	ldi	r26, 0x00	; 0
     5b6:	b0 e0       	ldi	r27, 0x00	; 0
     5b8:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <mode_ovf>
     5bc:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <mode_ovf+0x1>
     5c0:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <mode_ovf+0x2>
     5c4:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <mode_ovf+0x3>
					
			car_Rotating();
     5c8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <car_Rotating>
						
			car_mode = 0;
     5cc:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <car_mode>
			mode_ovf = 0;
     5d0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <mode_ovf>
     5d4:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <mode_ovf+0x1>
     5d8:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <mode_ovf+0x2>
     5dc:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <mode_ovf+0x3>
			g_speed_flag = 0;
     5e0:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <g_speed_flag>
			g_Rotate_Counter++;
     5e4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     5e8:	8f 5f       	subi	r24, 0xFF	; 255
     5ea:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
			if (g_Rotate_Counter == 4)
     5ee:	84 30       	cpi	r24, 0x04	; 4
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <app_start+0x12e>
     5f2:	43 c0       	rjmp	.+134    	; 0x67a <app_start+0x1b4>
     5f4:	29 c0       	rjmp	.+82     	; 0x648 <app_start+0x182>
			{
				while (g_distance <= 30 && g_distance > 20)
				{
					US_getdistance(&g_distance);
     5f6:	80 e5       	ldi	r24, 0x50	; 80
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	0e 94 d5 05 	call	0xbaa	; 0xbaa <US_getdistance>
					PWM_set_duty(0,100);
     5fe:	44 e6       	ldi	r20, 0x64	; 100
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <PWM_set_duty>
					Car_Stop();
     60c:	0e 94 8c 05 	call	0xb18	; 0xb18 <Car_Stop>
					LCD_SetCursor(0,0);
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_SetCursor>
					LCD_WriteString("Speed:00% Dir:	S");
     618:	80 ec       	ldi	r24, 0xC0	; 192
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
					LCD_SetCursor(1,0);
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_SetCursor>
					LCD_WriteString("Dist.:");
     628:	82 e8       	ldi	r24, 0x82	; 130
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
					LCD_WriteNumber(g_distance);
     630:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <g_distance>
     634:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <g_distance+0x1>
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCD_WriteNumber>
					LCD_WriteString(" Cm");
     640:	89 e8       	ldi	r24, 0x89	; 137
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WriteString>
			mode_ovf = 0;
			g_speed_flag = 0;
			g_Rotate_Counter++;
			if (g_Rotate_Counter == 4)
			{
				while (g_distance <= 30 && g_distance > 20)
     648:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     64c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     650:	4f 97       	sbiw	r24, 0x1f	; 31
     652:	98 f4       	brcc	.+38     	; 0x67a <app_start+0x1b4>
     654:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     658:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     65c:	45 97       	sbiw	r24, 0x15	; 21
     65e:	58 f6       	brcc	.-106    	; 0x5f6 <app_start+0x130>
     660:	0c c0       	rjmp	.+24     	; 0x67a <app_start+0x1b4>
				}
				
			}
		}
		
		else if (g_distance <= 20)
     662:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     666:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     66a:	45 97       	sbiw	r24, 0x15	; 21
     66c:	30 f4       	brcc	.+12     	; 0x67a <app_start+0x1b4>
		{
			g_Rotate_Counter = 0;
     66e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
			Car_Stopping();
     672:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Car_Stopping>
			car_Backword_30();
     676:	0e 94 39 01 	call	0x272	; 0x272 <car_Backword_30>
{
	
	startStage();
	
	
	while (g_start_Flag)
     67a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     67e:	81 11       	cpse	r24, r1
     680:	25 cf       	rjmp	.-438    	; 0x4cc <app_start+0x6>
			g_Rotate_Counter = 0;
			Car_Stopping();
			car_Backword_30();
		}
	}
     682:	08 95       	ret

00000684 <Is_pressed>:

#include "button_interface.h"
#include "button_config.h"
//static u8 button_press = 0 ; /** GLOBAL VARIABLE TO CHECK THE NUMBER OF PRESSED TIMES **/

Button_State Is_pressed(u8 BUTTON_PIN , u8* value){
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	1f 92       	push	r1
     68e:	cd b7       	in	r28, 0x3d	; 61
     690:	de b7       	in	r29, 0x3e	; 62
     692:	8b 01       	movw	r16, r22
	
	Button_State state = Notpressed; 
	en_dioError_t status_pin = WRONG_VALUE;
	
	u8 value_check = 0 ;
     694:	19 82       	std	Y+1, r1	; 0x01
	
	status_pin =  DIO_readpin (BUTTON_PIN, &value_check);
     696:	be 01       	movw	r22, r28
     698:	6f 5f       	subi	r22, 0xFF	; 255
     69a:	7f 4f       	sbci	r23, 0xFF	; 255
     69c:	0e 94 b4 07 	call	0xf68	; 0xf68 <DIO_readpin>
	
	if (!status_pin)
     6a0:	81 11       	cpse	r24, r1
     6a2:	05 c0       	rjmp	.+10     	; 0x6ae <Is_pressed+0x2a>
	{
		state = pressed ; 
		*value = value_check ;
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	f8 01       	movw	r30, r16
     6a8:	80 83       	st	Z, r24
	
	status_pin =  DIO_readpin (BUTTON_PIN, &value_check);
	
	if (!status_pin)
	{
		state = pressed ; 
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <Is_pressed+0x32>
	}
	
	else
	{
		state = Notpressed ; 
		*value = value_check ;
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	f8 01       	movw	r30, r16
     6b2:	80 83       	st	Z, r24
		*value = value_check ;
	}
	
	else
	{
		state = Notpressed ; 
     6b4:	80 e0       	ldi	r24, 0x00	; 0
		*value = value_check ;
	}
	
	return state ; 
	
} 
     6b6:	0f 90       	pop	r0
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	08 95       	ret

000006c2 <KEYPAD_init>:
		{BUTTON7, BUTTON8, BUTTON9}};
			
KEYPAD_initError KEYPAD_init(void){
	
	/*Set Column Initial Values to 1 */
	DIO_writepin (COL_1,HIGH);
     6c2:	61 e0       	ldi	r22, 0x01	; 1
     6c4:	88 e1       	ldi	r24, 0x18	; 24
     6c6:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	DIO_writepin (COL_2,HIGH);
     6ca:	61 e0       	ldi	r22, 0x01	; 1
     6cc:	89 e1       	ldi	r24, 0x19	; 25
     6ce:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	DIO_writepin (COL_3,HIGH);
     6d2:	61 e0       	ldi	r22, 0x01	; 1
     6d4:	8a e1       	ldi	r24, 0x1A	; 26
     6d6:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	
	/* Enable Pull Up Resistors at Input Rows */
	DIO_writepin (ROW_1,HIGH);
     6da:	61 e0       	ldi	r22, 0x01	; 1
     6dc:	84 e0       	ldi	r24, 0x04	; 4
     6de:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	DIO_writepin (ROW_2,HIGH);
     6e2:	61 e0       	ldi	r22, 0x01	; 1
     6e4:	85 e0       	ldi	r24, 0x05	; 5
     6e6:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	DIO_writepin (ROW_3,HIGH);
     6ea:	61 e0       	ldi	r22, 0x01	; 1
     6ec:	86 e0       	ldi	r24, 0x06	; 6
     6ee:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	
	return KEYPAD_initSuccess;
	
}
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	08 95       	ret

000006f6 <KEYPAD_getpressedkey>:


KEYPAD_readError KEYPAD_getpressedkey(u8 *value){
     6f6:	cf 92       	push	r12
     6f8:	df 92       	push	r13
     6fa:	ef 92       	push	r14
     6fc:	ff 92       	push	r15
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	8c 01       	movw	r16, r24

	// Scan all keypad rows
	for (u8 counter_row = 0; counter_row < KEYPAD_ROWS; counter_row++)
     708:	d0 e0       	ldi	r29, 0x00	; 0
     70a:	39 c0       	rjmp	.+114    	; 0x77e <KEYPAD_getpressedkey+0x88>
	{
		 // set current column pin low to test all row pins to find out which button has been pressed
		DIO_writepin (Row_Arr[counter_row],LOW);
     70c:	cd 2e       	mov	r12, r29
     70e:	d1 2c       	mov	r13, r1
     710:	f6 01       	movw	r30, r12
     712:	ef 59       	subi	r30, 0x9F	; 159
     714:	ff 4f       	sbci	r31, 0xFF	; 255
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	80 81       	ld	r24, Z
     71a:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
		
		//scan and test all keypad columns pins
		 for (u8 counter_col = 0; counter_col < KEYPAD_COLUMNS; counter_col++)
     71e:	c0 e0       	ldi	r28, 0x00	; 0
     720:	24 c0       	rjmp	.+72     	; 0x76a <KEYPAD_getpressedkey+0x74>
		 {
			 
			 // check col value if it is 0 then this column and row is connected
			 DIO_readpin (Col_Arr[counter_col],value);
     722:	ec 2e       	mov	r14, r28
     724:	f1 2c       	mov	r15, r1
     726:	f7 01       	movw	r30, r14
     728:	ec 59       	subi	r30, 0x9C	; 156
     72a:	ff 4f       	sbci	r31, 0xFF	; 255
     72c:	b8 01       	movw	r22, r16
     72e:	80 81       	ld	r24, Z
     730:	0e 94 b4 07 	call	0xf68	; 0xf68 <DIO_readpin>
			 
			 if(*value == 0){
     734:	f8 01       	movw	r30, r16
     736:	80 81       	ld	r24, Z
     738:	81 11       	cpse	r24, r1
     73a:	16 c0       	rjmp	.+44     	; 0x768 <KEYPAD_getpressedkey+0x72>
				 
				 *value= Button_Arr[counter_row][counter_col];
     73c:	c6 01       	movw	r24, r12
     73e:	88 0f       	add	r24, r24
     740:	99 1f       	adc	r25, r25
     742:	8c 0d       	add	r24, r12
     744:	9d 1d       	adc	r25, r13
     746:	89 50       	subi	r24, 0x09	; 9
     748:	9f 4f       	sbci	r25, 0xFF	; 255
     74a:	fc 01       	movw	r30, r24
     74c:	ee 0d       	add	r30, r14
     74e:	ff 1d       	adc	r31, r15
     750:	80 81       	ld	r24, Z
     752:	f8 01       	movw	r30, r16
     754:	80 83       	st	Z, r24
				 DIO_writepin (Row_Arr[counter_row],HIGH);
     756:	f6 01       	movw	r30, r12
     758:	ef 59       	subi	r30, 0x9F	; 159
     75a:	ff 4f       	sbci	r31, 0xFF	; 255
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	80 81       	ld	r24, Z
     760:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
				  return KEYPAD_readSuccess;
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	0e c0       	rjmp	.+28     	; 0x784 <KEYPAD_getpressedkey+0x8e>
	{
		 // set current column pin low to test all row pins to find out which button has been pressed
		DIO_writepin (Row_Arr[counter_row],LOW);
		
		//scan and test all keypad columns pins
		 for (u8 counter_col = 0; counter_col < KEYPAD_COLUMNS; counter_col++)
     768:	cf 5f       	subi	r28, 0xFF	; 255
     76a:	c3 30       	cpi	r28, 0x03	; 3
     76c:	d0 f2       	brcs	.-76     	; 0x722 <KEYPAD_getpressedkey+0x2c>
			 }

		}
		
		// set current row pin HIGH again
		DIO_writepin (Row_Arr[counter_row],HIGH);
     76e:	f6 01       	movw	r30, r12
     770:	ef 59       	subi	r30, 0x9F	; 159
     772:	ff 4f       	sbci	r31, 0xFF	; 255
     774:	61 e0       	ldi	r22, 0x01	; 1
     776:	80 81       	ld	r24, Z
     778:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>


KEYPAD_readError KEYPAD_getpressedkey(u8 *value){

	// Scan all keypad rows
	for (u8 counter_row = 0; counter_row < KEYPAD_ROWS; counter_row++)
     77c:	df 5f       	subi	r29, 0xFF	; 255
     77e:	d3 30       	cpi	r29, 0x03	; 3
     780:	28 f2       	brcs	.-118    	; 0x70c <KEYPAD_getpressedkey+0x16>
		// set current row pin HIGH again
		DIO_writepin (Row_Arr[counter_row],HIGH);

	}
	
	return KEYPAD_readFail;
     782:	81 e0       	ldi	r24, 0x01	; 1

}
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	ff 90       	pop	r15
     78e:	ef 90       	pop	r14
     790:	df 90       	pop	r13
     792:	cf 90       	pop	r12
     794:	08 95       	ret

00000796 <WriteIns>:
	for(u8 i=0;i<8;i++)
	{
		WriteData(pattern[i]);
	}
	WriteIns(0x80);
}
     796:	cf 93       	push	r28
     798:	c8 2f       	mov	r28, r24
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	81 e1       	ldi	r24, 0x11	; 17
     79e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     7a2:	6c 2f       	mov	r22, r28
     7a4:	66 1f       	adc	r22, r22
     7a6:	66 27       	eor	r22, r22
     7a8:	66 1f       	adc	r22, r22
     7aa:	87 e1       	ldi	r24, 0x17	; 23
     7ac:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     7b0:	c6 fb       	bst	r28, 6
     7b2:	66 27       	eor	r22, r22
     7b4:	60 f9       	bld	r22, 0
     7b6:	86 e1       	ldi	r24, 0x16	; 22
     7b8:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     7bc:	c5 fb       	bst	r28, 5
     7be:	66 27       	eor	r22, r22
     7c0:	60 f9       	bld	r22, 0
     7c2:	85 e1       	ldi	r24, 0x15	; 21
     7c4:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     7c8:	c4 fb       	bst	r28, 4
     7ca:	66 27       	eor	r22, r22
     7cc:	60 f9       	bld	r22, 0
     7ce:	84 e1       	ldi	r24, 0x14	; 20
     7d0:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     7d4:	61 e0       	ldi	r22, 0x01	; 1
     7d6:	83 e1       	ldi	r24, 0x13	; 19
     7d8:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     7dc:	8f e9       	ldi	r24, 0x9F	; 159
     7de:	9f e0       	ldi	r25, 0x0F	; 15
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	f1 f7       	brne	.-4      	; 0x7e0 <WriteIns+0x4a>
     7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <WriteIns+0x50>
     7e6:	00 00       	nop
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	83 e1       	ldi	r24, 0x13	; 19
     7ec:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     7f0:	8f e9       	ldi	r24, 0x9F	; 159
     7f2:	9f e0       	ldi	r25, 0x0F	; 15
     7f4:	01 97       	sbiw	r24, 0x01	; 1
     7f6:	f1 f7       	brne	.-4      	; 0x7f4 <WriteIns+0x5e>
     7f8:	00 c0       	rjmp	.+0      	; 0x7fa <WriteIns+0x64>
     7fa:	00 00       	nop
     7fc:	c3 fb       	bst	r28, 3
     7fe:	66 27       	eor	r22, r22
     800:	60 f9       	bld	r22, 0
     802:	87 e1       	ldi	r24, 0x17	; 23
     804:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     808:	c2 fb       	bst	r28, 2
     80a:	66 27       	eor	r22, r22
     80c:	60 f9       	bld	r22, 0
     80e:	86 e1       	ldi	r24, 0x16	; 22
     810:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     814:	c1 fb       	bst	r28, 1
     816:	66 27       	eor	r22, r22
     818:	60 f9       	bld	r22, 0
     81a:	85 e1       	ldi	r24, 0x15	; 21
     81c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     820:	6c 2f       	mov	r22, r28
     822:	61 70       	andi	r22, 0x01	; 1
     824:	84 e1       	ldi	r24, 0x14	; 20
     826:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     82a:	61 e0       	ldi	r22, 0x01	; 1
     82c:	83 e1       	ldi	r24, 0x13	; 19
     82e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     832:	8f e9       	ldi	r24, 0x9F	; 159
     834:	9f e0       	ldi	r25, 0x0F	; 15
     836:	01 97       	sbiw	r24, 0x01	; 1
     838:	f1 f7       	brne	.-4      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     83a:	00 c0       	rjmp	.+0      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     83c:	00 00       	nop
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	83 e1       	ldi	r24, 0x13	; 19
     842:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     846:	8f e9       	ldi	r24, 0x9F	; 159
     848:	9f e0       	ldi	r25, 0x0F	; 15
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	f1 f7       	brne	.-4      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     850:	00 00       	nop
     852:	cf 91       	pop	r28
     854:	08 95       	ret

00000856 <WriteData>:
     856:	cf 93       	push	r28
     858:	c8 2f       	mov	r28, r24
     85a:	61 e0       	ldi	r22, 0x01	; 1
     85c:	81 e1       	ldi	r24, 0x11	; 17
     85e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     862:	6c 2f       	mov	r22, r28
     864:	66 1f       	adc	r22, r22
     866:	66 27       	eor	r22, r22
     868:	66 1f       	adc	r22, r22
     86a:	87 e1       	ldi	r24, 0x17	; 23
     86c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     870:	c6 fb       	bst	r28, 6
     872:	66 27       	eor	r22, r22
     874:	60 f9       	bld	r22, 0
     876:	86 e1       	ldi	r24, 0x16	; 22
     878:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     87c:	c5 fb       	bst	r28, 5
     87e:	66 27       	eor	r22, r22
     880:	60 f9       	bld	r22, 0
     882:	85 e1       	ldi	r24, 0x15	; 21
     884:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     888:	c4 fb       	bst	r28, 4
     88a:	66 27       	eor	r22, r22
     88c:	60 f9       	bld	r22, 0
     88e:	84 e1       	ldi	r24, 0x14	; 20
     890:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     894:	61 e0       	ldi	r22, 0x01	; 1
     896:	83 e1       	ldi	r24, 0x13	; 19
     898:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     89c:	8f e9       	ldi	r24, 0x9F	; 159
     89e:	9f e0       	ldi	r25, 0x0F	; 15
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <__stack+0x41>
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <__stack+0x47>
     8a6:	00 00       	nop
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	83 e1       	ldi	r24, 0x13	; 19
     8ac:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     8b0:	8f e9       	ldi	r24, 0x9F	; 159
     8b2:	9f e0       	ldi	r25, 0x0F	; 15
     8b4:	01 97       	sbiw	r24, 0x01	; 1
     8b6:	f1 f7       	brne	.-4      	; 0x8b4 <__stack+0x55>
     8b8:	00 c0       	rjmp	.+0      	; 0x8ba <__stack+0x5b>
     8ba:	00 00       	nop
     8bc:	c3 fb       	bst	r28, 3
     8be:	66 27       	eor	r22, r22
     8c0:	60 f9       	bld	r22, 0
     8c2:	87 e1       	ldi	r24, 0x17	; 23
     8c4:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     8c8:	c2 fb       	bst	r28, 2
     8ca:	66 27       	eor	r22, r22
     8cc:	60 f9       	bld	r22, 0
     8ce:	86 e1       	ldi	r24, 0x16	; 22
     8d0:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     8d4:	c1 fb       	bst	r28, 1
     8d6:	66 27       	eor	r22, r22
     8d8:	60 f9       	bld	r22, 0
     8da:	85 e1       	ldi	r24, 0x15	; 21
     8dc:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     8e0:	6c 2f       	mov	r22, r28
     8e2:	61 70       	andi	r22, 0x01	; 1
     8e4:	84 e1       	ldi	r24, 0x14	; 20
     8e6:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	83 e1       	ldi	r24, 0x13	; 19
     8ee:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     8f2:	8f e9       	ldi	r24, 0x9F	; 159
     8f4:	9f e0       	ldi	r25, 0x0F	; 15
     8f6:	01 97       	sbiw	r24, 0x01	; 1
     8f8:	f1 f7       	brne	.-4      	; 0x8f6 <__stack+0x97>
     8fa:	00 c0       	rjmp	.+0      	; 0x8fc <__stack+0x9d>
     8fc:	00 00       	nop
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	83 e1       	ldi	r24, 0x13	; 19
     902:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
     906:	8f e9       	ldi	r24, 0x9F	; 159
     908:	9f e0       	ldi	r25, 0x0F	; 15
     90a:	01 97       	sbiw	r24, 0x01	; 1
     90c:	f1 f7       	brne	.-4      	; 0x90a <__stack+0xab>
     90e:	00 c0       	rjmp	.+0      	; 0x910 <__stack+0xb1>
     910:	00 00       	nop
     912:	cf 91       	pop	r28
     914:	08 95       	ret

00000916 <LCD_Init>:
     916:	2f ef       	ldi	r18, 0xFF	; 255
     918:	80 e7       	ldi	r24, 0x70	; 112
     91a:	92 e0       	ldi	r25, 0x02	; 2
     91c:	21 50       	subi	r18, 0x01	; 1
     91e:	80 40       	sbci	r24, 0x00	; 0
     920:	90 40       	sbci	r25, 0x00	; 0
     922:	e1 f7       	brne	.-8      	; 0x91c <LCD_Init+0x6>
     924:	00 c0       	rjmp	.+0      	; 0x926 <LCD_Init+0x10>
     926:	00 00       	nop
     928:	82 e0       	ldi	r24, 0x02	; 2
     92a:	0e 94 cb 03 	call	0x796	; 0x796 <WriteIns>
     92e:	88 e2       	ldi	r24, 0x28	; 40
     930:	0e 94 cb 03 	call	0x796	; 0x796 <WriteIns>
     934:	8c e0       	ldi	r24, 0x0C	; 12
     936:	0e 94 cb 03 	call	0x796	; 0x796 <WriteIns>
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	0e 94 cb 03 	call	0x796	; 0x796 <WriteIns>
     940:	8f e9       	ldi	r24, 0x9F	; 159
     942:	9f e0       	ldi	r25, 0x0F	; 15
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	f1 f7       	brne	.-4      	; 0x944 <LCD_Init+0x2e>
     948:	00 c0       	rjmp	.+0      	; 0x94a <LCD_Init+0x34>
     94a:	00 00       	nop
     94c:	86 e0       	ldi	r24, 0x06	; 6
     94e:	0e 94 cb 03 	call	0x796	; 0x796 <WriteIns>
     952:	08 95       	ret

00000954 <LCD_WriteChar>:
     954:	0e 94 2b 04 	call	0x856	; 0x856 <WriteData>
     958:	08 95       	ret

0000095a <LCD_WriteString>:
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
     960:	8c 01       	movw	r16, r24
     962:	c0 e0       	ldi	r28, 0x00	; 0
     964:	03 c0       	rjmp	.+6      	; 0x96c <LCD_WriteString+0x12>
     966:	0e 94 aa 04 	call	0x954	; 0x954 <LCD_WriteChar>
     96a:	cf 5f       	subi	r28, 0xFF	; 255
     96c:	f8 01       	movw	r30, r16
     96e:	ec 0f       	add	r30, r28
     970:	f1 1d       	adc	r31, r1
     972:	80 81       	ld	r24, Z
     974:	81 11       	cpse	r24, r1
     976:	f7 cf       	rjmp	.-18     	; 0x966 <LCD_WriteString+0xc>
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	08 95       	ret

00000980 <LCD_SetCursor>:
     980:	81 11       	cpse	r24, r1
     982:	05 c0       	rjmp	.+10     	; 0x98e <LCD_SetCursor+0xe>
     984:	86 2f       	mov	r24, r22
     986:	80 68       	ori	r24, 0x80	; 128
     988:	0e 94 cb 03 	call	0x796	; 0x796 <WriteIns>
     98c:	08 95       	ret
     98e:	81 30       	cpi	r24, 0x01	; 1
     990:	21 f4       	brne	.+8      	; 0x99a <LCD_SetCursor+0x1a>
     992:	80 ec       	ldi	r24, 0xC0	; 192
     994:	86 0f       	add	r24, r22
     996:	0e 94 cb 03 	call	0x796	; 0x796 <WriteIns>
     99a:	08 95       	ret

0000099c <LCD_Clear>:
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	0e 94 cb 03 	call	0x796	; 0x796 <WriteIns>
     9a2:	8f e9       	ldi	r24, 0x9F	; 159
     9a4:	9f e0       	ldi	r25, 0x0F	; 15
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	f1 f7       	brne	.-4      	; 0x9a6 <LCD_Clear+0xa>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <LCD_Clear+0x10>
     9ac:	00 00       	nop
     9ae:	08 95       	ret

000009b0 <LCD_WriteNumber>:
     9b0:	cf 92       	push	r12
     9b2:	df 92       	push	r13
     9b4:	ef 92       	push	r14
     9b6:	ff 92       	push	r15
     9b8:	1f 93       	push	r17
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
     9c2:	2a 97       	sbiw	r28, 0x0a	; 10
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	f8 94       	cli
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	cd bf       	out	0x3d, r28	; 61
     9ce:	6b 01       	movw	r12, r22
     9d0:	7c 01       	movw	r14, r24
     9d2:	61 15       	cp	r22, r1
     9d4:	71 05       	cpc	r23, r1
     9d6:	81 05       	cpc	r24, r1
     9d8:	91 05       	cpc	r25, r1
     9da:	21 f4       	brne	.+8      	; 0x9e4 <LCD_WriteNumber+0x34>
     9dc:	80 e3       	ldi	r24, 0x30	; 48
     9de:	0e 94 aa 04 	call	0x954	; 0x954 <LCD_WriteChar>
     9e2:	39 c0       	rjmp	.+114    	; 0xa56 <LCD_WriteNumber+0xa6>
     9e4:	99 23       	and	r25, r25
     9e6:	5c f4       	brge	.+22     	; 0x9fe <LCD_WriteNumber+0x4e>
     9e8:	f0 94       	com	r15
     9ea:	e0 94       	com	r14
     9ec:	d0 94       	com	r13
     9ee:	c0 94       	com	r12
     9f0:	c1 1c       	adc	r12, r1
     9f2:	d1 1c       	adc	r13, r1
     9f4:	e1 1c       	adc	r14, r1
     9f6:	f1 1c       	adc	r15, r1
     9f8:	8d e2       	ldi	r24, 0x2D	; 45
     9fa:	0e 94 aa 04 	call	0x954	; 0x954 <LCD_WriteChar>
     9fe:	10 e0       	ldi	r17, 0x00	; 0
     a00:	15 c0       	rjmp	.+42     	; 0xa2c <LCD_WriteNumber+0x7c>
     a02:	c7 01       	movw	r24, r14
     a04:	b6 01       	movw	r22, r12
     a06:	2a e0       	ldi	r18, 0x0A	; 10
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divmodsi4>
     a12:	e1 e0       	ldi	r30, 0x01	; 1
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	ec 0f       	add	r30, r28
     a18:	fd 1f       	adc	r31, r29
     a1a:	e1 0f       	add	r30, r17
     a1c:	f1 1d       	adc	r31, r1
     a1e:	60 5d       	subi	r22, 0xD0	; 208
     a20:	60 83       	st	Z, r22
     a22:	1f 5f       	subi	r17, 0xFF	; 255
     a24:	c2 2e       	mov	r12, r18
     a26:	d3 2e       	mov	r13, r19
     a28:	e4 2e       	mov	r14, r20
     a2a:	f5 2e       	mov	r15, r21
     a2c:	c1 14       	cp	r12, r1
     a2e:	d1 04       	cpc	r13, r1
     a30:	e1 04       	cpc	r14, r1
     a32:	f1 04       	cpc	r15, r1
     a34:	31 f7       	brne	.-52     	; 0xa02 <LCD_WriteNumber+0x52>
     a36:	0d c0       	rjmp	.+26     	; 0xa52 <LCD_WriteNumber+0xa2>
     a38:	e1 2f       	mov	r30, r17
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	31 97       	sbiw	r30, 0x01	; 1
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	8c 0f       	add	r24, r28
     a44:	9d 1f       	adc	r25, r29
     a46:	e8 0f       	add	r30, r24
     a48:	f9 1f       	adc	r31, r25
     a4a:	80 81       	ld	r24, Z
     a4c:	0e 94 aa 04 	call	0x954	; 0x954 <LCD_WriteChar>
     a50:	11 50       	subi	r17, 0x01	; 1
     a52:	11 11       	cpse	r17, r1
     a54:	f1 cf       	rjmp	.-30     	; 0xa38 <LCD_WriteNumber+0x88>
     a56:	2a 96       	adiw	r28, 0x0a	; 10
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	08 95       	ret

00000a72 <LCD_PinsInit>:
   void LCD_PinsInit ()
   {
	   DIO_initpin(RS,OUTPUT);
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	81 e1       	ldi	r24, 0x11	; 17
     a76:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_initpin>
	   DIO_initpin(EN,OUTPUT);
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	83 e1       	ldi	r24, 0x13	; 19
     a7e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_initpin>
	   DIO_initpin(RW,OUTPUT);
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	82 e1       	ldi	r24, 0x12	; 18
     a86:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_initpin>
	   DIO_initpin(D4,OUTPUT);
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	84 e1       	ldi	r24, 0x14	; 20
     a8e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_initpin>
	   DIO_initpin(D5,OUTPUT);
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	85 e1       	ldi	r24, 0x15	; 21
     a96:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_initpin>
	   DIO_initpin(D6,OUTPUT);
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	86 e1       	ldi	r24, 0x16	; 22
     a9e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_initpin>
	   DIO_initpin(D7,OUTPUT);
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	87 e1       	ldi	r24, 0x17	; 23
     aa6:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_initpin>
     aaa:	08 95       	ret

00000aac <Car_Motors_init>:
/**DESCRIPTION:-
  this function initializes the DIO pins connected to the motors to be output
  **/
en_MotorError_t Car_Motors_init (void)
{
	DIO_initpin(motor1_0,OUTPUT);
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_initpin>
	DIO_initpin(motor1_1,OUTPUT);
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_initpin>
	DIO_initpin(motor2_0,OUTPUT);
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	82 e0       	ldi	r24, 0x02	; 2
     ac0:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_initpin>
	DIO_initpin(motor2_1,OUTPUT);
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	83 e0       	ldi	r24, 0x03	; 3
     ac8:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_initpin>

	return motor_ok;
}
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	08 95       	ret

00000ad0 <Car_Moving_FWD>:
/**DESCRIPTION:-
this function is used to drive the motor to move in the +VE direction which will lead the car to move FWD
**/
en_MotorError_t Car_Moving_FWD(void)
{
	DIO_writepin(motor1_0,LOW);          //this is used to provide voltage to the +ve pin of the motor 
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	DIO_writepin(motor1_1,HIGH);           //this is used to provide the ground to the -ve pin of 
     ad8:	61 e0       	ldi	r22, 0x01	; 1
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	DIO_writepin(motor2_0,LOW);
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	82 e0       	ldi	r24, 0x02	; 2
     ae4:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	DIO_writepin(motor2_1,HIGH);
     ae8:	61 e0       	ldi	r22, 0x01	; 1
     aea:	83 e0       	ldi	r24, 0x03	; 3
     aec:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	
	return motor_ok;

}
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	08 95       	ret

00000af4 <Car_Moving_BWD>:
/**DESCRIPTION:-
this function is used to drive the motor to move in the -VE direction which will lead the car to move BWD
**/
en_MotorError_t Car_Moving_BWD(void)
{
	DIO_writepin(motor1_0,HIGH);          //this is used to provide voltage to the -ve pin of the motor
     af4:	61 e0       	ldi	r22, 0x01	; 1
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	DIO_writepin(motor1_1,LOW);           //this is used to provide the ground to the +ve pin of
     afc:	60 e0       	ldi	r22, 0x00	; 0
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	DIO_writepin(motor2_0,HIGH);
     b04:	61 e0       	ldi	r22, 0x01	; 1
     b06:	82 e0       	ldi	r24, 0x02	; 2
     b08:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	DIO_writepin(motor2_1,LOW);
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	83 e0       	ldi	r24, 0x03	; 3
     b10:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	
	return motor_ok;
}
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	08 95       	ret

00000b18 <Car_Stop>:
this function is used to stop the 4 wheels by stopping the 4 motors*/
en_MotorError_t Car_Stop(void)
{
	
	
  DIO_writepin(motor1_0,LOW);          
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
  DIO_writepin(motor1_1,LOW);           
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
  DIO_writepin(motor2_0,LOW);
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
  DIO_writepin(motor2_1,LOW);
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	83 e0       	ldi	r24, 0x03	; 3
     b34:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>

	return motor_ok;
}
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	08 95       	ret

00000b3c <Car_Rotate_Right>:
this function is used to drive the right wheels to move BWD, and the left wheels to move FWD,
which will lead to rotation of the car */
en_MotorError_t Car_Rotate_Right(void)
{
	//this is used to provide the ground to the -ve pin of
	DIO_writepin(motor1_0,HIGH);
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	DIO_writepin(motor1_1,LOW);
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	
	//this is used to provide voltage to the +ve pin of the motor
	DIO_writepin(motor2_0,LOW);
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	DIO_writepin(motor2_1,HIGH);
     b54:	61 e0       	ldi	r22, 0x01	; 1
     b56:	83 e0       	ldi	r24, 0x03	; 3
     b58:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>

	return motor_ok;
}
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	08 95       	ret

00000b60 <Car_Rotate_Left>:
this function is used to drive the right wheels to move FWD, and the left wheels to move BWD,
which will lead to rotation of the car */
en_MotorError_t Car_Rotate_Left(void)
{
	//this is used to provide the ground to the +ve pin of
	DIO_writepin(motor1_0,LOW);
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	DIO_writepin(motor1_1,HIGH);
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	
	//this is used to provide voltage to the -ve pin of the motor
	DIO_writepin(motor2_0,HIGH);
     b70:	61 e0       	ldi	r22, 0x01	; 1
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	DIO_writepin(motor2_1,LOW);
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	83 e0       	ldi	r24, 0x03	; 3
     b7c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>

	return motor_ok;
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	08 95       	ret

00000b84 <US_trigger>:
	ICU_init();
}

static void US_trigger()
{
	DIO_writepin(ICU_TRIGGER_CH ,HIGH);
     b84:	61 e0       	ldi	r22, 0x01	; 1
     b86:	8b e0       	ldi	r24, 0x0B	; 11
     b88:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b8c:	8a e1       	ldi	r24, 0x1A	; 26
     b8e:	8a 95       	dec	r24
     b90:	f1 f7       	brne	.-4      	; 0xb8e <US_trigger+0xa>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <US_trigger+0x10>
	_delay_us(10);
	DIO_writepin(ICU_TRIGGER_CH ,LOW);
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	8b e0       	ldi	r24, 0x0B	; 11
     b98:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
	timer1_setTimerValue(0);
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	0e 94 65 0b 	call	0x16ca	; 0x16ca <timer1_setTimerValue>
     ba2:	08 95       	ret

00000ba4 <US_init>:
volatile u8 flag=0;
volatile u16 t1,t2,t3;

void US_init()
{
	ICU_init();
     ba4:	0e 94 21 08 	call	0x1042	; 0x1042 <ICU_init>
     ba8:	08 95       	ret

00000baa <US_getdistance>:
	timer1_setTimerValue(0);
}


u8 US_getdistance(u16 *pu16_distance)
{
     baa:	0f 93       	push	r16
     bac:	1f 93       	push	r17
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	00 d0       	rcall	.+0      	; 0xbb4 <US_getdistance+0xa>
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	8c 01       	movw	r16, r24
	u16 icu_time;
	US_trigger();
     bba:	0e 94 c2 05 	call	0xb84	; 0xb84 <US_trigger>
	ICU_Read(&icu_time);
     bbe:	ce 01       	movw	r24, r28
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	0e 94 32 08 	call	0x1064	; 0x1064 <ICU_Read>
	*pu16_distance =(icu_time/58);   
     bc6:	29 81       	ldd	r18, Y+1	; 0x01
     bc8:	3a 81       	ldd	r19, Y+2	; 0x02
     bca:	af e9       	ldi	r26, 0x9F	; 159
     bcc:	b6 e4       	ldi	r27, 0x46	; 70
     bce:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__umulhisi3>
     bd2:	92 95       	swap	r25
     bd4:	82 95       	swap	r24
     bd6:	8f 70       	andi	r24, 0x0F	; 15
     bd8:	89 27       	eor	r24, r25
     bda:	9f 70       	andi	r25, 0x0F	; 15
     bdc:	89 27       	eor	r24, r25
     bde:	f8 01       	movw	r30, r16
     be0:	91 83       	std	Z+1, r25	; 0x01
     be2:	80 83       	st	Z, r24
}
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	08 95       	ret

00000bf2 <main>:
#include "APP/app.h"

int main(void)
{   
	
	 app_init();
     bf2:	0e 94 47 02 	call	0x48e	; 0x48e <app_init>

    while (1) 
    {
		app_start();
     bf6:	0e 94 63 02 	call	0x4c6	; 0x4c6 <app_start>
     bfa:	fd cf       	rjmp	.-6      	; 0xbf6 <main+0x4>

00000bfc <DIO_initpin>:
		  DIO_initpin(i,PinsStatusArray[i]);
	  }
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
     bfc:	98 2f       	mov	r25, r24
     bfe:	96 95       	lsr	r25
     c00:	96 95       	lsr	r25
     c02:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     c04:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error = DIO_OK;
	  
	  if (pin_num < 8)
	  {

		  switch(status)
     c06:	61 30       	cpi	r22, 0x01	; 1
     c08:	09 f4       	brne	.+2      	; 0xc0c <DIO_initpin+0x10>
     c0a:	59 c0       	rjmp	.+178    	; 0xcbe <DIO_initpin+0xc2>
     c0c:	20 f0       	brcs	.+8      	; 0xc16 <DIO_initpin+0x1a>
     c0e:	62 30       	cpi	r22, 0x02	; 2
     c10:	09 f4       	brne	.+2      	; 0xc14 <DIO_initpin+0x18>
     c12:	a9 c0       	rjmp	.+338    	; 0xd66 <DIO_initpin+0x16a>
     c14:	fc c0       	rjmp	.+504    	; 0xe0e <DIO_initpin+0x212>
		  {
			  case OUTPUT:
			  switch(port)
     c16:	91 30       	cpi	r25, 0x01	; 1
     c18:	c9 f0       	breq	.+50     	; 0xc4c <DIO_initpin+0x50>
     c1a:	28 f0       	brcs	.+10     	; 0xc26 <DIO_initpin+0x2a>
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	49 f1       	breq	.+82     	; 0xc72 <DIO_initpin+0x76>
     c20:	93 30       	cpi	r25, 0x03	; 3
     c22:	d1 f1       	breq	.+116    	; 0xc98 <DIO_initpin+0x9c>
     c24:	f6 c0       	rjmp	.+492    	; 0xe12 <DIO_initpin+0x216>
			  {
				  case PA:
				  SET_BIT( DDRA,pin_num);
     c26:	4a b3       	in	r20, 0x1a	; 26
     c28:	21 e0       	ldi	r18, 0x01	; 1
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	b9 01       	movw	r22, r18
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <DIO_initpin+0x38>
     c30:	66 0f       	add	r22, r22
     c32:	77 1f       	adc	r23, r23
     c34:	8a 95       	dec	r24
     c36:	e2 f7       	brpl	.-8      	; 0xc30 <DIO_initpin+0x34>
     c38:	cb 01       	movw	r24, r22
     c3a:	94 2f       	mov	r25, r20
     c3c:	98 2b       	or	r25, r24
     c3e:	9a bb       	out	0x1a, r25	; 26
				  CLR_BIT(PORTA,pin_num);
     c40:	9b b3       	in	r25, 0x1b	; 27
     c42:	80 95       	com	r24
     c44:	89 23       	and	r24, r25
     c46:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     c48:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  SET_BIT( DDRA,pin_num);
				  CLR_BIT(PORTA,pin_num);
				  break;
     c4a:	08 95       	ret
				  case PB:
				  SET_BIT( DDRB,pin_num);
     c4c:	47 b3       	in	r20, 0x17	; 23
     c4e:	21 e0       	ldi	r18, 0x01	; 1
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	b9 01       	movw	r22, r18
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <DIO_initpin+0x5e>
     c56:	66 0f       	add	r22, r22
     c58:	77 1f       	adc	r23, r23
     c5a:	8a 95       	dec	r24
     c5c:	e2 f7       	brpl	.-8      	; 0xc56 <DIO_initpin+0x5a>
     c5e:	cb 01       	movw	r24, r22
     c60:	94 2f       	mov	r25, r20
     c62:	98 2b       	or	r25, r24
     c64:	97 bb       	out	0x17, r25	; 23
				  CLR_BIT(PORTB,pin_num);
     c66:	98 b3       	in	r25, 0x18	; 24
     c68:	80 95       	com	r24
     c6a:	89 23       	and	r24, r25
     c6c:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     c6e:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  SET_BIT( DDRB,pin_num);
				  CLR_BIT(PORTB,pin_num);
				  break;
     c70:	08 95       	ret
				  case PC:
				  SET_BIT( DDRC,pin_num);
     c72:	44 b3       	in	r20, 0x14	; 20
     c74:	21 e0       	ldi	r18, 0x01	; 1
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	b9 01       	movw	r22, r18
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <DIO_initpin+0x84>
     c7c:	66 0f       	add	r22, r22
     c7e:	77 1f       	adc	r23, r23
     c80:	8a 95       	dec	r24
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <DIO_initpin+0x80>
     c84:	cb 01       	movw	r24, r22
     c86:	94 2f       	mov	r25, r20
     c88:	98 2b       	or	r25, r24
     c8a:	94 bb       	out	0x14, r25	; 20
				  CLR_BIT(PORTC,pin_num);
     c8c:	95 b3       	in	r25, 0x15	; 21
     c8e:	80 95       	com	r24
     c90:	89 23       	and	r24, r25
     c92:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     c94:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  SET_BIT( DDRC,pin_num);
				  CLR_BIT(PORTC,pin_num);
				  break;
     c96:	08 95       	ret
				  case PD:
				  SET_BIT( DDRD,pin_num);
     c98:	41 b3       	in	r20, 0x11	; 17
     c9a:	21 e0       	ldi	r18, 0x01	; 1
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	b9 01       	movw	r22, r18
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <DIO_initpin+0xaa>
     ca2:	66 0f       	add	r22, r22
     ca4:	77 1f       	adc	r23, r23
     ca6:	8a 95       	dec	r24
     ca8:	e2 f7       	brpl	.-8      	; 0xca2 <DIO_initpin+0xa6>
     caa:	cb 01       	movw	r24, r22
     cac:	94 2f       	mov	r25, r20
     cae:	98 2b       	or	r25, r24
     cb0:	91 bb       	out	0x11, r25	; 17
				  CLR_BIT(PORTD,pin_num);
     cb2:	92 b3       	in	r25, 0x12	; 18
     cb4:	80 95       	com	r24
     cb6:	89 23       	and	r24, r25
     cb8:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     cba:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  SET_BIT( DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
     cbc:	08 95       	ret
				  error = WRONG_PORT_NUMBER;
				  break;
			  }
			  break;
			  case INFREE:
			  switch(port)
     cbe:	91 30       	cpi	r25, 0x01	; 1
     cc0:	c9 f0       	breq	.+50     	; 0xcf4 <DIO_initpin+0xf8>
     cc2:	28 f0       	brcs	.+10     	; 0xcce <DIO_initpin+0xd2>
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	49 f1       	breq	.+82     	; 0xd1a <DIO_initpin+0x11e>
     cc8:	93 30       	cpi	r25, 0x03	; 3
     cca:	d1 f1       	breq	.+116    	; 0xd40 <DIO_initpin+0x144>
     ccc:	a4 c0       	rjmp	.+328    	; 0xe16 <DIO_initpin+0x21a>
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
     cce:	4a b3       	in	r20, 0x1a	; 26
     cd0:	21 e0       	ldi	r18, 0x01	; 1
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	b9 01       	movw	r22, r18
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <DIO_initpin+0xe0>
     cd8:	66 0f       	add	r22, r22
     cda:	77 1f       	adc	r23, r23
     cdc:	8a 95       	dec	r24
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <DIO_initpin+0xdc>
     ce0:	cb 01       	movw	r24, r22
     ce2:	80 95       	com	r24
     ce4:	94 2f       	mov	r25, r20
     ce6:	98 23       	and	r25, r24
     ce8:	9a bb       	out	0x1a, r25	; 26
				  CLR_BIT(PORTA,pin_num);
     cea:	9b b3       	in	r25, 0x1b	; 27
     cec:	89 23       	and	r24, r25
     cee:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     cf0:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
				  CLR_BIT(PORTA,pin_num);
				  break;
     cf2:	08 95       	ret
				  case PB:
				  CLR_BIT(DDRB,pin_num);
     cf4:	47 b3       	in	r20, 0x17	; 23
     cf6:	21 e0       	ldi	r18, 0x01	; 1
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	b9 01       	movw	r22, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <DIO_initpin+0x106>
     cfe:	66 0f       	add	r22, r22
     d00:	77 1f       	adc	r23, r23
     d02:	8a 95       	dec	r24
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <DIO_initpin+0x102>
     d06:	cb 01       	movw	r24, r22
     d08:	80 95       	com	r24
     d0a:	94 2f       	mov	r25, r20
     d0c:	98 23       	and	r25, r24
     d0e:	97 bb       	out	0x17, r25	; 23
				  CLR_BIT(PORTB,pin_num);
     d10:	98 b3       	in	r25, 0x18	; 24
     d12:	89 23       	and	r24, r25
     d14:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     d16:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  CLR_BIT(DDRB,pin_num);
				  CLR_BIT(PORTB,pin_num);
				  break;
     d18:	08 95       	ret
				  case PC:
				  CLR_BIT(DDRC,pin_num);
     d1a:	44 b3       	in	r20, 0x14	; 20
     d1c:	21 e0       	ldi	r18, 0x01	; 1
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	b9 01       	movw	r22, r18
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <DIO_initpin+0x12c>
     d24:	66 0f       	add	r22, r22
     d26:	77 1f       	adc	r23, r23
     d28:	8a 95       	dec	r24
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <DIO_initpin+0x128>
     d2c:	cb 01       	movw	r24, r22
     d2e:	80 95       	com	r24
     d30:	94 2f       	mov	r25, r20
     d32:	98 23       	and	r25, r24
     d34:	94 bb       	out	0x14, r25	; 20
				  CLR_BIT(PORTC,pin_num);
     d36:	95 b3       	in	r25, 0x15	; 21
     d38:	89 23       	and	r24, r25
     d3a:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     d3c:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  CLR_BIT(DDRC,pin_num);
				  CLR_BIT(PORTC,pin_num);
				  break;
     d3e:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
     d40:	41 b3       	in	r20, 0x11	; 17
     d42:	21 e0       	ldi	r18, 0x01	; 1
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	b9 01       	movw	r22, r18
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <DIO_initpin+0x152>
     d4a:	66 0f       	add	r22, r22
     d4c:	77 1f       	adc	r23, r23
     d4e:	8a 95       	dec	r24
     d50:	e2 f7       	brpl	.-8      	; 0xd4a <DIO_initpin+0x14e>
     d52:	cb 01       	movw	r24, r22
     d54:	80 95       	com	r24
     d56:	94 2f       	mov	r25, r20
     d58:	98 23       	and	r25, r24
     d5a:	91 bb       	out	0x11, r25	; 17
				  CLR_BIT(PORTD,pin_num);
     d5c:	92 b3       	in	r25, 0x12	; 18
     d5e:	89 23       	and	r24, r25
     d60:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     d62:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
     d64:	08 95       	ret
				  break;
			  }
			  break;

			  case INPULL:
			  switch(port)
     d66:	91 30       	cpi	r25, 0x01	; 1
     d68:	c9 f0       	breq	.+50     	; 0xd9c <DIO_initpin+0x1a0>
     d6a:	28 f0       	brcs	.+10     	; 0xd76 <DIO_initpin+0x17a>
     d6c:	92 30       	cpi	r25, 0x02	; 2
     d6e:	49 f1       	breq	.+82     	; 0xdc2 <DIO_initpin+0x1c6>
     d70:	93 30       	cpi	r25, 0x03	; 3
     d72:	d1 f1       	breq	.+116    	; 0xde8 <DIO_initpin+0x1ec>
     d74:	52 c0       	rjmp	.+164    	; 0xe1a <DIO_initpin+0x21e>
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
     d76:	4a b3       	in	r20, 0x1a	; 26
     d78:	21 e0       	ldi	r18, 0x01	; 1
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	b9 01       	movw	r22, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <DIO_initpin+0x188>
     d80:	66 0f       	add	r22, r22
     d82:	77 1f       	adc	r23, r23
     d84:	8a 95       	dec	r24
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <DIO_initpin+0x184>
     d88:	cb 01       	movw	r24, r22
     d8a:	96 2f       	mov	r25, r22
     d8c:	90 95       	com	r25
     d8e:	94 23       	and	r25, r20
     d90:	9a bb       	out	0x1a, r25	; 26
				  SET_BIT(PORTA,pin_num);
     d92:	9b b3       	in	r25, 0x1b	; 27
     d94:	89 2b       	or	r24, r25
     d96:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     d98:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
				  SET_BIT(PORTA,pin_num);
				  break;
     d9a:	08 95       	ret
				  case PB:
				  CLR_BIT(DDRB,pin_num);
     d9c:	47 b3       	in	r20, 0x17	; 23
     d9e:	21 e0       	ldi	r18, 0x01	; 1
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	b9 01       	movw	r22, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <DIO_initpin+0x1ae>
     da6:	66 0f       	add	r22, r22
     da8:	77 1f       	adc	r23, r23
     daa:	8a 95       	dec	r24
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <DIO_initpin+0x1aa>
     dae:	cb 01       	movw	r24, r22
     db0:	96 2f       	mov	r25, r22
     db2:	90 95       	com	r25
     db4:	94 23       	and	r25, r20
     db6:	97 bb       	out	0x17, r25	; 23
				  SET_BIT(PORTB,pin_num);
     db8:	98 b3       	in	r25, 0x18	; 24
     dba:	89 2b       	or	r24, r25
     dbc:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     dbe:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  CLR_BIT(DDRB,pin_num);
				  SET_BIT(PORTB,pin_num);
				  break;
     dc0:	08 95       	ret
				  case PC:
				  CLR_BIT(DDRC,pin_num);
     dc2:	44 b3       	in	r20, 0x14	; 20
     dc4:	21 e0       	ldi	r18, 0x01	; 1
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	b9 01       	movw	r22, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <DIO_initpin+0x1d4>
     dcc:	66 0f       	add	r22, r22
     dce:	77 1f       	adc	r23, r23
     dd0:	8a 95       	dec	r24
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <DIO_initpin+0x1d0>
     dd4:	cb 01       	movw	r24, r22
     dd6:	96 2f       	mov	r25, r22
     dd8:	90 95       	com	r25
     dda:	94 23       	and	r25, r20
     ddc:	94 bb       	out	0x14, r25	; 20
				  SET_BIT(PORTC,pin_num);
     dde:	95 b3       	in	r25, 0x15	; 21
     de0:	89 2b       	or	r24, r25
     de2:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     de4:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  CLR_BIT(DDRC,pin_num);
				  SET_BIT(PORTC,pin_num);
				  break;
     de6:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
     de8:	41 b3       	in	r20, 0x11	; 17
     dea:	21 e0       	ldi	r18, 0x01	; 1
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	b9 01       	movw	r22, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_initpin+0x1fa>
     df2:	66 0f       	add	r22, r22
     df4:	77 1f       	adc	r23, r23
     df6:	8a 95       	dec	r24
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_initpin+0x1f6>
     dfa:	cb 01       	movw	r24, r22
     dfc:	96 2f       	mov	r25, r22
     dfe:	90 95       	com	r25
     e00:	94 23       	and	r25, r20
     e02:	91 bb       	out	0x11, r25	; 17
				  SET_BIT(PORTD,pin_num);
     e04:	92 b3       	in	r25, 0x12	; 18
     e06:	89 2b       	or	r24, r25
     e08:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     e0a:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  SET_BIT(PORTD,pin_num);
				  break;
     e0c:	08 95       	ret
				  error = WRONG_PORT_NUMBER;
				  break;
			  }
			  break;
			  default:
			  error = WRONG_PORT_NUMBER;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	08 95       	ret
				  case PD:
				  SET_BIT( DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  SET_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
     e1c:	08 95       	ret

00000e1e <DIO_Init_All>:
	    return error;
    }
//////////////////////////////////////////////////////////////////////*/
//pin MODE
  void DIO_Init_All(void)
  {
     e1e:	cf 93       	push	r28
	  DIO_Pin_type i;
	  for (i=PINA0; i<TOTAL_PINS; i++)
     e20:	c0 e0       	ldi	r28, 0x00	; 0
     e22:	09 c0       	rjmp	.+18     	; 0xe36 <DIO_Init_All+0x18>
	  {
		  DIO_initpin(i,PinsStatusArray[i]);
     e24:	ec 2f       	mov	r30, r28
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	e0 50       	subi	r30, 0x00	; 0
     e2a:	ff 4f       	sbci	r31, 0xFF	; 255
     e2c:	60 81       	ld	r22, Z
     e2e:	8c 2f       	mov	r24, r28
     e30:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_initpin>
//////////////////////////////////////////////////////////////////////*/
//pin MODE
  void DIO_Init_All(void)
  {
	  DIO_Pin_type i;
	  for (i=PINA0; i<TOTAL_PINS; i++)
     e34:	cf 5f       	subi	r28, 0xFF	; 255
     e36:	c0 32       	cpi	r28, 0x20	; 32
     e38:	a8 f3       	brcs	.-22     	; 0xe24 <DIO_Init_All+0x6>
	  {
		  DIO_initpin(i,PinsStatusArray[i]);
	  }
  }
     e3a:	cf 91       	pop	r28
     e3c:	08 95       	ret

00000e3e <DIO_writepin>:
	  return error;

  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
     e3e:	98 2f       	mov	r25, r24
     e40:	96 95       	lsr	r25
     e42:	96 95       	lsr	r25
     e44:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     e46:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error= DIO_OK;
	  if (pin_num<8)
	  {
		  switch (volt)
     e48:	66 23       	and	r22, r22
     e4a:	09 f4       	brne	.+2      	; 0xe4e <DIO_writepin+0x10>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <DIO_writepin+0x96>
     e4e:	61 30       	cpi	r22, 0x01	; 1
     e50:	09 f0       	breq	.+2      	; 0xe54 <DIO_writepin+0x16>
     e52:	84 c0       	rjmp	.+264    	; 0xf5c <DIO_writepin+0x11e>
		  {
			  case HIGH:

			  switch(port)
     e54:	91 30       	cpi	r25, 0x01	; 1
     e56:	a1 f0       	breq	.+40     	; 0xe80 <DIO_writepin+0x42>
     e58:	28 f0       	brcs	.+10     	; 0xe64 <DIO_writepin+0x26>
     e5a:	92 30       	cpi	r25, 0x02	; 2
     e5c:	f9 f0       	breq	.+62     	; 0xe9c <DIO_writepin+0x5e>
     e5e:	93 30       	cpi	r25, 0x03	; 3
     e60:	59 f1       	breq	.+86     	; 0xeb8 <DIO_writepin+0x7a>
     e62:	7e c0       	rjmp	.+252    	; 0xf60 <DIO_writepin+0x122>
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
     e64:	4b b3       	in	r20, 0x1b	; 27
     e66:	21 e0       	ldi	r18, 0x01	; 1
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	b9 01       	movw	r22, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_writepin+0x34>
     e6e:	66 0f       	add	r22, r22
     e70:	77 1f       	adc	r23, r23
     e72:	8a 95       	dec	r24
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_writepin+0x30>
     e76:	cb 01       	movw	r24, r22
     e78:	84 2b       	or	r24, r20
     e7a:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     e7c:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
				  break;
     e7e:	08 95       	ret
				  case PB:

				  SET_BIT(PORTB,pin_num);
     e80:	48 b3       	in	r20, 0x18	; 24
     e82:	21 e0       	ldi	r18, 0x01	; 1
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	b9 01       	movw	r22, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <DIO_writepin+0x50>
     e8a:	66 0f       	add	r22, r22
     e8c:	77 1f       	adc	r23, r23
     e8e:	8a 95       	dec	r24
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <DIO_writepin+0x4c>
     e92:	cb 01       	movw	r24, r22
     e94:	84 2b       	or	r24, r20
     e96:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     e98:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  SET_BIT(PORTB,pin_num);
				  break;
     e9a:	08 95       	ret
				  case PC:

				  SET_BIT(PORTC,pin_num);
     e9c:	45 b3       	in	r20, 0x15	; 21
     e9e:	21 e0       	ldi	r18, 0x01	; 1
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	b9 01       	movw	r22, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_writepin+0x6c>
     ea6:	66 0f       	add	r22, r22
     ea8:	77 1f       	adc	r23, r23
     eaa:	8a 95       	dec	r24
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_writepin+0x68>
     eae:	cb 01       	movw	r24, r22
     eb0:	84 2b       	or	r24, r20
     eb2:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     eb4:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  SET_BIT(PORTC,pin_num);
				  break;
     eb6:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
     eb8:	42 b3       	in	r20, 0x12	; 18
     eba:	21 e0       	ldi	r18, 0x01	; 1
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	b9 01       	movw	r22, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <DIO_writepin+0x88>
     ec2:	66 0f       	add	r22, r22
     ec4:	77 1f       	adc	r23, r23
     ec6:	8a 95       	dec	r24
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <DIO_writepin+0x84>
     eca:	cb 01       	movw	r24, r22
     ecc:	84 2b       	or	r24, r20
     ece:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     ed0:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
     ed2:	08 95       	ret
			  }
			  break;

			  case LOW:

			  switch(port)
     ed4:	91 30       	cpi	r25, 0x01	; 1
     ed6:	a9 f0       	breq	.+42     	; 0xf02 <DIO_writepin+0xc4>
     ed8:	28 f0       	brcs	.+10     	; 0xee4 <DIO_writepin+0xa6>
     eda:	92 30       	cpi	r25, 0x02	; 2
     edc:	09 f1       	breq	.+66     	; 0xf20 <DIO_writepin+0xe2>
     ede:	93 30       	cpi	r25, 0x03	; 3
     ee0:	71 f1       	breq	.+92     	; 0xf3e <DIO_writepin+0x100>
     ee2:	40 c0       	rjmp	.+128    	; 0xf64 <DIO_writepin+0x126>
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
     ee4:	4b b3       	in	r20, 0x1b	; 27
     ee6:	21 e0       	ldi	r18, 0x01	; 1
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	b9 01       	movw	r22, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <DIO_writepin+0xb4>
     eee:	66 0f       	add	r22, r22
     ef0:	77 1f       	adc	r23, r23
     ef2:	8a 95       	dec	r24
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <DIO_writepin+0xb0>
     ef6:	cb 01       	movw	r24, r22
     ef8:	80 95       	com	r24
     efa:	84 23       	and	r24, r20
     efc:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     efe:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
				  break;
     f00:	08 95       	ret
				  case PB:

				  CLR_BIT(PORTB,pin_num);
     f02:	48 b3       	in	r20, 0x18	; 24
     f04:	21 e0       	ldi	r18, 0x01	; 1
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	b9 01       	movw	r22, r18
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <DIO_writepin+0xd2>
     f0c:	66 0f       	add	r22, r22
     f0e:	77 1f       	adc	r23, r23
     f10:	8a 95       	dec	r24
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <DIO_writepin+0xce>
     f14:	cb 01       	movw	r24, r22
     f16:	80 95       	com	r24
     f18:	84 23       	and	r24, r20
     f1a:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     f1c:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  CLR_BIT(PORTB,pin_num);
				  break;
     f1e:	08 95       	ret
				  case PC:

				  CLR_BIT(PORTC,pin_num);
     f20:	45 b3       	in	r20, 0x15	; 21
     f22:	21 e0       	ldi	r18, 0x01	; 1
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	b9 01       	movw	r22, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <DIO_writepin+0xf0>
     f2a:	66 0f       	add	r22, r22
     f2c:	77 1f       	adc	r23, r23
     f2e:	8a 95       	dec	r24
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <DIO_writepin+0xec>
     f32:	cb 01       	movw	r24, r22
     f34:	80 95       	com	r24
     f36:	84 23       	and	r24, r20
     f38:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     f3a:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  CLR_BIT(PORTC,pin_num);
				  break;
     f3c:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
     f3e:	42 b3       	in	r20, 0x12	; 18
     f40:	21 e0       	ldi	r18, 0x01	; 1
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	b9 01       	movw	r22, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <DIO_writepin+0x10e>
     f48:	66 0f       	add	r22, r22
     f4a:	77 1f       	adc	r23, r23
     f4c:	8a 95       	dec	r24
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <DIO_writepin+0x10a>
     f50:	cb 01       	movw	r24, r22
     f52:	80 95       	com	r24
     f54:	84 23       	and	r24, r20
     f56:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     f58:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
     f5a:	08 95       	ret
			  }

			  break;

			  default:
			  error = WRONG_VALUE;
     f5c:	83 e0       	ldi	r24, 0x03	; 3
     f5e:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     f64:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
     f66:	08 95       	ret

00000f68 <DIO_readpin>:
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
     f68:	98 2f       	mov	r25, r24
     f6a:	96 95       	lsr	r25
     f6c:	96 95       	lsr	r25
     f6e:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     f70:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error = DIO_OK;
	  if (pin_num < 8)
	  {

		  switch(port)
     f72:	91 30       	cpi	r25, 0x01	; 1
     f74:	a1 f0       	breq	.+40     	; 0xf9e <DIO_readpin+0x36>
     f76:	28 f0       	brcs	.+10     	; 0xf82 <DIO_readpin+0x1a>
     f78:	92 30       	cpi	r25, 0x02	; 2
     f7a:	f9 f0       	breq	.+62     	; 0xfba <DIO_readpin+0x52>
     f7c:	93 30       	cpi	r25, 0x03	; 3
     f7e:	59 f1       	breq	.+86     	; 0xfd6 <DIO_readpin+0x6e>
     f80:	38 c0       	rjmp	.+112    	; 0xff2 <DIO_readpin+0x8a>
		  {
			  case PA:

			  *volt=READ_BIT(PINA,pin_num);
     f82:	29 b3       	in	r18, 0x19	; 25
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	a9 01       	movw	r20, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DIO_readpin+0x26>
     f8a:	55 95       	asr	r21
     f8c:	47 95       	ror	r20
     f8e:	8a 95       	dec	r24
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DIO_readpin+0x22>
     f92:	ca 01       	movw	r24, r20
     f94:	81 70       	andi	r24, 0x01	; 1
     f96:	fb 01       	movw	r30, r22
     f98:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     f9a:	80 e0       	ldi	r24, 0x00	; 0
		  switch(port)
		  {
			  case PA:

			  *volt=READ_BIT(PINA,pin_num);
			  break;
     f9c:	08 95       	ret
			  case PB:

			  *volt=READ_BIT(PINB,pin_num);
     f9e:	26 b3       	in	r18, 0x16	; 22
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	a9 01       	movw	r20, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_readpin+0x42>
     fa6:	55 95       	asr	r21
     fa8:	47 95       	ror	r20
     faa:	8a 95       	dec	r24
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_readpin+0x3e>
     fae:	ca 01       	movw	r24, r20
     fb0:	81 70       	andi	r24, 0x01	; 1
     fb2:	fb 01       	movw	r30, r22
     fb4:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     fb6:	80 e0       	ldi	r24, 0x00	; 0
			  *volt=READ_BIT(PINA,pin_num);
			  break;
			  case PB:

			  *volt=READ_BIT(PINB,pin_num);
			  break;
     fb8:	08 95       	ret
			  case PC:

			  *volt=READ_BIT(PINC,pin_num);
     fba:	23 b3       	in	r18, 0x13	; 19
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	a9 01       	movw	r20, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_readpin+0x5e>
     fc2:	55 95       	asr	r21
     fc4:	47 95       	ror	r20
     fc6:	8a 95       	dec	r24
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_readpin+0x5a>
     fca:	ca 01       	movw	r24, r20
     fcc:	81 70       	andi	r24, 0x01	; 1
     fce:	fb 01       	movw	r30, r22
     fd0:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     fd2:	80 e0       	ldi	r24, 0x00	; 0
			  *volt=READ_BIT(PINB,pin_num);
			  break;
			  case PC:

			  *volt=READ_BIT(PINC,pin_num);
			  break;
     fd4:	08 95       	ret
			  case PD:

			  *volt=READ_BIT(PIND,pin_num);
     fd6:	20 b3       	in	r18, 0x10	; 16
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	a9 01       	movw	r20, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_readpin+0x7a>
     fde:	55 95       	asr	r21
     fe0:	47 95       	ror	r20
     fe2:	8a 95       	dec	r24
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_readpin+0x76>
     fe6:	ca 01       	movw	r24, r20
     fe8:	81 70       	andi	r24, 0x01	; 1
     fea:	fb 01       	movw	r30, r22
     fec:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     fee:	80 e0       	ldi	r24, 0x00	; 0
			  *volt=READ_BIT(PINC,pin_num);
			  break;
			  case PD:

			  *volt=READ_BIT(PIND,pin_num);
			  break;
     ff0:	08 95       	ret
			  default:
			  error = WRONG_PORT_NUMBER;
     ff2:	81 e0       	ldi	r24, 0x01	; 1
	  else
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;
  }
     ff4:	08 95       	ret

00000ff6 <ICU_Read_callbackfun>:

static volatile u16 t1,t2,ICU_flag=0;

static void ICU_Read_callbackfun(void)
{
	if (ICU_flag==0)
     ff6:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <ICU_flag>
     ffa:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <ICU_flag+0x1>
     ffe:	89 2b       	or	r24, r25
    1000:	79 f4       	brne	.+30     	; 0x1020 <ICU_Read_callbackfun+0x2a>
	{
		timer1_ReadCounts(&t1);
    1002:	8d e2       	ldi	r24, 0x2D	; 45
    1004:	91 e0       	ldi	r25, 0x01	; 1
    1006:	0e 94 5f 0b 	call	0x16be	; 0x16be <timer1_ReadCounts>
		EXI_TriggerEdge(ICU_EXI_INT,FALLING_EDGE);
    100a:	62 e0       	ldi	r22, 0x02	; 2
    100c:	82 e0       	ldi	r24, 0x02	; 2
    100e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <EXI_TriggerEdge>
		ICU_flag=1;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <ICU_flag+0x1>
    101a:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <ICU_flag>
    101e:	08 95       	ret
	}
	else if (ICU_flag==1)
    1020:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <ICU_flag>
    1024:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <ICU_flag+0x1>
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	51 f4       	brne	.+20     	; 0x1040 <ICU_Read_callbackfun+0x4a>
	{
		timer1_ReadCounts(&t2);
    102c:	8b e2       	ldi	r24, 0x2B	; 43
    102e:	91 e0       	ldi	r25, 0x01	; 1
    1030:	0e 94 5f 0b 	call	0x16be	; 0x16be <timer1_ReadCounts>
		ICU_flag=2;
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <ICU_flag+0x1>
    103c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <ICU_flag>
    1040:	08 95       	ret

00001042 <ICU_init>:
	}
}
void ICU_init ()
{
	Timer1_Init(TIMER1_NORMAL_MODE,TIMER1_SCALER_8);
    1042:	62 e0       	ldi	r22, 0x02	; 2
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	0e 94 90 0a 	call	0x1520	; 0x1520 <Timer1_Init>
	// DIO_initpin(ICU_CH,INFREE);                              // in init all pins
	EXI_Enable(ICU_EXI_INT);
    104a:	82 e0       	ldi	r24, 0x02	; 2
    104c:	0e 94 6d 08 	call	0x10da	; 0x10da <EXI_Enable>
	EXI_TriggerEdge(ICU_EXI_INT,RISING_EDGE);
    1050:	63 e0       	ldi	r22, 0x03	; 3
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	0e 94 7f 08 	call	0x10fe	; 0x10fe <EXI_TriggerEdge>
	EXI_SetCallBack(ICU_EXI_INT, ICU_Read_callbackfun );
    1058:	6b ef       	ldi	r22, 0xFB	; 251
    105a:	77 e0       	ldi	r23, 0x07	; 7
    105c:	82 e0       	ldi	r24, 0x02	; 2
    105e:	0e 94 df 08 	call	0x11be	; 0x11be <EXI_SetCallBack>
    1062:	08 95       	ret

00001064 <ICU_Read>:

}

u8 ICU_Read(u16 *pu16_PeriodTime)
{
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	8c 01       	movw	r16, r24

	u16 timeout ;
	EXI_TriggerEdge(ICU_EXI_INT,RISING_EDGE);
    106e:	63 e0       	ldi	r22, 0x03	; 3
    1070:	82 e0       	ldi	r24, 0x02	; 2
    1072:	0e 94 7f 08 	call	0x10fe	; 0x10fe <EXI_TriggerEdge>
	timer1_setTimerValue(0);
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	0e 94 65 0b 	call	0x16ca	; 0x16ca <timer1_setTimerValue>
	ICU_flag=0;
    107c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <ICU_flag+0x1>
    1080:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <ICU_flag>
		while((ICU_flag<2)&&(timeout<23000))
    1084:	05 c0       	rjmp	.+10     	; 0x1090 <ICU_Read+0x2c>
		{
			timeout++;
    1086:	21 96       	adiw	r28, 0x01	; 1
    1088:	82 e0       	ldi	r24, 0x02	; 2
    108a:	8a 95       	dec	r24
    108c:	f1 f7       	brne	.-4      	; 0x108a <ICU_Read+0x26>
    108e:	00 c0       	rjmp	.+0      	; 0x1090 <ICU_Read+0x2c>

	u16 timeout ;
	EXI_TriggerEdge(ICU_EXI_INT,RISING_EDGE);
	timer1_setTimerValue(0);
	ICU_flag=0;
		while((ICU_flag<2)&&(timeout<23000))
    1090:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <ICU_flag>
    1094:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <ICU_flag+0x1>
    1098:	02 97       	sbiw	r24, 0x02	; 2
    109a:	20 f4       	brcc	.+8      	; 0x10a4 <ICU_Read+0x40>
    109c:	c8 3d       	cpi	r28, 0xD8	; 216
    109e:	e9 e5       	ldi	r30, 0x59	; 89
    10a0:	de 07       	cpc	r29, r30
    10a2:	88 f3       	brcs	.-30     	; 0x1086 <ICU_Read+0x22>
		{
			timeout++;
			_delay_us(1);
		}
		
		if(ICU_flag==2)
    10a4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <ICU_flag>
    10a8:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <ICU_flag+0x1>
    10ac:	02 97       	sbiw	r24, 0x02	; 2
    10ae:	79 f4       	brne	.+30     	; 0x10ce <ICU_Read+0x6a>
		{
			*pu16_PeriodTime =(t2-t1);
    10b0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <t2>
    10b4:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <t2+0x1>
    10b8:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <t1>
    10bc:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <t1+0x1>
    10c0:	82 1b       	sub	r24, r18
    10c2:	93 0b       	sbc	r25, r19
    10c4:	f8 01       	movw	r30, r16
    10c6:	91 83       	std	Z+1, r25	; 0x01
    10c8:	80 83       	st	Z, r24
			
			return 1 ;    //done
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	01 c0       	rjmp	.+2      	; 0x10d0 <ICU_Read+0x6c>
		}
	
	return  0; //timeout
    10ce:	80 e0       	ldi	r24, 0x00	; 0
}
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	08 95       	ret

000010da <EXI_Enable>:

void EXI_Init(void)
{
	EXI_TriggerEdge(EX_INT0,FALLING_EDGE);
	EXI_TriggerEdge(EX_INT1,FALLING_EDGE);
	EXI_TriggerEdge(EX_INT2,FALLING_EDGE);
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	41 f0       	breq	.+16     	; 0x10ee <EXI_Enable+0x14>
    10de:	18 f0       	brcs	.+6      	; 0x10e6 <EXI_Enable+0xc>
    10e0:	82 30       	cpi	r24, 0x02	; 2
    10e2:	49 f0       	breq	.+18     	; 0x10f6 <EXI_Enable+0x1c>
    10e4:	08 95       	ret
    10e6:	8b b7       	in	r24, 0x3b	; 59
    10e8:	80 64       	ori	r24, 0x40	; 64
    10ea:	8b bf       	out	0x3b, r24	; 59
    10ec:	08 95       	ret
    10ee:	8b b7       	in	r24, 0x3b	; 59
    10f0:	80 68       	ori	r24, 0x80	; 128
    10f2:	8b bf       	out	0x3b, r24	; 59
    10f4:	08 95       	ret
    10f6:	8b b7       	in	r24, 0x3b	; 59
    10f8:	80 62       	ori	r24, 0x20	; 32
    10fa:	8b bf       	out	0x3b, r24	; 59
    10fc:	08 95       	ret

000010fe <EXI_TriggerEdge>:
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	49 f1       	breq	.+82     	; 0x1154 <EXI_TriggerEdge+0x56>
    1102:	20 f0       	brcs	.+8      	; 0x110c <EXI_TriggerEdge+0xe>
    1104:	82 30       	cpi	r24, 0x02	; 2
    1106:	09 f4       	brne	.+2      	; 0x110a <EXI_TriggerEdge+0xc>
    1108:	49 c0       	rjmp	.+146    	; 0x119c <EXI_TriggerEdge+0x9e>
    110a:	08 95       	ret
    110c:	61 30       	cpi	r22, 0x01	; 1
    110e:	69 f0       	breq	.+26     	; 0x112a <EXI_TriggerEdge+0x2c>
    1110:	28 f0       	brcs	.+10     	; 0x111c <EXI_TriggerEdge+0x1e>
    1112:	62 30       	cpi	r22, 0x02	; 2
    1114:	89 f0       	breq	.+34     	; 0x1138 <EXI_TriggerEdge+0x3a>
    1116:	63 30       	cpi	r22, 0x03	; 3
    1118:	b1 f0       	breq	.+44     	; 0x1146 <EXI_TriggerEdge+0x48>
    111a:	08 95       	ret
    111c:	85 b7       	in	r24, 0x35	; 53
    111e:	8e 7f       	andi	r24, 0xFE	; 254
    1120:	85 bf       	out	0x35, r24	; 53
    1122:	85 b7       	in	r24, 0x35	; 53
    1124:	8d 7f       	andi	r24, 0xFD	; 253
    1126:	85 bf       	out	0x35, r24	; 53
    1128:	08 95       	ret
    112a:	85 b7       	in	r24, 0x35	; 53
    112c:	81 60       	ori	r24, 0x01	; 1
    112e:	85 bf       	out	0x35, r24	; 53
    1130:	85 b7       	in	r24, 0x35	; 53
    1132:	8d 7f       	andi	r24, 0xFD	; 253
    1134:	85 bf       	out	0x35, r24	; 53
    1136:	08 95       	ret
    1138:	85 b7       	in	r24, 0x35	; 53
    113a:	8e 7f       	andi	r24, 0xFE	; 254
    113c:	85 bf       	out	0x35, r24	; 53
    113e:	85 b7       	in	r24, 0x35	; 53
    1140:	82 60       	ori	r24, 0x02	; 2
    1142:	85 bf       	out	0x35, r24	; 53
    1144:	08 95       	ret
    1146:	85 b7       	in	r24, 0x35	; 53
    1148:	81 60       	ori	r24, 0x01	; 1
    114a:	85 bf       	out	0x35, r24	; 53
    114c:	85 b7       	in	r24, 0x35	; 53
    114e:	82 60       	ori	r24, 0x02	; 2
    1150:	85 bf       	out	0x35, r24	; 53
    1152:	08 95       	ret
    1154:	61 30       	cpi	r22, 0x01	; 1
    1156:	69 f0       	breq	.+26     	; 0x1172 <EXI_TriggerEdge+0x74>
    1158:	28 f0       	brcs	.+10     	; 0x1164 <EXI_TriggerEdge+0x66>
    115a:	62 30       	cpi	r22, 0x02	; 2
    115c:	89 f0       	breq	.+34     	; 0x1180 <EXI_TriggerEdge+0x82>
    115e:	63 30       	cpi	r22, 0x03	; 3
    1160:	b1 f0       	breq	.+44     	; 0x118e <EXI_TriggerEdge+0x90>
    1162:	08 95       	ret
    1164:	85 b7       	in	r24, 0x35	; 53
    1166:	8b 7f       	andi	r24, 0xFB	; 251
    1168:	85 bf       	out	0x35, r24	; 53
    116a:	85 b7       	in	r24, 0x35	; 53
    116c:	87 7f       	andi	r24, 0xF7	; 247
    116e:	85 bf       	out	0x35, r24	; 53
    1170:	08 95       	ret
    1172:	85 b7       	in	r24, 0x35	; 53
    1174:	84 60       	ori	r24, 0x04	; 4
    1176:	85 bf       	out	0x35, r24	; 53
    1178:	85 b7       	in	r24, 0x35	; 53
    117a:	87 7f       	andi	r24, 0xF7	; 247
    117c:	85 bf       	out	0x35, r24	; 53
    117e:	08 95       	ret
    1180:	85 b7       	in	r24, 0x35	; 53
    1182:	8b 7f       	andi	r24, 0xFB	; 251
    1184:	85 bf       	out	0x35, r24	; 53
    1186:	85 b7       	in	r24, 0x35	; 53
    1188:	88 60       	ori	r24, 0x08	; 8
    118a:	85 bf       	out	0x35, r24	; 53
    118c:	08 95       	ret
    118e:	85 b7       	in	r24, 0x35	; 53
    1190:	84 60       	ori	r24, 0x04	; 4
    1192:	85 bf       	out	0x35, r24	; 53
    1194:	85 b7       	in	r24, 0x35	; 53
    1196:	88 60       	ori	r24, 0x08	; 8
    1198:	85 bf       	out	0x35, r24	; 53
    119a:	08 95       	ret
    119c:	62 30       	cpi	r22, 0x02	; 2
    119e:	19 f0       	breq	.+6      	; 0x11a6 <EXI_TriggerEdge+0xa8>
    11a0:	63 30       	cpi	r22, 0x03	; 3
    11a2:	29 f0       	breq	.+10     	; 0x11ae <EXI_TriggerEdge+0xb0>
    11a4:	08 c0       	rjmp	.+16     	; 0x11b6 <EXI_TriggerEdge+0xb8>
    11a6:	84 b7       	in	r24, 0x34	; 52
    11a8:	8f 7b       	andi	r24, 0xBF	; 191
    11aa:	84 bf       	out	0x34, r24	; 52
    11ac:	08 95       	ret
    11ae:	84 b7       	in	r24, 0x34	; 52
    11b0:	80 64       	ori	r24, 0x40	; 64
    11b2:	84 bf       	out	0x34, r24	; 52
    11b4:	08 95       	ret
    11b6:	84 b7       	in	r24, 0x34	; 52
    11b8:	8f 7b       	andi	r24, 0xBF	; 191
    11ba:	84 bf       	out	0x34, r24	; 52
    11bc:	08 95       	ret

000011be <EXI_SetCallBack>:
/************************************Call back functions*********************************************/
void EXI_SetCallBack(ExInterruptSource_type Interrupt,void(*LocalPtr)(void))
{
	
	
	switch(Interrupt){
    11be:	81 30       	cpi	r24, 0x01	; 1
    11c0:	49 f0       	breq	.+18     	; 0x11d4 <EXI_SetCallBack+0x16>
    11c2:	18 f0       	brcs	.+6      	; 0x11ca <EXI_SetCallBack+0xc>
    11c4:	82 30       	cpi	r24, 0x02	; 2
    11c6:	59 f0       	breq	.+22     	; 0x11de <EXI_SetCallBack+0x20>
    11c8:	08 95       	ret
		case EX_INT0:
		INT0_Fptr=LocalPtr;
    11ca:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <INT0_Fptr+0x1>
    11ce:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <INT0_Fptr>
		break;
    11d2:	08 95       	ret
		case EX_INT1:
		INT1_Fptr=LocalPtr;
    11d4:	70 93 32 01 	sts	0x0132, r23	; 0x800132 <INT1_Fptr+0x1>
    11d8:	60 93 31 01 	sts	0x0131, r22	; 0x800131 <INT1_Fptr>
		break;
    11dc:	08 95       	ret
		case EX_INT2:
		INT2_Fptr=LocalPtr;
    11de:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <INT2_Fptr+0x1>
    11e2:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <INT2_Fptr>
    11e6:	08 95       	ret

000011e8 <__vector_1>:




ISR(INT0_vect)
{  
    11e8:	1f 92       	push	r1
    11ea:	0f 92       	push	r0
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	0f 92       	push	r0
    11f0:	11 24       	eor	r1, r1
    11f2:	2f 93       	push	r18
    11f4:	3f 93       	push	r19
    11f6:	4f 93       	push	r20
    11f8:	5f 93       	push	r21
    11fa:	6f 93       	push	r22
    11fc:	7f 93       	push	r23
    11fe:	8f 93       	push	r24
    1200:	9f 93       	push	r25
    1202:	af 93       	push	r26
    1204:	bf 93       	push	r27
    1206:	ef 93       	push	r30
    1208:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
    120a:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <INT0_Fptr>
    120e:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <INT0_Fptr+0x1>
    1212:	30 97       	sbiw	r30, 0x00	; 0
    1214:	09 f0       	breq	.+2      	; 0x1218 <__vector_1+0x30>
	{
		INT0_Fptr();
    1216:	09 95       	icall
	}
}
    1218:	ff 91       	pop	r31
    121a:	ef 91       	pop	r30
    121c:	bf 91       	pop	r27
    121e:	af 91       	pop	r26
    1220:	9f 91       	pop	r25
    1222:	8f 91       	pop	r24
    1224:	7f 91       	pop	r23
    1226:	6f 91       	pop	r22
    1228:	5f 91       	pop	r21
    122a:	4f 91       	pop	r20
    122c:	3f 91       	pop	r19
    122e:	2f 91       	pop	r18
    1230:	0f 90       	pop	r0
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	0f 90       	pop	r0
    1236:	1f 90       	pop	r1
    1238:	18 95       	reti

0000123a <__vector_2>:
ISR(INT1_vect)
{
    123a:	1f 92       	push	r1
    123c:	0f 92       	push	r0
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	0f 92       	push	r0
    1242:	11 24       	eor	r1, r1
    1244:	2f 93       	push	r18
    1246:	3f 93       	push	r19
    1248:	4f 93       	push	r20
    124a:	5f 93       	push	r21
    124c:	6f 93       	push	r22
    124e:	7f 93       	push	r23
    1250:	8f 93       	push	r24
    1252:	9f 93       	push	r25
    1254:	af 93       	push	r26
    1256:	bf 93       	push	r27
    1258:	ef 93       	push	r30
    125a:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
    125c:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <INT1_Fptr>
    1260:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <INT1_Fptr+0x1>
    1264:	30 97       	sbiw	r30, 0x00	; 0
    1266:	09 f0       	breq	.+2      	; 0x126a <__vector_2+0x30>
	{
		INT1_Fptr();
    1268:	09 95       	icall
	}
}
    126a:	ff 91       	pop	r31
    126c:	ef 91       	pop	r30
    126e:	bf 91       	pop	r27
    1270:	af 91       	pop	r26
    1272:	9f 91       	pop	r25
    1274:	8f 91       	pop	r24
    1276:	7f 91       	pop	r23
    1278:	6f 91       	pop	r22
    127a:	5f 91       	pop	r21
    127c:	4f 91       	pop	r20
    127e:	3f 91       	pop	r19
    1280:	2f 91       	pop	r18
    1282:	0f 90       	pop	r0
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	0f 90       	pop	r0
    1288:	1f 90       	pop	r1
    128a:	18 95       	reti

0000128c <__vector_3>:
ISR(INT2_vect)
{
    128c:	1f 92       	push	r1
    128e:	0f 92       	push	r0
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	0f 92       	push	r0
    1294:	11 24       	eor	r1, r1
    1296:	2f 93       	push	r18
    1298:	3f 93       	push	r19
    129a:	4f 93       	push	r20
    129c:	5f 93       	push	r21
    129e:	6f 93       	push	r22
    12a0:	7f 93       	push	r23
    12a2:	8f 93       	push	r24
    12a4:	9f 93       	push	r25
    12a6:	af 93       	push	r26
    12a8:	bf 93       	push	r27
    12aa:	ef 93       	push	r30
    12ac:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
    12ae:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <INT2_Fptr>
    12b2:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <INT2_Fptr+0x1>
    12b6:	30 97       	sbiw	r30, 0x00	; 0
    12b8:	09 f0       	breq	.+2      	; 0x12bc <__vector_3+0x30>
	{
		INT2_Fptr();
    12ba:	09 95       	icall
	}
}
    12bc:	ff 91       	pop	r31
    12be:	ef 91       	pop	r30
    12c0:	bf 91       	pop	r27
    12c2:	af 91       	pop	r26
    12c4:	9f 91       	pop	r25
    12c6:	8f 91       	pop	r24
    12c8:	7f 91       	pop	r23
    12ca:	6f 91       	pop	r22
    12cc:	5f 91       	pop	r21
    12ce:	4f 91       	pop	r20
    12d0:	3f 91       	pop	r19
    12d2:	2f 91       	pop	r18
    12d4:	0f 90       	pop	r0
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	0f 90       	pop	r0
    12da:	1f 90       	pop	r1
    12dc:	18 95       	reti

000012de <waveGen>:
	TIMER0_OV_SetCallBack(waveGen);
	
} 

void waveGen()
{  static u32 OV=0;
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
	TCNT0=6;
    12e2:	86 e0       	ldi	r24, 0x06	; 6
    12e4:	82 bf       	out	0x32, r24	; 50
	OV++;
    12e6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <OV.2058>
    12ea:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <OV.2058+0x1>
    12ee:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <OV.2058+0x2>
    12f2:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <OV.2058+0x3>
    12f6:	01 96       	adiw	r24, 0x01	; 1
    12f8:	a1 1d       	adc	r26, r1
    12fa:	b1 1d       	adc	r27, r1
    12fc:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <OV.2058>
    1300:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <OV.2058+0x1>
    1304:	a0 93 37 01 	sts	0x0137, r26	; 0x800137 <OV.2058+0x2>
    1308:	b0 93 38 01 	sts	0x0138, r27	; 0x800138 <OV.2058+0x3>
	if (OV==(u32_OFFTicks+1))
    130c:	00 91 39 01 	lds	r16, 0x0139	; 0x800139 <u32_OFFTicks>
    1310:	10 91 3a 01 	lds	r17, 0x013A	; 0x80013a <u32_OFFTicks+0x1>
    1314:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <u32_OFFTicks+0x2>
    1318:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <u32_OFFTicks+0x3>
    131c:	b9 01       	movw	r22, r18
    131e:	a8 01       	movw	r20, r16
    1320:	4f 5f       	subi	r20, 0xFF	; 255
    1322:	5f 4f       	sbci	r21, 0xFF	; 255
    1324:	6f 4f       	sbci	r22, 0xFF	; 255
    1326:	7f 4f       	sbci	r23, 0xFF	; 255
    1328:	84 17       	cp	r24, r20
    132a:	95 07       	cpc	r25, r21
    132c:	a6 07       	cpc	r26, r22
    132e:	b7 07       	cpc	r27, r23
    1330:	29 f4       	brne	.+10     	; 0x133c <waveGen+0x5e>
	{
		DIO_writepin(PINB0,HIGH);//
    1332:	61 e0       	ldi	r22, 0x01	; 1
    1334:	88 e0       	ldi	r24, 0x08	; 8
    1336:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
    133a:	21 c0       	rjmp	.+66     	; 0x137e <waveGen+0xa0>
	}
	else if (OV==(u32_ONTicks+u32_OFFTicks+2))
    133c:	40 91 3d 01 	lds	r20, 0x013D	; 0x80013d <u32_ONTicks>
    1340:	50 91 3e 01 	lds	r21, 0x013E	; 0x80013e <u32_ONTicks+0x1>
    1344:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <u32_ONTicks+0x2>
    1348:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <u32_ONTicks+0x3>
    134c:	40 0f       	add	r20, r16
    134e:	51 1f       	adc	r21, r17
    1350:	62 1f       	adc	r22, r18
    1352:	73 1f       	adc	r23, r19
    1354:	4e 5f       	subi	r20, 0xFE	; 254
    1356:	5f 4f       	sbci	r21, 0xFF	; 255
    1358:	6f 4f       	sbci	r22, 0xFF	; 255
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
    135c:	84 17       	cp	r24, r20
    135e:	95 07       	cpc	r25, r21
    1360:	a6 07       	cpc	r26, r22
    1362:	b7 07       	cpc	r27, r23
    1364:	61 f4       	brne	.+24     	; 0x137e <waveGen+0xa0>
	{
		DIO_writepin(PINB0,LOW);//
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	88 e0       	ldi	r24, 0x08	; 8
    136a:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
		OV=0;
    136e:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <OV.2058>
    1372:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <OV.2058+0x1>
    1376:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <OV.2058+0x2>
    137a:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <OV.2058+0x3>
	}
	
}
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	08 95       	ret

00001384 <pwm_init>:
u32 u32_ONTicks=0,u32_OFFTicks=0;


void pwm_init()
{
	DIO_initpin(PINB0,OUTPUT);
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	88 e0       	ldi	r24, 0x08	; 8
    1388:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_initpin>
	TIMER0_Init(TIMER0_NORMAL_MODE);
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <TIMER0_Init>
	TIMER0_OV_InterruptEnable();
    1392:	0e 94 8c 0a 	call	0x1518	; 0x1518 <TIMER0_OV_InterruptEnable>
	TIMER0_OV_SetCallBack(waveGen);
    1396:	8f e6       	ldi	r24, 0x6F	; 111
    1398:	99 e0       	ldi	r25, 0x09	; 9
    139a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <TIMER0_OV_SetCallBack>
    139e:	08 95       	ret

000013a0 <PWM_set_duty>:
	
}


void PWM_set_duty(u8 u8_DutyCycle,u32 u32_Freq)
{
    13a0:	8f 92       	push	r8
    13a2:	9f 92       	push	r9
    13a4:	af 92       	push	r10
    13a6:	bf 92       	push	r11
    13a8:	cf 92       	push	r12
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	cf 93       	push	r28
    13b2:	c8 2f       	mov	r28, r24
	f64 f64_wavePeriodTime = (f32)1 / u32_Freq*1000000;					         // The Periodic Time for the Generated Pulse in Seconds //
    13b4:	cb 01       	movw	r24, r22
    13b6:	ba 01       	movw	r22, r20
    13b8:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__floatunsisf>
    13bc:	9b 01       	movw	r18, r22
    13be:	ac 01       	movw	r20, r24
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	80 e8       	ldi	r24, 0x80	; 128
    13c6:	9f e3       	ldi	r25, 0x3F	; 63
    13c8:	0e 94 47 0c 	call	0x188e	; 0x188e <__divsf3>
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	34 e2       	ldi	r19, 0x24	; 36
    13d0:	44 e7       	ldi	r20, 0x74	; 116
    13d2:	59 e4       	ldi	r21, 0x49	; 73
    13d4:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__mulsf3>
    13d8:	4b 01       	movw	r8, r22
    13da:	5c 01       	movw	r10, r24
	f64 f64_waveONTime = (f64_wavePeriodTime*u8_DutyCycle) / 100;		// The HIGH Level Time in Seconds //
    13dc:	6c 2f       	mov	r22, r28
    13de:	70 e0       	ldi	r23, 0x00	; 0
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__floatsisf>
    13e8:	a5 01       	movw	r20, r10
    13ea:	94 01       	movw	r18, r8
    13ec:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__mulsf3>
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	48 ec       	ldi	r20, 0xC8	; 200
    13f6:	52 e4       	ldi	r21, 0x42	; 66
    13f8:	0e 94 47 0c 	call	0x188e	; 0x188e <__divsf3>
    13fc:	6b 01       	movw	r12, r22
    13fe:	7c 01       	movw	r14, r24
	f64 f64_waveOFFTime = f64_wavePeriodTime - f64_waveONTime;		   // The LOW Level Time in Seconds //
    1400:	9b 01       	movw	r18, r22
    1402:	ac 01       	movw	r20, r24
    1404:	c5 01       	movw	r24, r10
    1406:	b4 01       	movw	r22, r8
    1408:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__subsf3>
    140c:	4b 01       	movw	r8, r22
    140e:	5c 01       	movw	r10, r24
	f64 f64_oneTickTime = 0.0;
	f64_oneTickTime = (f64) (((f64)PWM_PRESCALER/(f64)F_CPU)*1000000);   //1u at 8,8
	//LCD_WriteNumber(f64_wavePeriodTime) ;
	f64 f64_max_time = (256*f64_oneTickTime); //256u
	//LCD_WriteNumber( f64_max_time) ;
	u32_ONTicks     =  f64_waveONTime/(f64_max_time-6);
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	4a e7       	ldi	r20, 0x7A	; 122
    1416:	53 e4       	ldi	r21, 0x43	; 67
    1418:	c7 01       	movw	r24, r14
    141a:	b6 01       	movw	r22, r12
    141c:	0e 94 47 0c 	call	0x188e	; 0x188e <__divsf3>
    1420:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__fixunssfsi>
    1424:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <u32_ONTicks>
    1428:	70 93 3e 01 	sts	0x013E, r23	; 0x80013e <u32_ONTicks+0x1>
    142c:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u32_ONTicks+0x2>
    1430:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <u32_ONTicks+0x3>
	u32_OFFTicks    =  f64_waveOFFTime/(f64_max_time-6);
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	4a e7       	ldi	r20, 0x7A	; 122
    143a:	53 e4       	ldi	r21, 0x43	; 67
    143c:	c5 01       	movw	r24, r10
    143e:	b4 01       	movw	r22, r8
    1440:	0e 94 47 0c 	call	0x188e	; 0x188e <__divsf3>
    1444:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__fixunssfsi>
    1448:	60 93 39 01 	sts	0x0139, r22	; 0x800139 <u32_OFFTicks>
    144c:	70 93 3a 01 	sts	0x013A, r23	; 0x80013a <u32_OFFTicks+0x1>
    1450:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <u32_OFFTicks+0x2>
    1454:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <u32_OFFTicks+0x3>
	DIO_writepin(PINB0,HIGH);
    1458:	61 e0       	ldi	r22, 0x01	; 1
    145a:	88 e0       	ldi	r24, 0x08	; 8
    145c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_writepin>
}
    1460:	cf 91       	pop	r28
    1462:	ff 90       	pop	r15
    1464:	ef 90       	pop	r14
    1466:	df 90       	pop	r13
    1468:	cf 90       	pop	r12
    146a:	bf 90       	pop	r11
    146c:	af 90       	pop	r10
    146e:	9f 90       	pop	r9
    1470:	8f 90       	pop	r8
    1472:	08 95       	ret

00001474 <TIMER0_Init>:
{
	SET_BIT(TIMSK,TOIE2);
}
void TIMER2_OV_InterruptDisable(void)
{
	CLR_BIT(TIMSK,TOIE2);
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	69 f0       	breq	.+26     	; 0x1492 <TIMER0_Init+0x1e>
    1478:	28 f0       	brcs	.+10     	; 0x1484 <TIMER0_Init+0x10>
    147a:	82 30       	cpi	r24, 0x02	; 2
    147c:	89 f0       	breq	.+34     	; 0x14a0 <TIMER0_Init+0x2c>
    147e:	83 30       	cpi	r24, 0x03	; 3
    1480:	b1 f0       	breq	.+44     	; 0x14ae <TIMER0_Init+0x3a>
    1482:	08 95       	ret
    1484:	83 b7       	in	r24, 0x33	; 51
    1486:	8f 7b       	andi	r24, 0xBF	; 191
    1488:	83 bf       	out	0x33, r24	; 51
    148a:	83 b7       	in	r24, 0x33	; 51
    148c:	87 7f       	andi	r24, 0xF7	; 247
    148e:	83 bf       	out	0x33, r24	; 51
    1490:	08 95       	ret
    1492:	83 b7       	in	r24, 0x33	; 51
    1494:	80 64       	ori	r24, 0x40	; 64
    1496:	83 bf       	out	0x33, r24	; 51
    1498:	83 b7       	in	r24, 0x33	; 51
    149a:	87 7f       	andi	r24, 0xF7	; 247
    149c:	83 bf       	out	0x33, r24	; 51
    149e:	08 95       	ret
    14a0:	83 b7       	in	r24, 0x33	; 51
    14a2:	8f 7b       	andi	r24, 0xBF	; 191
    14a4:	83 bf       	out	0x33, r24	; 51
    14a6:	83 b7       	in	r24, 0x33	; 51
    14a8:	88 60       	ori	r24, 0x08	; 8
    14aa:	83 bf       	out	0x33, r24	; 51
    14ac:	08 95       	ret
    14ae:	83 b7       	in	r24, 0x33	; 51
    14b0:	80 64       	ori	r24, 0x40	; 64
    14b2:	83 bf       	out	0x33, r24	; 51
    14b4:	83 b7       	in	r24, 0x33	; 51
    14b6:	88 60       	ori	r24, 0x08	; 8
    14b8:	83 bf       	out	0x33, r24	; 51
    14ba:	08 95       	ret

000014bc <TIMER0_OV_SetCallBack>:
    14bc:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <Timer0_OVF_Fptr+0x1>
    14c0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <Timer0_OVF_Fptr>
    14c4:	08 95       	ret

000014c6 <__vector_11>:
    14c6:	1f 92       	push	r1
    14c8:	0f 92       	push	r0
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	0f 92       	push	r0
    14ce:	11 24       	eor	r1, r1
    14d0:	2f 93       	push	r18
    14d2:	3f 93       	push	r19
    14d4:	4f 93       	push	r20
    14d6:	5f 93       	push	r21
    14d8:	6f 93       	push	r22
    14da:	7f 93       	push	r23
    14dc:	8f 93       	push	r24
    14de:	9f 93       	push	r25
    14e0:	af 93       	push	r26
    14e2:	bf 93       	push	r27
    14e4:	ef 93       	push	r30
    14e6:	ff 93       	push	r31
    14e8:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <Timer0_OVF_Fptr>
    14ec:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <Timer0_OVF_Fptr+0x1>
    14f0:	30 97       	sbiw	r30, 0x00	; 0
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <__vector_11+0x30>
    14f4:	09 95       	icall
    14f6:	ff 91       	pop	r31
    14f8:	ef 91       	pop	r30
    14fa:	bf 91       	pop	r27
    14fc:	af 91       	pop	r26
    14fe:	9f 91       	pop	r25
    1500:	8f 91       	pop	r24
    1502:	7f 91       	pop	r23
    1504:	6f 91       	pop	r22
    1506:	5f 91       	pop	r21
    1508:	4f 91       	pop	r20
    150a:	3f 91       	pop	r19
    150c:	2f 91       	pop	r18
    150e:	0f 90       	pop	r0
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	0f 90       	pop	r0
    1514:	1f 90       	pop	r1
    1516:	18 95       	reti

00001518 <TIMER0_OV_InterruptEnable>:
    1518:	89 b7       	in	r24, 0x39	; 57
    151a:	81 60       	ori	r24, 0x01	; 1
    151c:	89 bf       	out	0x39, r24	; 57
    151e:	08 95       	ret

00001520 <Timer1_Init>:
    1520:	82 30       	cpi	r24, 0x02	; 2
    1522:	29 f1       	breq	.+74     	; 0x156e <Timer1_Init+0x4e>
    1524:	28 f4       	brcc	.+10     	; 0x1530 <Timer1_Init+0x10>
    1526:	88 23       	and	r24, r24
    1528:	41 f0       	breq	.+16     	; 0x153a <Timer1_Init+0x1a>
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	99 f0       	breq	.+38     	; 0x1554 <Timer1_Init+0x34>
    152e:	45 c0       	rjmp	.+138    	; 0x15ba <Timer1_Init+0x9a>
    1530:	83 30       	cpi	r24, 0x03	; 3
    1532:	51 f1       	breq	.+84     	; 0x1588 <Timer1_Init+0x68>
    1534:	84 30       	cpi	r24, 0x04	; 4
    1536:	a9 f1       	breq	.+106    	; 0x15a2 <Timer1_Init+0x82>
    1538:	40 c0       	rjmp	.+128    	; 0x15ba <Timer1_Init+0x9a>
    153a:	8f b5       	in	r24, 0x2f	; 47
    153c:	8e 7f       	andi	r24, 0xFE	; 254
    153e:	8f bd       	out	0x2f, r24	; 47
    1540:	8f b5       	in	r24, 0x2f	; 47
    1542:	8d 7f       	andi	r24, 0xFD	; 253
    1544:	8f bd       	out	0x2f, r24	; 47
    1546:	8e b5       	in	r24, 0x2e	; 46
    1548:	87 7f       	andi	r24, 0xF7	; 247
    154a:	8e bd       	out	0x2e, r24	; 46
    154c:	8e b5       	in	r24, 0x2e	; 46
    154e:	8f 7e       	andi	r24, 0xEF	; 239
    1550:	8e bd       	out	0x2e, r24	; 46
    1552:	33 c0       	rjmp	.+102    	; 0x15ba <Timer1_Init+0x9a>
    1554:	8f b5       	in	r24, 0x2f	; 47
    1556:	8e 7f       	andi	r24, 0xFE	; 254
    1558:	8f bd       	out	0x2f, r24	; 47
    155a:	8f b5       	in	r24, 0x2f	; 47
    155c:	8d 7f       	andi	r24, 0xFD	; 253
    155e:	8f bd       	out	0x2f, r24	; 47
    1560:	8e b5       	in	r24, 0x2e	; 46
    1562:	88 60       	ori	r24, 0x08	; 8
    1564:	8e bd       	out	0x2e, r24	; 46
    1566:	8e b5       	in	r24, 0x2e	; 46
    1568:	80 61       	ori	r24, 0x10	; 16
    156a:	8e bd       	out	0x2e, r24	; 46
    156c:	26 c0       	rjmp	.+76     	; 0x15ba <Timer1_Init+0x9a>
    156e:	8f b5       	in	r24, 0x2f	; 47
    1570:	8e 7f       	andi	r24, 0xFE	; 254
    1572:	8f bd       	out	0x2f, r24	; 47
    1574:	8f b5       	in	r24, 0x2f	; 47
    1576:	8d 7f       	andi	r24, 0xFD	; 253
    1578:	8f bd       	out	0x2f, r24	; 47
    157a:	8e b5       	in	r24, 0x2e	; 46
    157c:	88 60       	ori	r24, 0x08	; 8
    157e:	8e bd       	out	0x2e, r24	; 46
    1580:	8e b5       	in	r24, 0x2e	; 46
    1582:	8f 7e       	andi	r24, 0xEF	; 239
    1584:	8e bd       	out	0x2e, r24	; 46
    1586:	19 c0       	rjmp	.+50     	; 0x15ba <Timer1_Init+0x9a>
    1588:	8f b5       	in	r24, 0x2f	; 47
    158a:	8e 7f       	andi	r24, 0xFE	; 254
    158c:	8f bd       	out	0x2f, r24	; 47
    158e:	8f b5       	in	r24, 0x2f	; 47
    1590:	82 60       	ori	r24, 0x02	; 2
    1592:	8f bd       	out	0x2f, r24	; 47
    1594:	8e b5       	in	r24, 0x2e	; 46
    1596:	88 60       	ori	r24, 0x08	; 8
    1598:	8e bd       	out	0x2e, r24	; 46
    159a:	8e b5       	in	r24, 0x2e	; 46
    159c:	80 61       	ori	r24, 0x10	; 16
    159e:	8e bd       	out	0x2e, r24	; 46
    15a0:	0c c0       	rjmp	.+24     	; 0x15ba <Timer1_Init+0x9a>
    15a2:	8f b5       	in	r24, 0x2f	; 47
    15a4:	81 60       	ori	r24, 0x01	; 1
    15a6:	8f bd       	out	0x2f, r24	; 47
    15a8:	8f b5       	in	r24, 0x2f	; 47
    15aa:	82 60       	ori	r24, 0x02	; 2
    15ac:	8f bd       	out	0x2f, r24	; 47
    15ae:	8e b5       	in	r24, 0x2e	; 46
    15b0:	88 60       	ori	r24, 0x08	; 8
    15b2:	8e bd       	out	0x2e, r24	; 46
    15b4:	8e b5       	in	r24, 0x2e	; 46
    15b6:	80 61       	ori	r24, 0x10	; 16
    15b8:	8e bd       	out	0x2e, r24	; 46
    15ba:	8e b5       	in	r24, 0x2e	; 46
    15bc:	88 7f       	andi	r24, 0xF8	; 248
    15be:	8e bd       	out	0x2e, r24	; 46
    15c0:	8e b5       	in	r24, 0x2e	; 46
    15c2:	68 2b       	or	r22, r24
    15c4:	6e bd       	out	0x2e, r22	; 46
    15c6:	08 95       	ret

000015c8 <__vector_9>:
    15c8:	1f 92       	push	r1
    15ca:	0f 92       	push	r0
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	0f 92       	push	r0
    15d0:	11 24       	eor	r1, r1
    15d2:	2f 93       	push	r18
    15d4:	3f 93       	push	r19
    15d6:	4f 93       	push	r20
    15d8:	5f 93       	push	r21
    15da:	6f 93       	push	r22
    15dc:	7f 93       	push	r23
    15de:	8f 93       	push	r24
    15e0:	9f 93       	push	r25
    15e2:	af 93       	push	r26
    15e4:	bf 93       	push	r27
    15e6:	ef 93       	push	r30
    15e8:	ff 93       	push	r31
    15ea:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <Timer1_OVF_Fptr>
    15ee:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <Timer1_OVF_Fptr+0x1>
    15f2:	30 97       	sbiw	r30, 0x00	; 0
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <__vector_9+0x30>
    15f6:	09 95       	icall
    15f8:	ff 91       	pop	r31
    15fa:	ef 91       	pop	r30
    15fc:	bf 91       	pop	r27
    15fe:	af 91       	pop	r26
    1600:	9f 91       	pop	r25
    1602:	8f 91       	pop	r24
    1604:	7f 91       	pop	r23
    1606:	6f 91       	pop	r22
    1608:	5f 91       	pop	r21
    160a:	4f 91       	pop	r20
    160c:	3f 91       	pop	r19
    160e:	2f 91       	pop	r18
    1610:	0f 90       	pop	r0
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	0f 90       	pop	r0
    1616:	1f 90       	pop	r1
    1618:	18 95       	reti

0000161a <__vector_8>:
    161a:	1f 92       	push	r1
    161c:	0f 92       	push	r0
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	0f 92       	push	r0
    1622:	11 24       	eor	r1, r1
    1624:	2f 93       	push	r18
    1626:	3f 93       	push	r19
    1628:	4f 93       	push	r20
    162a:	5f 93       	push	r21
    162c:	6f 93       	push	r22
    162e:	7f 93       	push	r23
    1630:	8f 93       	push	r24
    1632:	9f 93       	push	r25
    1634:	af 93       	push	r26
    1636:	bf 93       	push	r27
    1638:	ef 93       	push	r30
    163a:	ff 93       	push	r31
    163c:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <Timer1_OCB_Fptr>
    1640:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <Timer1_OCB_Fptr+0x1>
    1644:	30 97       	sbiw	r30, 0x00	; 0
    1646:	09 f0       	breq	.+2      	; 0x164a <__vector_8+0x30>
    1648:	09 95       	icall
    164a:	ff 91       	pop	r31
    164c:	ef 91       	pop	r30
    164e:	bf 91       	pop	r27
    1650:	af 91       	pop	r26
    1652:	9f 91       	pop	r25
    1654:	8f 91       	pop	r24
    1656:	7f 91       	pop	r23
    1658:	6f 91       	pop	r22
    165a:	5f 91       	pop	r21
    165c:	4f 91       	pop	r20
    165e:	3f 91       	pop	r19
    1660:	2f 91       	pop	r18
    1662:	0f 90       	pop	r0
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	0f 90       	pop	r0
    1668:	1f 90       	pop	r1
    166a:	18 95       	reti

0000166c <__vector_6>:
    166c:	1f 92       	push	r1
    166e:	0f 92       	push	r0
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	0f 92       	push	r0
    1674:	11 24       	eor	r1, r1
    1676:	2f 93       	push	r18
    1678:	3f 93       	push	r19
    167a:	4f 93       	push	r20
    167c:	5f 93       	push	r21
    167e:	6f 93       	push	r22
    1680:	7f 93       	push	r23
    1682:	8f 93       	push	r24
    1684:	9f 93       	push	r25
    1686:	af 93       	push	r26
    1688:	bf 93       	push	r27
    168a:	ef 93       	push	r30
    168c:	ff 93       	push	r31
    168e:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <Timer1_ICU_Fptr>
    1692:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <Timer1_ICU_Fptr+0x1>
    1696:	30 97       	sbiw	r30, 0x00	; 0
    1698:	09 f0       	breq	.+2      	; 0x169c <__vector_6+0x30>
    169a:	09 95       	icall
    169c:	ff 91       	pop	r31
    169e:	ef 91       	pop	r30
    16a0:	bf 91       	pop	r27
    16a2:	af 91       	pop	r26
    16a4:	9f 91       	pop	r25
    16a6:	8f 91       	pop	r24
    16a8:	7f 91       	pop	r23
    16aa:	6f 91       	pop	r22
    16ac:	5f 91       	pop	r21
    16ae:	4f 91       	pop	r20
    16b0:	3f 91       	pop	r19
    16b2:	2f 91       	pop	r18
    16b4:	0f 90       	pop	r0
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	0f 90       	pop	r0
    16ba:	1f 90       	pop	r1
    16bc:	18 95       	reti

000016be <timer1_ReadCounts>:
    16be:	2c b5       	in	r18, 0x2c	; 44
    16c0:	3d b5       	in	r19, 0x2d	; 45
    16c2:	fc 01       	movw	r30, r24
    16c4:	31 83       	std	Z+1, r19	; 0x01
    16c6:	20 83       	st	Z, r18
    16c8:	08 95       	ret

000016ca <timer1_setTimerValue>:
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	9d bd       	out	0x2d, r25	; 45
    16ce:	8c bd       	out	0x2c, r24	; 44
    16d0:	08 95       	ret

000016d2 <TIMER2_Init>:
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	69 f0       	breq	.+26     	; 0x16f0 <TIMER2_Init+0x1e>
    16d6:	28 f0       	brcs	.+10     	; 0x16e2 <TIMER2_Init+0x10>
    16d8:	82 30       	cpi	r24, 0x02	; 2
    16da:	89 f0       	breq	.+34     	; 0x16fe <TIMER2_Init+0x2c>
    16dc:	83 30       	cpi	r24, 0x03	; 3
    16de:	b1 f0       	breq	.+44     	; 0x170c <TIMER2_Init+0x3a>
    16e0:	08 95       	ret
    16e2:	85 b5       	in	r24, 0x25	; 37
    16e4:	8f 7b       	andi	r24, 0xBF	; 191
    16e6:	85 bd       	out	0x25, r24	; 37
    16e8:	85 b5       	in	r24, 0x25	; 37
    16ea:	87 7f       	andi	r24, 0xF7	; 247
    16ec:	85 bd       	out	0x25, r24	; 37
    16ee:	08 95       	ret
    16f0:	85 b5       	in	r24, 0x25	; 37
    16f2:	80 64       	ori	r24, 0x40	; 64
    16f4:	85 bd       	out	0x25, r24	; 37
    16f6:	85 b5       	in	r24, 0x25	; 37
    16f8:	87 7f       	andi	r24, 0xF7	; 247
    16fa:	85 bd       	out	0x25, r24	; 37
    16fc:	08 95       	ret
    16fe:	85 b5       	in	r24, 0x25	; 37
    1700:	8f 7b       	andi	r24, 0xBF	; 191
    1702:	85 bd       	out	0x25, r24	; 37
    1704:	85 b5       	in	r24, 0x25	; 37
    1706:	88 60       	ori	r24, 0x08	; 8
    1708:	85 bd       	out	0x25, r24	; 37
    170a:	08 95       	ret
    170c:	85 b5       	in	r24, 0x25	; 37
    170e:	80 64       	ori	r24, 0x40	; 64
    1710:	85 bd       	out	0x25, r24	; 37
    1712:	85 b5       	in	r24, 0x25	; 37
    1714:	88 60       	ori	r24, 0x08	; 8
    1716:	85 bd       	out	0x25, r24	; 37
    1718:	08 95       	ret

0000171a <TIMER_2_setIntialValue>:
    171a:	84 bd       	out	0x24, r24	; 36
    171c:	84 e0       	ldi	r24, 0x04	; 4
    171e:	08 95       	ret

00001720 <timer2_start>:
    1720:	88 30       	cpi	r24, 0x08	; 8
    1722:	40 f4       	brcc	.+16     	; 0x1734 <timer2_start+0x14>
    1724:	95 b5       	in	r25, 0x25	; 37
    1726:	98 7f       	andi	r25, 0xF8	; 248
    1728:	95 bd       	out	0x25, r25	; 37
    172a:	95 b5       	in	r25, 0x25	; 37
    172c:	89 2b       	or	r24, r25
    172e:	85 bd       	out	0x25, r24	; 37
    1730:	84 e0       	ldi	r24, 0x04	; 4
    1732:	08 95       	ret
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	08 95       	ret

00001738 <TIMER2_OV_InterruptEnable>:
    1738:	89 b7       	in	r24, 0x39	; 57
    173a:	80 64       	ori	r24, 0x40	; 64
    173c:	89 bf       	out	0x39, r24	; 57
    173e:	08 95       	ret

00001740 <TIMER_2_INT>:
    1740:	0e 94 9c 0b 	call	0x1738	; 0x1738 <TIMER2_OV_InterruptEnable>
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <TIMER2_Init>
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	0e 94 8d 0b 	call	0x171a	; 0x171a <TIMER_2_setIntialValue>
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	0e 94 90 0b 	call	0x1720	; 0x1720 <timer2_start>
    1756:	08 95       	ret

00001758 <TIMER2_OV_SetCallBack>:
}

////////////////////////////////////////////Timer 2 Call Back functions///////////////////////////////////////
void TIMER2_OV_SetCallBack(void(*LocalFptr)(void))
{
	Timer2_OVF_Fptr=LocalFptr;
    1758:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <Timer2_OVF_Fptr+0x1>
    175c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <Timer2_OVF_Fptr>
    1760:	08 95       	ret

00001762 <__vector_5>:
}



ISR(TIMER2_OV_vect)
{
    1762:	1f 92       	push	r1
    1764:	0f 92       	push	r0
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	0f 92       	push	r0
    176a:	11 24       	eor	r1, r1
    176c:	2f 93       	push	r18
    176e:	3f 93       	push	r19
    1770:	4f 93       	push	r20
    1772:	5f 93       	push	r21
    1774:	6f 93       	push	r22
    1776:	7f 93       	push	r23
    1778:	8f 93       	push	r24
    177a:	9f 93       	push	r25
    177c:	af 93       	push	r26
    177e:	bf 93       	push	r27
    1780:	ef 93       	push	r30
    1782:	ff 93       	push	r31
	if(Timer2_OVF_Fptr!=NULLPTR)
    1784:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <Timer2_OVF_Fptr>
    1788:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <Timer2_OVF_Fptr+0x1>
    178c:	30 97       	sbiw	r30, 0x00	; 0
    178e:	09 f0       	breq	.+2      	; 0x1792 <__vector_5+0x30>
	{
		Timer2_OVF_Fptr();
    1790:	09 95       	icall
	}
}
    1792:	ff 91       	pop	r31
    1794:	ef 91       	pop	r30
    1796:	bf 91       	pop	r27
    1798:	af 91       	pop	r26
    179a:	9f 91       	pop	r25
    179c:	8f 91       	pop	r24
    179e:	7f 91       	pop	r23
    17a0:	6f 91       	pop	r22
    17a2:	5f 91       	pop	r21
    17a4:	4f 91       	pop	r20
    17a6:	3f 91       	pop	r19
    17a8:	2f 91       	pop	r18
    17aa:	0f 90       	pop	r0
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	0f 90       	pop	r0
    17b0:	1f 90       	pop	r1
    17b2:	18 95       	reti

000017b4 <__subsf3>:
    17b4:	50 58       	subi	r21, 0x80	; 128

000017b6 <__addsf3>:
    17b6:	bb 27       	eor	r27, r27
    17b8:	aa 27       	eor	r26, r26
    17ba:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__addsf3x>
    17be:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <__fp_round>
    17c2:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__fp_pscA>
    17c6:	38 f0       	brcs	.+14     	; 0x17d6 <__addsf3+0x20>
    17c8:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fp_pscB>
    17cc:	20 f0       	brcs	.+8      	; 0x17d6 <__addsf3+0x20>
    17ce:	39 f4       	brne	.+14     	; 0x17de <__addsf3+0x28>
    17d0:	9f 3f       	cpi	r25, 0xFF	; 255
    17d2:	19 f4       	brne	.+6      	; 0x17da <__addsf3+0x24>
    17d4:	26 f4       	brtc	.+8      	; 0x17de <__addsf3+0x28>
    17d6:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <__fp_nan>
    17da:	0e f4       	brtc	.+2      	; 0x17de <__addsf3+0x28>
    17dc:	e0 95       	com	r30
    17de:	e7 fb       	bst	r30, 7
    17e0:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__fp_inf>

000017e4 <__addsf3x>:
    17e4:	e9 2f       	mov	r30, r25
    17e6:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__fp_split3>
    17ea:	58 f3       	brcs	.-42     	; 0x17c2 <__addsf3+0xc>
    17ec:	ba 17       	cp	r27, r26
    17ee:	62 07       	cpc	r22, r18
    17f0:	73 07       	cpc	r23, r19
    17f2:	84 07       	cpc	r24, r20
    17f4:	95 07       	cpc	r25, r21
    17f6:	20 f0       	brcs	.+8      	; 0x1800 <__addsf3x+0x1c>
    17f8:	79 f4       	brne	.+30     	; 0x1818 <__addsf3x+0x34>
    17fa:	a6 f5       	brtc	.+104    	; 0x1864 <__addsf3x+0x80>
    17fc:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__fp_zero>
    1800:	0e f4       	brtc	.+2      	; 0x1804 <__addsf3x+0x20>
    1802:	e0 95       	com	r30
    1804:	0b 2e       	mov	r0, r27
    1806:	ba 2f       	mov	r27, r26
    1808:	a0 2d       	mov	r26, r0
    180a:	0b 01       	movw	r0, r22
    180c:	b9 01       	movw	r22, r18
    180e:	90 01       	movw	r18, r0
    1810:	0c 01       	movw	r0, r24
    1812:	ca 01       	movw	r24, r20
    1814:	a0 01       	movw	r20, r0
    1816:	11 24       	eor	r1, r1
    1818:	ff 27       	eor	r31, r31
    181a:	59 1b       	sub	r21, r25
    181c:	99 f0       	breq	.+38     	; 0x1844 <__addsf3x+0x60>
    181e:	59 3f       	cpi	r21, 0xF9	; 249
    1820:	50 f4       	brcc	.+20     	; 0x1836 <__addsf3x+0x52>
    1822:	50 3e       	cpi	r21, 0xE0	; 224
    1824:	68 f1       	brcs	.+90     	; 0x1880 <__addsf3x+0x9c>
    1826:	1a 16       	cp	r1, r26
    1828:	f0 40       	sbci	r31, 0x00	; 0
    182a:	a2 2f       	mov	r26, r18
    182c:	23 2f       	mov	r18, r19
    182e:	34 2f       	mov	r19, r20
    1830:	44 27       	eor	r20, r20
    1832:	58 5f       	subi	r21, 0xF8	; 248
    1834:	f3 cf       	rjmp	.-26     	; 0x181c <__addsf3x+0x38>
    1836:	46 95       	lsr	r20
    1838:	37 95       	ror	r19
    183a:	27 95       	ror	r18
    183c:	a7 95       	ror	r26
    183e:	f0 40       	sbci	r31, 0x00	; 0
    1840:	53 95       	inc	r21
    1842:	c9 f7       	brne	.-14     	; 0x1836 <__addsf3x+0x52>
    1844:	7e f4       	brtc	.+30     	; 0x1864 <__addsf3x+0x80>
    1846:	1f 16       	cp	r1, r31
    1848:	ba 0b       	sbc	r27, r26
    184a:	62 0b       	sbc	r22, r18
    184c:	73 0b       	sbc	r23, r19
    184e:	84 0b       	sbc	r24, r20
    1850:	ba f0       	brmi	.+46     	; 0x1880 <__addsf3x+0x9c>
    1852:	91 50       	subi	r25, 0x01	; 1
    1854:	a1 f0       	breq	.+40     	; 0x187e <__addsf3x+0x9a>
    1856:	ff 0f       	add	r31, r31
    1858:	bb 1f       	adc	r27, r27
    185a:	66 1f       	adc	r22, r22
    185c:	77 1f       	adc	r23, r23
    185e:	88 1f       	adc	r24, r24
    1860:	c2 f7       	brpl	.-16     	; 0x1852 <__addsf3x+0x6e>
    1862:	0e c0       	rjmp	.+28     	; 0x1880 <__addsf3x+0x9c>
    1864:	ba 0f       	add	r27, r26
    1866:	62 1f       	adc	r22, r18
    1868:	73 1f       	adc	r23, r19
    186a:	84 1f       	adc	r24, r20
    186c:	48 f4       	brcc	.+18     	; 0x1880 <__addsf3x+0x9c>
    186e:	87 95       	ror	r24
    1870:	77 95       	ror	r23
    1872:	67 95       	ror	r22
    1874:	b7 95       	ror	r27
    1876:	f7 95       	ror	r31
    1878:	9e 3f       	cpi	r25, 0xFE	; 254
    187a:	08 f0       	brcs	.+2      	; 0x187e <__addsf3x+0x9a>
    187c:	b0 cf       	rjmp	.-160    	; 0x17de <__addsf3+0x28>
    187e:	93 95       	inc	r25
    1880:	88 0f       	add	r24, r24
    1882:	08 f0       	brcs	.+2      	; 0x1886 <__addsf3x+0xa2>
    1884:	99 27       	eor	r25, r25
    1886:	ee 0f       	add	r30, r30
    1888:	97 95       	ror	r25
    188a:	87 95       	ror	r24
    188c:	08 95       	ret

0000188e <__divsf3>:
    188e:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__divsf3x>
    1892:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <__fp_round>
    1896:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fp_pscB>
    189a:	58 f0       	brcs	.+22     	; 0x18b2 <__divsf3+0x24>
    189c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__fp_pscA>
    18a0:	40 f0       	brcs	.+16     	; 0x18b2 <__divsf3+0x24>
    18a2:	29 f4       	brne	.+10     	; 0x18ae <__divsf3+0x20>
    18a4:	5f 3f       	cpi	r21, 0xFF	; 255
    18a6:	29 f0       	breq	.+10     	; 0x18b2 <__divsf3+0x24>
    18a8:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__fp_inf>
    18ac:	51 11       	cpse	r21, r1
    18ae:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <__fp_szero>
    18b2:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <__fp_nan>

000018b6 <__divsf3x>:
    18b6:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__fp_split3>
    18ba:	68 f3       	brcs	.-38     	; 0x1896 <__divsf3+0x8>

000018bc <__divsf3_pse>:
    18bc:	99 23       	and	r25, r25
    18be:	b1 f3       	breq	.-20     	; 0x18ac <__divsf3+0x1e>
    18c0:	55 23       	and	r21, r21
    18c2:	91 f3       	breq	.-28     	; 0x18a8 <__divsf3+0x1a>
    18c4:	95 1b       	sub	r25, r21
    18c6:	55 0b       	sbc	r21, r21
    18c8:	bb 27       	eor	r27, r27
    18ca:	aa 27       	eor	r26, r26
    18cc:	62 17       	cp	r22, r18
    18ce:	73 07       	cpc	r23, r19
    18d0:	84 07       	cpc	r24, r20
    18d2:	38 f0       	brcs	.+14     	; 0x18e2 <__divsf3_pse+0x26>
    18d4:	9f 5f       	subi	r25, 0xFF	; 255
    18d6:	5f 4f       	sbci	r21, 0xFF	; 255
    18d8:	22 0f       	add	r18, r18
    18da:	33 1f       	adc	r19, r19
    18dc:	44 1f       	adc	r20, r20
    18de:	aa 1f       	adc	r26, r26
    18e0:	a9 f3       	breq	.-22     	; 0x18cc <__divsf3_pse+0x10>
    18e2:	35 d0       	rcall	.+106    	; 0x194e <__divsf3_pse+0x92>
    18e4:	0e 2e       	mov	r0, r30
    18e6:	3a f0       	brmi	.+14     	; 0x18f6 <__divsf3_pse+0x3a>
    18e8:	e0 e8       	ldi	r30, 0x80	; 128
    18ea:	32 d0       	rcall	.+100    	; 0x1950 <__divsf3_pse+0x94>
    18ec:	91 50       	subi	r25, 0x01	; 1
    18ee:	50 40       	sbci	r21, 0x00	; 0
    18f0:	e6 95       	lsr	r30
    18f2:	00 1c       	adc	r0, r0
    18f4:	ca f7       	brpl	.-14     	; 0x18e8 <__divsf3_pse+0x2c>
    18f6:	2b d0       	rcall	.+86     	; 0x194e <__divsf3_pse+0x92>
    18f8:	fe 2f       	mov	r31, r30
    18fa:	29 d0       	rcall	.+82     	; 0x194e <__divsf3_pse+0x92>
    18fc:	66 0f       	add	r22, r22
    18fe:	77 1f       	adc	r23, r23
    1900:	88 1f       	adc	r24, r24
    1902:	bb 1f       	adc	r27, r27
    1904:	26 17       	cp	r18, r22
    1906:	37 07       	cpc	r19, r23
    1908:	48 07       	cpc	r20, r24
    190a:	ab 07       	cpc	r26, r27
    190c:	b0 e8       	ldi	r27, 0x80	; 128
    190e:	09 f0       	breq	.+2      	; 0x1912 <__divsf3_pse+0x56>
    1910:	bb 0b       	sbc	r27, r27
    1912:	80 2d       	mov	r24, r0
    1914:	bf 01       	movw	r22, r30
    1916:	ff 27       	eor	r31, r31
    1918:	93 58       	subi	r25, 0x83	; 131
    191a:	5f 4f       	sbci	r21, 0xFF	; 255
    191c:	3a f0       	brmi	.+14     	; 0x192c <__divsf3_pse+0x70>
    191e:	9e 3f       	cpi	r25, 0xFE	; 254
    1920:	51 05       	cpc	r21, r1
    1922:	78 f0       	brcs	.+30     	; 0x1942 <__divsf3_pse+0x86>
    1924:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__fp_inf>
    1928:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <__fp_szero>
    192c:	5f 3f       	cpi	r21, 0xFF	; 255
    192e:	e4 f3       	brlt	.-8      	; 0x1928 <__divsf3_pse+0x6c>
    1930:	98 3e       	cpi	r25, 0xE8	; 232
    1932:	d4 f3       	brlt	.-12     	; 0x1928 <__divsf3_pse+0x6c>
    1934:	86 95       	lsr	r24
    1936:	77 95       	ror	r23
    1938:	67 95       	ror	r22
    193a:	b7 95       	ror	r27
    193c:	f7 95       	ror	r31
    193e:	9f 5f       	subi	r25, 0xFF	; 255
    1940:	c9 f7       	brne	.-14     	; 0x1934 <__divsf3_pse+0x78>
    1942:	88 0f       	add	r24, r24
    1944:	91 1d       	adc	r25, r1
    1946:	96 95       	lsr	r25
    1948:	87 95       	ror	r24
    194a:	97 f9       	bld	r25, 7
    194c:	08 95       	ret
    194e:	e1 e0       	ldi	r30, 0x01	; 1
    1950:	66 0f       	add	r22, r22
    1952:	77 1f       	adc	r23, r23
    1954:	88 1f       	adc	r24, r24
    1956:	bb 1f       	adc	r27, r27
    1958:	62 17       	cp	r22, r18
    195a:	73 07       	cpc	r23, r19
    195c:	84 07       	cpc	r24, r20
    195e:	ba 07       	cpc	r27, r26
    1960:	20 f0       	brcs	.+8      	; 0x196a <__divsf3_pse+0xae>
    1962:	62 1b       	sub	r22, r18
    1964:	73 0b       	sbc	r23, r19
    1966:	84 0b       	sbc	r24, r20
    1968:	ba 0b       	sbc	r27, r26
    196a:	ee 1f       	adc	r30, r30
    196c:	88 f7       	brcc	.-30     	; 0x1950 <__divsf3_pse+0x94>
    196e:	e0 95       	com	r30
    1970:	08 95       	ret

00001972 <__fixunssfsi>:
    1972:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__fp_splitA>
    1976:	88 f0       	brcs	.+34     	; 0x199a <__fixunssfsi+0x28>
    1978:	9f 57       	subi	r25, 0x7F	; 127
    197a:	98 f0       	brcs	.+38     	; 0x19a2 <__fixunssfsi+0x30>
    197c:	b9 2f       	mov	r27, r25
    197e:	99 27       	eor	r25, r25
    1980:	b7 51       	subi	r27, 0x17	; 23
    1982:	b0 f0       	brcs	.+44     	; 0x19b0 <__fixunssfsi+0x3e>
    1984:	e1 f0       	breq	.+56     	; 0x19be <__fixunssfsi+0x4c>
    1986:	66 0f       	add	r22, r22
    1988:	77 1f       	adc	r23, r23
    198a:	88 1f       	adc	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	1a f0       	brmi	.+6      	; 0x1996 <__fixunssfsi+0x24>
    1990:	ba 95       	dec	r27
    1992:	c9 f7       	brne	.-14     	; 0x1986 <__fixunssfsi+0x14>
    1994:	14 c0       	rjmp	.+40     	; 0x19be <__fixunssfsi+0x4c>
    1996:	b1 30       	cpi	r27, 0x01	; 1
    1998:	91 f0       	breq	.+36     	; 0x19be <__fixunssfsi+0x4c>
    199a:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__fp_zero>
    199e:	b1 e0       	ldi	r27, 0x01	; 1
    19a0:	08 95       	ret
    19a2:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__fp_zero>
    19a6:	67 2f       	mov	r22, r23
    19a8:	78 2f       	mov	r23, r24
    19aa:	88 27       	eor	r24, r24
    19ac:	b8 5f       	subi	r27, 0xF8	; 248
    19ae:	39 f0       	breq	.+14     	; 0x19be <__fixunssfsi+0x4c>
    19b0:	b9 3f       	cpi	r27, 0xF9	; 249
    19b2:	cc f3       	brlt	.-14     	; 0x19a6 <__fixunssfsi+0x34>
    19b4:	86 95       	lsr	r24
    19b6:	77 95       	ror	r23
    19b8:	67 95       	ror	r22
    19ba:	b3 95       	inc	r27
    19bc:	d9 f7       	brne	.-10     	; 0x19b4 <__fixunssfsi+0x42>
    19be:	3e f4       	brtc	.+14     	; 0x19ce <__fixunssfsi+0x5c>
    19c0:	90 95       	com	r25
    19c2:	80 95       	com	r24
    19c4:	70 95       	com	r23
    19c6:	61 95       	neg	r22
    19c8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ca:	8f 4f       	sbci	r24, 0xFF	; 255
    19cc:	9f 4f       	sbci	r25, 0xFF	; 255
    19ce:	08 95       	ret

000019d0 <__floatunsisf>:
    19d0:	e8 94       	clt
    19d2:	09 c0       	rjmp	.+18     	; 0x19e6 <__floatsisf+0x12>

000019d4 <__floatsisf>:
    19d4:	97 fb       	bst	r25, 7
    19d6:	3e f4       	brtc	.+14     	; 0x19e6 <__floatsisf+0x12>
    19d8:	90 95       	com	r25
    19da:	80 95       	com	r24
    19dc:	70 95       	com	r23
    19de:	61 95       	neg	r22
    19e0:	7f 4f       	sbci	r23, 0xFF	; 255
    19e2:	8f 4f       	sbci	r24, 0xFF	; 255
    19e4:	9f 4f       	sbci	r25, 0xFF	; 255
    19e6:	99 23       	and	r25, r25
    19e8:	a9 f0       	breq	.+42     	; 0x1a14 <__floatsisf+0x40>
    19ea:	f9 2f       	mov	r31, r25
    19ec:	96 e9       	ldi	r25, 0x96	; 150
    19ee:	bb 27       	eor	r27, r27
    19f0:	93 95       	inc	r25
    19f2:	f6 95       	lsr	r31
    19f4:	87 95       	ror	r24
    19f6:	77 95       	ror	r23
    19f8:	67 95       	ror	r22
    19fa:	b7 95       	ror	r27
    19fc:	f1 11       	cpse	r31, r1
    19fe:	f8 cf       	rjmp	.-16     	; 0x19f0 <__floatsisf+0x1c>
    1a00:	fa f4       	brpl	.+62     	; 0x1a40 <__floatsisf+0x6c>
    1a02:	bb 0f       	add	r27, r27
    1a04:	11 f4       	brne	.+4      	; 0x1a0a <__floatsisf+0x36>
    1a06:	60 ff       	sbrs	r22, 0
    1a08:	1b c0       	rjmp	.+54     	; 0x1a40 <__floatsisf+0x6c>
    1a0a:	6f 5f       	subi	r22, 0xFF	; 255
    1a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a10:	9f 4f       	sbci	r25, 0xFF	; 255
    1a12:	16 c0       	rjmp	.+44     	; 0x1a40 <__floatsisf+0x6c>
    1a14:	88 23       	and	r24, r24
    1a16:	11 f0       	breq	.+4      	; 0x1a1c <__floatsisf+0x48>
    1a18:	96 e9       	ldi	r25, 0x96	; 150
    1a1a:	11 c0       	rjmp	.+34     	; 0x1a3e <__floatsisf+0x6a>
    1a1c:	77 23       	and	r23, r23
    1a1e:	21 f0       	breq	.+8      	; 0x1a28 <__floatsisf+0x54>
    1a20:	9e e8       	ldi	r25, 0x8E	; 142
    1a22:	87 2f       	mov	r24, r23
    1a24:	76 2f       	mov	r23, r22
    1a26:	05 c0       	rjmp	.+10     	; 0x1a32 <__floatsisf+0x5e>
    1a28:	66 23       	and	r22, r22
    1a2a:	71 f0       	breq	.+28     	; 0x1a48 <__floatsisf+0x74>
    1a2c:	96 e8       	ldi	r25, 0x86	; 134
    1a2e:	86 2f       	mov	r24, r22
    1a30:	70 e0       	ldi	r23, 0x00	; 0
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	2a f0       	brmi	.+10     	; 0x1a40 <__floatsisf+0x6c>
    1a36:	9a 95       	dec	r25
    1a38:	66 0f       	add	r22, r22
    1a3a:	77 1f       	adc	r23, r23
    1a3c:	88 1f       	adc	r24, r24
    1a3e:	da f7       	brpl	.-10     	; 0x1a36 <__floatsisf+0x62>
    1a40:	88 0f       	add	r24, r24
    1a42:	96 95       	lsr	r25
    1a44:	87 95       	ror	r24
    1a46:	97 f9       	bld	r25, 7
    1a48:	08 95       	ret

00001a4a <__fp_inf>:
    1a4a:	97 f9       	bld	r25, 7
    1a4c:	9f 67       	ori	r25, 0x7F	; 127
    1a4e:	80 e8       	ldi	r24, 0x80	; 128
    1a50:	70 e0       	ldi	r23, 0x00	; 0
    1a52:	60 e0       	ldi	r22, 0x00	; 0
    1a54:	08 95       	ret

00001a56 <__fp_nan>:
    1a56:	9f ef       	ldi	r25, 0xFF	; 255
    1a58:	80 ec       	ldi	r24, 0xC0	; 192
    1a5a:	08 95       	ret

00001a5c <__fp_pscA>:
    1a5c:	00 24       	eor	r0, r0
    1a5e:	0a 94       	dec	r0
    1a60:	16 16       	cp	r1, r22
    1a62:	17 06       	cpc	r1, r23
    1a64:	18 06       	cpc	r1, r24
    1a66:	09 06       	cpc	r0, r25
    1a68:	08 95       	ret

00001a6a <__fp_pscB>:
    1a6a:	00 24       	eor	r0, r0
    1a6c:	0a 94       	dec	r0
    1a6e:	12 16       	cp	r1, r18
    1a70:	13 06       	cpc	r1, r19
    1a72:	14 06       	cpc	r1, r20
    1a74:	05 06       	cpc	r0, r21
    1a76:	08 95       	ret

00001a78 <__fp_round>:
    1a78:	09 2e       	mov	r0, r25
    1a7a:	03 94       	inc	r0
    1a7c:	00 0c       	add	r0, r0
    1a7e:	11 f4       	brne	.+4      	; 0x1a84 <__fp_round+0xc>
    1a80:	88 23       	and	r24, r24
    1a82:	52 f0       	brmi	.+20     	; 0x1a98 <__fp_round+0x20>
    1a84:	bb 0f       	add	r27, r27
    1a86:	40 f4       	brcc	.+16     	; 0x1a98 <__fp_round+0x20>
    1a88:	bf 2b       	or	r27, r31
    1a8a:	11 f4       	brne	.+4      	; 0x1a90 <__fp_round+0x18>
    1a8c:	60 ff       	sbrs	r22, 0
    1a8e:	04 c0       	rjmp	.+8      	; 0x1a98 <__fp_round+0x20>
    1a90:	6f 5f       	subi	r22, 0xFF	; 255
    1a92:	7f 4f       	sbci	r23, 0xFF	; 255
    1a94:	8f 4f       	sbci	r24, 0xFF	; 255
    1a96:	9f 4f       	sbci	r25, 0xFF	; 255
    1a98:	08 95       	ret

00001a9a <__fp_split3>:
    1a9a:	57 fd       	sbrc	r21, 7
    1a9c:	90 58       	subi	r25, 0x80	; 128
    1a9e:	44 0f       	add	r20, r20
    1aa0:	55 1f       	adc	r21, r21
    1aa2:	59 f0       	breq	.+22     	; 0x1aba <__fp_splitA+0x10>
    1aa4:	5f 3f       	cpi	r21, 0xFF	; 255
    1aa6:	71 f0       	breq	.+28     	; 0x1ac4 <__fp_splitA+0x1a>
    1aa8:	47 95       	ror	r20

00001aaa <__fp_splitA>:
    1aaa:	88 0f       	add	r24, r24
    1aac:	97 fb       	bst	r25, 7
    1aae:	99 1f       	adc	r25, r25
    1ab0:	61 f0       	breq	.+24     	; 0x1aca <__fp_splitA+0x20>
    1ab2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ab4:	79 f0       	breq	.+30     	; 0x1ad4 <__fp_splitA+0x2a>
    1ab6:	87 95       	ror	r24
    1ab8:	08 95       	ret
    1aba:	12 16       	cp	r1, r18
    1abc:	13 06       	cpc	r1, r19
    1abe:	14 06       	cpc	r1, r20
    1ac0:	55 1f       	adc	r21, r21
    1ac2:	f2 cf       	rjmp	.-28     	; 0x1aa8 <__fp_split3+0xe>
    1ac4:	46 95       	lsr	r20
    1ac6:	f1 df       	rcall	.-30     	; 0x1aaa <__fp_splitA>
    1ac8:	08 c0       	rjmp	.+16     	; 0x1ada <__fp_splitA+0x30>
    1aca:	16 16       	cp	r1, r22
    1acc:	17 06       	cpc	r1, r23
    1ace:	18 06       	cpc	r1, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	f1 cf       	rjmp	.-30     	; 0x1ab6 <__fp_splitA+0xc>
    1ad4:	86 95       	lsr	r24
    1ad6:	71 05       	cpc	r23, r1
    1ad8:	61 05       	cpc	r22, r1
    1ada:	08 94       	sec
    1adc:	08 95       	ret

00001ade <__fp_zero>:
    1ade:	e8 94       	clt

00001ae0 <__fp_szero>:
    1ae0:	bb 27       	eor	r27, r27
    1ae2:	66 27       	eor	r22, r22
    1ae4:	77 27       	eor	r23, r23
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	97 f9       	bld	r25, 7
    1aea:	08 95       	ret

00001aec <__mulsf3>:
    1aec:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__mulsf3x>
    1af0:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <__fp_round>
    1af4:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__fp_pscA>
    1af8:	38 f0       	brcs	.+14     	; 0x1b08 <__mulsf3+0x1c>
    1afa:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fp_pscB>
    1afe:	20 f0       	brcs	.+8      	; 0x1b08 <__mulsf3+0x1c>
    1b00:	95 23       	and	r25, r21
    1b02:	11 f0       	breq	.+4      	; 0x1b08 <__mulsf3+0x1c>
    1b04:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__fp_inf>
    1b08:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <__fp_nan>
    1b0c:	11 24       	eor	r1, r1
    1b0e:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <__fp_szero>

00001b12 <__mulsf3x>:
    1b12:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__fp_split3>
    1b16:	70 f3       	brcs	.-36     	; 0x1af4 <__mulsf3+0x8>

00001b18 <__mulsf3_pse>:
    1b18:	95 9f       	mul	r25, r21
    1b1a:	c1 f3       	breq	.-16     	; 0x1b0c <__mulsf3+0x20>
    1b1c:	95 0f       	add	r25, r21
    1b1e:	50 e0       	ldi	r21, 0x00	; 0
    1b20:	55 1f       	adc	r21, r21
    1b22:	62 9f       	mul	r22, r18
    1b24:	f0 01       	movw	r30, r0
    1b26:	72 9f       	mul	r23, r18
    1b28:	bb 27       	eor	r27, r27
    1b2a:	f0 0d       	add	r31, r0
    1b2c:	b1 1d       	adc	r27, r1
    1b2e:	63 9f       	mul	r22, r19
    1b30:	aa 27       	eor	r26, r26
    1b32:	f0 0d       	add	r31, r0
    1b34:	b1 1d       	adc	r27, r1
    1b36:	aa 1f       	adc	r26, r26
    1b38:	64 9f       	mul	r22, r20
    1b3a:	66 27       	eor	r22, r22
    1b3c:	b0 0d       	add	r27, r0
    1b3e:	a1 1d       	adc	r26, r1
    1b40:	66 1f       	adc	r22, r22
    1b42:	82 9f       	mul	r24, r18
    1b44:	22 27       	eor	r18, r18
    1b46:	b0 0d       	add	r27, r0
    1b48:	a1 1d       	adc	r26, r1
    1b4a:	62 1f       	adc	r22, r18
    1b4c:	73 9f       	mul	r23, r19
    1b4e:	b0 0d       	add	r27, r0
    1b50:	a1 1d       	adc	r26, r1
    1b52:	62 1f       	adc	r22, r18
    1b54:	83 9f       	mul	r24, r19
    1b56:	a0 0d       	add	r26, r0
    1b58:	61 1d       	adc	r22, r1
    1b5a:	22 1f       	adc	r18, r18
    1b5c:	74 9f       	mul	r23, r20
    1b5e:	33 27       	eor	r19, r19
    1b60:	a0 0d       	add	r26, r0
    1b62:	61 1d       	adc	r22, r1
    1b64:	23 1f       	adc	r18, r19
    1b66:	84 9f       	mul	r24, r20
    1b68:	60 0d       	add	r22, r0
    1b6a:	21 1d       	adc	r18, r1
    1b6c:	82 2f       	mov	r24, r18
    1b6e:	76 2f       	mov	r23, r22
    1b70:	6a 2f       	mov	r22, r26
    1b72:	11 24       	eor	r1, r1
    1b74:	9f 57       	subi	r25, 0x7F	; 127
    1b76:	50 40       	sbci	r21, 0x00	; 0
    1b78:	9a f0       	brmi	.+38     	; 0x1ba0 <__mulsf3_pse+0x88>
    1b7a:	f1 f0       	breq	.+60     	; 0x1bb8 <__mulsf3_pse+0xa0>
    1b7c:	88 23       	and	r24, r24
    1b7e:	4a f0       	brmi	.+18     	; 0x1b92 <__mulsf3_pse+0x7a>
    1b80:	ee 0f       	add	r30, r30
    1b82:	ff 1f       	adc	r31, r31
    1b84:	bb 1f       	adc	r27, r27
    1b86:	66 1f       	adc	r22, r22
    1b88:	77 1f       	adc	r23, r23
    1b8a:	88 1f       	adc	r24, r24
    1b8c:	91 50       	subi	r25, 0x01	; 1
    1b8e:	50 40       	sbci	r21, 0x00	; 0
    1b90:	a9 f7       	brne	.-22     	; 0x1b7c <__mulsf3_pse+0x64>
    1b92:	9e 3f       	cpi	r25, 0xFE	; 254
    1b94:	51 05       	cpc	r21, r1
    1b96:	80 f0       	brcs	.+32     	; 0x1bb8 <__mulsf3_pse+0xa0>
    1b98:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__fp_inf>
    1b9c:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <__fp_szero>
    1ba0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ba2:	e4 f3       	brlt	.-8      	; 0x1b9c <__mulsf3_pse+0x84>
    1ba4:	98 3e       	cpi	r25, 0xE8	; 232
    1ba6:	d4 f3       	brlt	.-12     	; 0x1b9c <__mulsf3_pse+0x84>
    1ba8:	86 95       	lsr	r24
    1baa:	77 95       	ror	r23
    1bac:	67 95       	ror	r22
    1bae:	b7 95       	ror	r27
    1bb0:	f7 95       	ror	r31
    1bb2:	e7 95       	ror	r30
    1bb4:	9f 5f       	subi	r25, 0xFF	; 255
    1bb6:	c1 f7       	brne	.-16     	; 0x1ba8 <__mulsf3_pse+0x90>
    1bb8:	fe 2b       	or	r31, r30
    1bba:	88 0f       	add	r24, r24
    1bbc:	91 1d       	adc	r25, r1
    1bbe:	96 95       	lsr	r25
    1bc0:	87 95       	ror	r24
    1bc2:	97 f9       	bld	r25, 7
    1bc4:	08 95       	ret

00001bc6 <__divmodsi4>:
    1bc6:	05 2e       	mov	r0, r21
    1bc8:	97 fb       	bst	r25, 7
    1bca:	1e f4       	brtc	.+6      	; 0x1bd2 <__divmodsi4+0xc>
    1bcc:	00 94       	com	r0
    1bce:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <__negsi2>
    1bd2:	57 fd       	sbrc	r21, 7
    1bd4:	07 d0       	rcall	.+14     	; 0x1be4 <__divmodsi4_neg2>
    1bd6:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__udivmodsi4>
    1bda:	07 fc       	sbrc	r0, 7
    1bdc:	03 d0       	rcall	.+6      	; 0x1be4 <__divmodsi4_neg2>
    1bde:	4e f4       	brtc	.+18     	; 0x1bf2 <__divmodsi4_exit>
    1be0:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <__negsi2>

00001be4 <__divmodsi4_neg2>:
    1be4:	50 95       	com	r21
    1be6:	40 95       	com	r20
    1be8:	30 95       	com	r19
    1bea:	21 95       	neg	r18
    1bec:	3f 4f       	sbci	r19, 0xFF	; 255
    1bee:	4f 4f       	sbci	r20, 0xFF	; 255
    1bf0:	5f 4f       	sbci	r21, 0xFF	; 255

00001bf2 <__divmodsi4_exit>:
    1bf2:	08 95       	ret

00001bf4 <__negsi2>:
    1bf4:	90 95       	com	r25
    1bf6:	80 95       	com	r24
    1bf8:	70 95       	com	r23
    1bfa:	61 95       	neg	r22
    1bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfe:	8f 4f       	sbci	r24, 0xFF	; 255
    1c00:	9f 4f       	sbci	r25, 0xFF	; 255
    1c02:	08 95       	ret

00001c04 <__umulhisi3>:
    1c04:	a2 9f       	mul	r26, r18
    1c06:	b0 01       	movw	r22, r0
    1c08:	b3 9f       	mul	r27, r19
    1c0a:	c0 01       	movw	r24, r0
    1c0c:	a3 9f       	mul	r26, r19
    1c0e:	70 0d       	add	r23, r0
    1c10:	81 1d       	adc	r24, r1
    1c12:	11 24       	eor	r1, r1
    1c14:	91 1d       	adc	r25, r1
    1c16:	b2 9f       	mul	r27, r18
    1c18:	70 0d       	add	r23, r0
    1c1a:	81 1d       	adc	r24, r1
    1c1c:	11 24       	eor	r1, r1
    1c1e:	91 1d       	adc	r25, r1
    1c20:	08 95       	ret

00001c22 <__udivmodsi4>:
    1c22:	a1 e2       	ldi	r26, 0x21	; 33
    1c24:	1a 2e       	mov	r1, r26
    1c26:	aa 1b       	sub	r26, r26
    1c28:	bb 1b       	sub	r27, r27
    1c2a:	fd 01       	movw	r30, r26
    1c2c:	0d c0       	rjmp	.+26     	; 0x1c48 <__udivmodsi4_ep>

00001c2e <__udivmodsi4_loop>:
    1c2e:	aa 1f       	adc	r26, r26
    1c30:	bb 1f       	adc	r27, r27
    1c32:	ee 1f       	adc	r30, r30
    1c34:	ff 1f       	adc	r31, r31
    1c36:	a2 17       	cp	r26, r18
    1c38:	b3 07       	cpc	r27, r19
    1c3a:	e4 07       	cpc	r30, r20
    1c3c:	f5 07       	cpc	r31, r21
    1c3e:	20 f0       	brcs	.+8      	; 0x1c48 <__udivmodsi4_ep>
    1c40:	a2 1b       	sub	r26, r18
    1c42:	b3 0b       	sbc	r27, r19
    1c44:	e4 0b       	sbc	r30, r20
    1c46:	f5 0b       	sbc	r31, r21

00001c48 <__udivmodsi4_ep>:
    1c48:	66 1f       	adc	r22, r22
    1c4a:	77 1f       	adc	r23, r23
    1c4c:	88 1f       	adc	r24, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	1a 94       	dec	r1
    1c52:	69 f7       	brne	.-38     	; 0x1c2e <__udivmodsi4_loop>
    1c54:	60 95       	com	r22
    1c56:	70 95       	com	r23
    1c58:	80 95       	com	r24
    1c5a:	90 95       	com	r25
    1c5c:	9b 01       	movw	r18, r22
    1c5e:	ac 01       	movw	r20, r24
    1c60:	bd 01       	movw	r22, r26
    1c62:	cf 01       	movw	r24, r30
    1c64:	08 95       	ret

00001c66 <_exit>:
    1c66:	f8 94       	cli

00001c68 <__stop_program>:
    1c68:	ff cf       	rjmp	.-2      	; 0x1c68 <__stop_program>
