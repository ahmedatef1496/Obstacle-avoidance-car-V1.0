
Obstacle-avoidance-car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c0  00800060  00001c62  00001cf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000032  00800120  00800120  00001db6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001db6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001de8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000470  00000000  00000000  00001e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000047d6  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001574  00000000  00000000  00006a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000270a  00000000  00000000  00007fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be8  00000000  00000000  0000a6e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014d7  00000000  00000000  0000b2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000295d  00000000  00000000  0000c7a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  0000f104  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__vector_1>
       8:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__vector_2>
       c:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__vector_5>
      18:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__vector_8>
      24:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 32       	cpi	r26, 0x20	; 32
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 e2       	ldi	r26, 0x20	; 32
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 35       	cpi	r26, 0x52	; 82
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f5 05 	call	0xbea	; 0xbea <main>
      8a:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Speed_50_check>:
	LCD_WriteNumber(g_distance);
	LCD_WriteString(" Cm");
}

void Speed_50_check()
{
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
	if(g_speed_flag == 1)
      96:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <g_speed_flag>
      9a:	81 30       	cpi	r24, 0x01	; 1
      9c:	c9 f5       	brne	.+114    	; 0x110 <Speed_50_check+0x7e>
	{
		
		if (ovf < mode_ovf ){
      9e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <ovf>
      a2:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <ovf+0x1>
      a6:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <ovf+0x2>
      aa:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <ovf+0x3>
      ae:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <mode_ovf>
      b2:	50 91 42 01 	lds	r21, 0x0142	; 0x800142 <mode_ovf+0x1>
      b6:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <mode_ovf+0x2>
      ba:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <mode_ovf+0x3>
      be:	84 17       	cp	r24, r20
      c0:	95 07       	cpc	r25, r21
      c2:	a6 07       	cpc	r26, r22
      c4:	b7 07       	cpc	r27, r23
      c6:	60 f4       	brcc	.+24     	; 0xe0 <Speed_50_check+0x4e>
			ovf++;
      c8:	01 96       	adiw	r24, 0x01	; 1
      ca:	a1 1d       	adc	r26, r1
      cc:	b1 1d       	adc	r27, r1
      ce:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <ovf>
      d2:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <ovf+0x1>
      d6:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <ovf+0x2>
      da:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <ovf+0x3>
      de:	18 c0       	rjmp	.+48     	; 0x110 <Speed_50_check+0x7e>
		}
		else if ( ovf == mode_ovf && mode_ovf!=0)
      e0:	84 17       	cp	r24, r20
      e2:	95 07       	cpc	r25, r21
      e4:	a6 07       	cpc	r26, r22
      e6:	b7 07       	cpc	r27, r23
      e8:	99 f4       	brne	.+38     	; 0x110 <Speed_50_check+0x7e>
      ea:	45 2b       	or	r20, r21
      ec:	46 2b       	or	r20, r22
      ee:	47 2b       	or	r20, r23
      f0:	79 f0       	breq	.+30     	; 0x110 <Speed_50_check+0x7e>
		{
			ovf =0 ;
      f2:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ovf>
      f6:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <ovf+0x1>
      fa:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ovf+0x2>
      fe:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ovf+0x3>
			if (car_mode ==0)
     102:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <car_mode>
     106:	81 11       	cpse	r24, r1
     108:	03 c0       	rjmp	.+6      	; 0x110 <Speed_50_check+0x7e>
			{
				car_mode=1;
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <car_mode>
			}
			
		}
	}
}
     110:	1f 91       	pop	r17
     112:	0f 91       	pop	r16
     114:	08 95       	ret

00000116 <STOP_check>:
static u8 g_Rotate_Counter;


void STOP_check (void)
{
	KEYPAD_getpressedkey(&g_keyPressed);
     116:	86 e2       	ldi	r24, 0x26	; 38
     118:	91 e0       	ldi	r25, 0x01	; 1
     11a:	0e 94 77 03 	call	0x6ee	; 0x6ee <KEYPAD_getpressedkey>
	if (g_keyPressed == '2')
     11e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <g_keyPressed>
     122:	82 33       	cpi	r24, 0x32	; 50
     124:	a1 f4       	brne	.+40     	; 0x14e <STOP_check+0x38>
	{
		LCD_Clear();
     126:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_Clear>
		LCD_SetCursor(0,4);
     12a:	64 e0       	ldi	r22, 0x04	; 4
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_SetCursor>
		LCD_WriteString("STOPPED!");
     132:	88 e6       	ldi	r24, 0x68	; 104
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
		Car_Stop();
     13a:	0e 94 88 05 	call	0xb10	; 0xb10 <Car_Stop>
		do {
			KEYPAD_getpressedkey(&g_keyPressed);
     13e:	86 e2       	ldi	r24, 0x26	; 38
     140:	91 e0       	ldi	r25, 0x01	; 1
     142:	0e 94 77 03 	call	0x6ee	; 0x6ee <KEYPAD_getpressedkey>
		} while (g_keyPressed != '1');				//Key 1 is pressed.
     146:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <g_keyPressed>
     14a:	81 33       	cpi	r24, 0x31	; 49
     14c:	c1 f7       	brne	.-16     	; 0x13e <STOP_check+0x28>
     14e:	08 95       	ret

00000150 <car_Forward_30>:
	}
}

void car_Forward_30()
{	
	PWM_set_duty(30,100);
     150:	44 e6       	ldi	r20, 0x64	; 100
     152:	50 e0       	ldi	r21, 0x00	; 0
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	70 e0       	ldi	r23, 0x00	; 0
     158:	8e e1       	ldi	r24, 0x1E	; 30
     15a:	0e 94 cc 09 	call	0x1398	; 0x1398 <PWM_set_duty>
	Car_Moving_FWD();
     15e:	0e 94 64 05 	call	0xac8	; 0xac8 <Car_Moving_FWD>
	LCD_SetCursor(0,0);
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_SetCursor>
	LCD_WriteString("Speed:30% Dir:	F");
     16a:	81 e7       	ldi	r24, 0x71	; 113
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
	LCD_SetCursor(1,0);
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_SetCursor>
	LCD_WriteString("Dist.:");
     17a:	82 e8       	ldi	r24, 0x82	; 130
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
	LCD_WriteNumber(g_distance);
     182:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <g_distance>
     186:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <g_distance+0x1>
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <LCD_WriteNumber>
	LCD_WriteString(" Cm");
     192:	89 e8       	ldi	r24, 0x89	; 137
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
     19a:	08 95       	ret

0000019c <car_Forward_50>:
}

void car_Forward_50()
{
	PWM_set_duty(50,100);
     19c:	44 e6       	ldi	r20, 0x64	; 100
     19e:	50 e0       	ldi	r21, 0x00	; 0
     1a0:	60 e0       	ldi	r22, 0x00	; 0
     1a2:	70 e0       	ldi	r23, 0x00	; 0
     1a4:	82 e3       	ldi	r24, 0x32	; 50
     1a6:	0e 94 cc 09 	call	0x1398	; 0x1398 <PWM_set_duty>
	Car_Moving_FWD();
     1aa:	0e 94 64 05 	call	0xac8	; 0xac8 <Car_Moving_FWD>
	LCD_SetCursor(0,0);
     1ae:	60 e0       	ldi	r22, 0x00	; 0
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_SetCursor>
	LCD_WriteString("Speed:50% Dir:	F");
     1b6:	8d e8       	ldi	r24, 0x8D	; 141
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
	LCD_SetCursor(1,0);
     1be:	60 e0       	ldi	r22, 0x00	; 0
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_SetCursor>
	LCD_WriteString("Dist.:");
     1c6:	82 e8       	ldi	r24, 0x82	; 130
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
	LCD_WriteNumber(g_distance);
     1ce:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <g_distance>
     1d2:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <g_distance+0x1>
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <LCD_WriteNumber>
	LCD_WriteString(" Cm");
     1de:	89 e8       	ldi	r24, 0x89	; 137
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
     1e6:	08 95       	ret

000001e8 <car_Rotating>:
}

void car_Rotating()
{	
	while (car_mode == 0 && (g_distance <= 30 && g_distance > 20))
     1e8:	32 c0       	rjmp	.+100    	; 0x24e <car_Rotating+0x66>
	{
		
		US_getdistance(&g_distance);
     1ea:	80 e5       	ldi	r24, 0x50	; 80
     1ec:	91 e0       	ldi	r25, 0x01	; 1
     1ee:	0e 94 d1 05 	call	0xba2	; 0xba2 <US_getdistance>
		STOP_check ();
     1f2:	0e 94 8b 00 	call	0x116	; 0x116 <STOP_check>
		PWM_set_duty(30,100);
     1f6:	44 e6       	ldi	r20, 0x64	; 100
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	8e e1       	ldi	r24, 0x1E	; 30
     200:	0e 94 cc 09 	call	0x1398	; 0x1398 <PWM_set_duty>
		LCD_SetCursor(0,0);
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_SetCursor>
		LCD_WriteString("Speed:30% Dir:	R");
     20c:	8e e9       	ldi	r24, 0x9E	; 158
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
		LCD_SetCursor(1,0);
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_SetCursor>
		LCD_WriteString("Dist.:");
     21c:	82 e8       	ldi	r24, 0x82	; 130
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
		LCD_WriteNumber(g_distance);
     224:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <g_distance>
     228:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <g_distance+0x1>
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <LCD_WriteNumber>
		LCD_WriteString(" Cm");
     234:	89 e8       	ldi	r24, 0x89	; 137
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
		if (g_buttonCounter %2 == 0)
     23c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <g_buttonCounter>
     240:	80 fd       	sbrc	r24, 0
     242:	03 c0       	rjmp	.+6      	; 0x24a <car_Rotating+0x62>
		{
			Car_Rotate_Right();
     244:	0e 94 9a 05 	call	0xb34	; 0xb34 <Car_Rotate_Right>
     248:	02 c0       	rjmp	.+4      	; 0x24e <car_Rotating+0x66>
		}
		else
		{
			Car_Rotate_Left();
     24a:	0e 94 ac 05 	call	0xb58	; 0xb58 <Car_Rotate_Left>
	LCD_WriteString(" Cm");
}

void car_Rotating()
{	
	while (car_mode == 0 && (g_distance <= 30 && g_distance > 20))
     24e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <car_mode>
     252:	81 11       	cpse	r24, r1
     254:	0d c0       	rjmp	.+26     	; 0x270 <car_Rotating+0x88>
     256:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     25a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     25e:	4f 97       	sbiw	r24, 0x1f	; 31
     260:	38 f4       	brcc	.+14     	; 0x270 <car_Rotating+0x88>
     262:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     266:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     26a:	45 97       	sbiw	r24, 0x15	; 21
     26c:	08 f0       	brcs	.+2      	; 0x270 <car_Rotating+0x88>
     26e:	bd cf       	rjmp	.-134    	; 0x1ea <car_Rotating+0x2>
     270:	08 95       	ret

00000272 <car_Backword_30>:
	}
}

void car_Backword_30()
{
	while (g_distance <= 20)
     272:	2b c0       	rjmp	.+86     	; 0x2ca <car_Backword_30+0x58>
	{
		STOP_check();
     274:	0e 94 8b 00 	call	0x116	; 0x116 <STOP_check>
		US_getdistance(&g_distance);
     278:	80 e5       	ldi	r24, 0x50	; 80
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	0e 94 d1 05 	call	0xba2	; 0xba2 <US_getdistance>
		PWM_set_duty(30,100);
     280:	44 e6       	ldi	r20, 0x64	; 100
     282:	50 e0       	ldi	r21, 0x00	; 0
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	70 e0       	ldi	r23, 0x00	; 0
     288:	8e e1       	ldi	r24, 0x1E	; 30
     28a:	0e 94 cc 09 	call	0x1398	; 0x1398 <PWM_set_duty>
		Car_Moving_BWD();
     28e:	0e 94 76 05 	call	0xaec	; 0xaec <Car_Moving_BWD>
		LCD_SetCursor(0,0);
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_SetCursor>
		LCD_WriteString("Speed:30% Dir:	B");
     29a:	8f ea       	ldi	r24, 0xAF	; 175
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
		LCD_SetCursor(1,0);
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_SetCursor>
		LCD_WriteString("Dist.:");
     2aa:	82 e8       	ldi	r24, 0x82	; 130
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
		LCD_WriteNumber(g_distance);
     2b2:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <g_distance>
     2b6:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <g_distance+0x1>
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <LCD_WriteNumber>
		LCD_WriteString(" Cm");
     2c2:	89 e8       	ldi	r24, 0x89	; 137
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
	}
}

void car_Backword_30()
{
	while (g_distance <= 20)
     2ca:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     2ce:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     2d2:	45 97       	sbiw	r24, 0x15	; 21
     2d4:	78 f2       	brcs	.-98     	; 0x274 <car_Backword_30+0x2>
		LCD_WriteString("Dist.:");
		LCD_WriteNumber(g_distance);
		LCD_WriteString(" Cm");
	}
	
}
     2d6:	08 95       	ret

000002d8 <Car_Stopping>:

void Car_Stopping()
{
	PWM_set_duty(0,100);
     2d8:	44 e6       	ldi	r20, 0x64	; 100
     2da:	50 e0       	ldi	r21, 0x00	; 0
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	0e 94 cc 09 	call	0x1398	; 0x1398 <PWM_set_duty>
	Car_Stop();
     2e6:	0e 94 88 05 	call	0xb10	; 0xb10 <Car_Stop>
	LCD_SetCursor(0,0);
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_SetCursor>
	LCD_WriteString("Speed:00% Dir:	S");
     2f2:	80 ec       	ldi	r24, 0xC0	; 192
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
	LCD_SetCursor(1,0);
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_SetCursor>
	LCD_WriteString("Dist.:");
     302:	82 e8       	ldi	r24, 0x82	; 130
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
	LCD_WriteNumber(g_distance);
     30a:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <g_distance>
     30e:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <g_distance+0x1>
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <LCD_WriteNumber>
	LCD_WriteString(" Cm");
     31a:	89 e8       	ldi	r24, 0x89	; 137
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
     322:	08 95       	ret

00000324 <startStage>:
		}
	}
}

void startStage(void) 
{	
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	1f 92       	push	r1
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
	Button_State buttonState = 0;
     32e:	19 82       	std	Y+1, r1	; 0x01


	do {							
		KEYPAD_getpressedkey(&g_keyPressed);
     330:	86 e2       	ldi	r24, 0x26	; 38
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	0e 94 77 03 	call	0x6ee	; 0x6ee <KEYPAD_getpressedkey>
		} while (g_keyPressed != '1');				//Key 1 is pressed. 
     338:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <g_keyPressed>
     33c:	81 33       	cpi	r24, 0x31	; 49
     33e:	c1 f7       	brne	.-16     	; 0x330 <startStage+0xc>
	
	LCD_SetCursor(0, 0);
     340:	60 e0       	ldi	r22, 0x00	; 0
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_SetCursor>
	LCD_WriteString("Set Def Rot");
     348:	81 ed       	ldi	r24, 0xD1	; 209
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
	LCD_SetCursor(1, 0);
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_SetCursor>
	LCD_WriteString("Right");
     358:	8d ed       	ldi	r24, 0xDD	; 221
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
	
	ovf = 0;
     360:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ovf>
     364:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <ovf+0x1>
     368:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ovf+0x2>
     36c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ovf+0x3>
	mode_ovf = 156250;								//starts 5 seconds timer in ISR
     370:	8a e5       	ldi	r24, 0x5A	; 90
     372:	92 e6       	ldi	r25, 0x62	; 98
     374:	a2 e0       	ldi	r26, 0x02	; 2
     376:	b0 e0       	ldi	r27, 0x00	; 0
     378:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <mode_ovf>
     37c:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <mode_ovf+0x1>
     380:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <mode_ovf+0x2>
     384:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <mode_ovf+0x3>
	g_speed_flag = 1;
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <g_speed_flag>
	
	while (car_mode == 0)
     38e:	56 c0       	rjmp	.+172    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
	{
		Is_pressed(BUTTON_PIN, &buttonState);
     390:	be 01       	movw	r22, r28
     392:	6f 5f       	subi	r22, 0xFF	; 255
     394:	7f 4f       	sbci	r23, 0xFF	; 255
     396:	8e e1       	ldi	r24, 0x1E	; 30
     398:	0e 94 3e 03 	call	0x67c	; 0x67c <Is_pressed>
			if (buttonState == pressed)
     39c:	89 81       	ldd	r24, Y+1	; 0x01
     39e:	81 30       	cpi	r24, 0x01	; 1
     3a0:	79 f4       	brne	.+30     	; 0x3c0 <startStage+0x9c>
			{
				g_buttonCounter++;
     3a2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <g_buttonCounter>
     3a6:	8f 5f       	subi	r24, 0xFF	; 255
     3a8:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <g_buttonCounter>
				while (buttonState == pressed) {
     3ac:	06 c0       	rjmp	.+12     	; 0x3ba <startStage+0x96>
					Is_pressed(BUTTON_PIN, &buttonState);
     3ae:	be 01       	movw	r22, r28
     3b0:	6f 5f       	subi	r22, 0xFF	; 255
     3b2:	7f 4f       	sbci	r23, 0xFF	; 255
     3b4:	8e e1       	ldi	r24, 0x1E	; 30
     3b6:	0e 94 3e 03 	call	0x67c	; 0x67c <Is_pressed>
	{
		Is_pressed(BUTTON_PIN, &buttonState);
			if (buttonState == pressed)
			{
				g_buttonCounter++;
				while (buttonState == pressed) {
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	81 30       	cpi	r24, 0x01	; 1
     3be:	b9 f3       	breq	.-18     	; 0x3ae <startStage+0x8a>
					Is_pressed(BUTTON_PIN, &buttonState);
				}
			}
			if ( (g_buttonCounter % 2 == 0 || g_buttonCounter == 0) && lcdFlag == 0 )
     3c0:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <g_buttonCounter>
     3c4:	80 ff       	sbrs	r24, 0
     3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <startStage+0xac>
     3c8:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <g_buttonCounter>
     3cc:	81 11       	cpse	r24, r1
     3ce:	19 c0       	rjmp	.+50     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     3d0:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <lcdFlag>
     3d4:	81 11       	cpse	r24, r1
     3d6:	15 c0       	rjmp	.+42     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
			{
				LCD_SetCursor(0, 0);
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_SetCursor>
				LCD_WriteString("Set Def. Rot.");
     3de:	83 ee       	ldi	r24, 0xE3	; 227
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
				LCD_SetCursor(1, 0);
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_SetCursor>
				LCD_WriteString("Right");
     3ee:	8d ed       	ldi	r24, 0xDD	; 221
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
				lcdFlag = 1;
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <lcdFlag>
				lcdFlag2 = 0;
     3fc:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <lcdFlag2>
     400:	1d c0       	rjmp	.+58     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
			} 
			else if (lcdFlag2 == 0 && g_buttonCounter % 2 != 0)
     402:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <lcdFlag2>
     406:	81 11       	cpse	r24, r1
     408:	19 c0       	rjmp	.+50     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     40a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <g_buttonCounter>
     40e:	80 ff       	sbrs	r24, 0
     410:	15 c0       	rjmp	.+42     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
				{
					LCD_SetCursor(0, 0);
     412:	60 e0       	ldi	r22, 0x00	; 0
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_SetCursor>
					LCD_WriteString("Set Def. Rot.");
     41a:	83 ee       	ldi	r24, 0xE3	; 227
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
					LCD_SetCursor(1, 0);
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_SetCursor>
					LCD_WriteString("Left ");
     42a:	81 ef       	ldi	r24, 0xF1	; 241
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
					lcdFlag2 = 1;
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <lcdFlag2>
					lcdFlag = 0;
     438:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <lcdFlag>
	
	ovf = 0;
	mode_ovf = 156250;								//starts 5 seconds timer in ISR
	g_speed_flag = 1;
	
	while (car_mode == 0)
     43c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <car_mode>
     440:	88 23       	and	r24, r24
     442:	09 f4       	brne	.+2      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     444:	a5 cf       	rjmp	.-182    	; 0x390 <startStage+0x6c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     446:	2f ef       	ldi	r18, 0xFF	; 255
     448:	89 e6       	ldi	r24, 0x69	; 105
     44a:	98 e1       	ldi	r25, 0x18	; 24
     44c:	21 50       	subi	r18, 0x01	; 1
     44e:	80 40       	sbci	r24, 0x00	; 0
     450:	90 40       	sbci	r25, 0x00	; 0
     452:	e1 f7       	brne	.-8      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     454:	00 c0       	rjmp	.+0      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     456:	00 00       	nop
					lcdFlag2 = 1;
					lcdFlag = 0;
				}
	}
	_delay_ms(1000);
	g_start_Flag = 1;
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	car_mode =0;
     45e:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <car_mode>
	mode_ovf =0;
     462:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <mode_ovf>
     466:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <mode_ovf+0x1>
     46a:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <mode_ovf+0x2>
     46e:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <mode_ovf+0x3>
	g_speed_flag=0;
     472:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <g_speed_flag>
	ovf = 0;
     476:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ovf>
     47a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <ovf+0x1>
     47e:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ovf+0x2>
     482:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ovf+0x3>
}
     486:	0f 90       	pop	r0
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	08 95       	ret

0000048e <app_init>:



void app_init()
{
	LCD_PinsInit();
     48e:	0e 94 35 05 	call	0xa6a	; 0xa6a <LCD_PinsInit>
	LCD_Init();
     492:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_Init>
	GLOBALE_ENABLE();
     496:	78 94       	sei
	pwm_init();
     498:	0e 94 be 09 	call	0x137c	; 0x137c <pwm_init>
	Car_Motors_init();
     49c:	0e 94 52 05 	call	0xaa4	; 0xaa4 <Car_Motors_init>
	LCD_Init();
     4a0:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_Init>
	KEYPAD_init();
     4a4:	0e 94 5d 03 	call	0x6ba	; 0x6ba <KEYPAD_init>
	DIO_initpin(PIND6,INPULL);
     4a8:	62 e0       	ldi	r22, 0x02	; 2
     4aa:	8e e1       	ldi	r24, 0x1E	; 30
     4ac:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <DIO_initpin>
	DIO_Init_All();
     4b0:	0e 94 0b 07 	call	0xe16	; 0xe16 <DIO_Init_All>
	US_init();
     4b4:	0e 94 ce 05 	call	0xb9c	; 0xb9c <US_init>
	TIMER_2_INT();
     4b8:	0e 94 9c 0b 	call	0x1738	; 0x1738 <TIMER_2_INT>
	TIMER2_OV_SetCallBack(Speed_50_check);
     4bc:	89 e4       	ldi	r24, 0x49	; 73
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 a8 0b 	call	0x1750	; 0x1750 <TIMER2_OV_SetCallBack>
     4c4:	08 95       	ret

000004c6 <app_start>:
}

void app_start()
{
	
	startStage();
     4c6:	0e 94 92 01 	call	0x324	; 0x324 <startStage>
	
	
	while (g_start_Flag)
     4ca:	d3 c0       	rjmp	.+422    	; 0x672 <app_start+0x1ac>
	{
		STOP_check ();
     4cc:	0e 94 8b 00 	call	0x116	; 0x116 <STOP_check>
		US_getdistance(&g_distance);
     4d0:	80 e5       	ldi	r24, 0x50	; 80
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	0e 94 d1 05 	call	0xba2	; 0xba2 <US_getdistance>
		if (g_distance > 70 && car_mode == 0)
     4d8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     4dc:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     4e0:	87 34       	cpi	r24, 0x47	; 71
     4e2:	91 05       	cpc	r25, r1
     4e4:	b0 f0       	brcs	.+44     	; 0x512 <app_start+0x4c>
     4e6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <car_mode>
     4ea:	81 11       	cpse	r24, r1
     4ec:	12 c0       	rjmp	.+36     	; 0x512 <app_start+0x4c>
		{
			car_Forward_30();
     4ee:	0e 94 a8 00 	call	0x150	; 0x150 <car_Forward_30>
			g_speed_flag = 1;
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <g_speed_flag>
			mode_ovf = 156250;								//starts 5 sec. timer to increase the speed
     4f8:	8a e5       	ldi	r24, 0x5A	; 90
     4fa:	92 e6       	ldi	r25, 0x62	; 98
     4fc:	a2 e0       	ldi	r26, 0x02	; 2
     4fe:	b0 e0       	ldi	r27, 0x00	; 0
     500:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <mode_ovf>
     504:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <mode_ovf+0x1>
     508:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <mode_ovf+0x2>
     50c:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <mode_ovf+0x3>
     510:	b0 c0       	rjmp	.+352    	; 0x672 <app_start+0x1ac>
		}
		else if (car_mode == 1 && g_distance > 70)
     512:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <car_mode>
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	51 f4       	brne	.+20     	; 0x52e <app_start+0x68>
     51a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     51e:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     522:	87 34       	cpi	r24, 0x47	; 71
     524:	91 05       	cpc	r25, r1
     526:	18 f0       	brcs	.+6      	; 0x52e <app_start+0x68>
		{
			car_Forward_50();
     528:	0e 94 ce 00 	call	0x19c	; 0x19c <car_Forward_50>
     52c:	a2 c0       	rjmp	.+324    	; 0x672 <app_start+0x1ac>
		}
		else if (g_distance <= 70 && g_distance > 30)
     52e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     532:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     536:	87 34       	cpi	r24, 0x47	; 71
     538:	91 05       	cpc	r25, r1
     53a:	e8 f4       	brcc	.+58     	; 0x576 <app_start+0xb0>
     53c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     540:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     544:	4f 97       	sbiw	r24, 0x1f	; 31
     546:	b8 f0       	brcs	.+46     	; 0x576 <app_start+0xb0>
		{
			car_mode = 0;
     548:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <car_mode>
			mode_ovf=0;
     54c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <mode_ovf>
     550:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <mode_ovf+0x1>
     554:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <mode_ovf+0x2>
     558:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <mode_ovf+0x3>
			ovf = 0;
     55c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ovf>
     560:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <ovf+0x1>
     564:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ovf+0x2>
     568:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ovf+0x3>
			g_speed_flag =0;
     56c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <g_speed_flag>
			car_Forward_30();
     570:	0e 94 a8 00 	call	0x150	; 0x150 <car_Forward_30>
     574:	7e c0       	rjmp	.+252    	; 0x672 <app_start+0x1ac>
		}
		else if (g_distance <= 30 && g_distance > 20)
     576:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     57a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     57e:	4f 97       	sbiw	r24, 0x1f	; 31
     580:	08 f0       	brcs	.+2      	; 0x584 <app_start+0xbe>
     582:	6d c0       	rjmp	.+218    	; 0x65e <app_start+0x198>
     584:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     588:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     58c:	45 97       	sbiw	r24, 0x15	; 21
     58e:	08 f4       	brcc	.+2      	; 0x592 <app_start+0xcc>
     590:	66 c0       	rjmp	.+204    	; 0x65e <app_start+0x198>
		{
			Car_Stopping();
     592:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Car_Stopping>
			g_speed_flag = 1;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <g_speed_flag>
			ovf = 0;
     59c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ovf>
     5a0:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <ovf+0x1>
     5a4:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ovf+0x2>
     5a8:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ovf+0x3>
			mode_ovf = 62500;								//starts 2 sec. timer for 90 degree representation
     5ac:	84 e2       	ldi	r24, 0x24	; 36
     5ae:	94 ef       	ldi	r25, 0xF4	; 244
     5b0:	a0 e0       	ldi	r26, 0x00	; 0
     5b2:	b0 e0       	ldi	r27, 0x00	; 0
     5b4:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <mode_ovf>
     5b8:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <mode_ovf+0x1>
     5bc:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <mode_ovf+0x2>
     5c0:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <mode_ovf+0x3>
					
			car_Rotating();
     5c4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <car_Rotating>
						
			car_mode = 0;
     5c8:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <car_mode>
			mode_ovf = 0;
     5cc:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <mode_ovf>
     5d0:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <mode_ovf+0x1>
     5d4:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <mode_ovf+0x2>
     5d8:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <mode_ovf+0x3>
			g_speed_flag = 0;
     5dc:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <g_speed_flag>
			g_Rotate_Counter++;
     5e0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     5e4:	8f 5f       	subi	r24, 0xFF	; 255
     5e6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
			if (g_Rotate_Counter == 4)
     5ea:	84 30       	cpi	r24, 0x04	; 4
     5ec:	09 f0       	breq	.+2      	; 0x5f0 <app_start+0x12a>
     5ee:	41 c0       	rjmp	.+130    	; 0x672 <app_start+0x1ac>
     5f0:	29 c0       	rjmp	.+82     	; 0x644 <app_start+0x17e>
			{
				while (g_distance <= 30 && g_distance > 20)
				{
					US_getdistance(&g_distance);
     5f2:	80 e5       	ldi	r24, 0x50	; 80
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	0e 94 d1 05 	call	0xba2	; 0xba2 <US_getdistance>
					PWM_set_duty(0,100);
     5fa:	44 e6       	ldi	r20, 0x64	; 100
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	60 e0       	ldi	r22, 0x00	; 0
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	0e 94 cc 09 	call	0x1398	; 0x1398 <PWM_set_duty>
					Car_Stop();
     608:	0e 94 88 05 	call	0xb10	; 0xb10 <Car_Stop>
					LCD_SetCursor(0,0);
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_SetCursor>
					LCD_WriteString("Speed:00% Dir:	S");
     614:	80 ec       	ldi	r24, 0xC0	; 192
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
					LCD_SetCursor(1,0);
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_SetCursor>
					LCD_WriteString("Dist.:");
     624:	82 e8       	ldi	r24, 0x82	; 130
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
					LCD_WriteNumber(g_distance);
     62c:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <g_distance>
     630:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <g_distance+0x1>
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <LCD_WriteNumber>
					LCD_WriteString(" Cm");
     63c:	89 e8       	ldi	r24, 0x89	; 137
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteString>
			mode_ovf = 0;
			g_speed_flag = 0;
			g_Rotate_Counter++;
			if (g_Rotate_Counter == 4)
			{
				while (g_distance <= 30 && g_distance > 20)
     644:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     648:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     64c:	4f 97       	sbiw	r24, 0x1f	; 31
     64e:	88 f4       	brcc	.+34     	; 0x672 <app_start+0x1ac>
     650:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     654:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     658:	45 97       	sbiw	r24, 0x15	; 21
     65a:	58 f6       	brcc	.-106    	; 0x5f2 <app_start+0x12c>
     65c:	0a c0       	rjmp	.+20     	; 0x672 <app_start+0x1ac>
				}
				
			}
		}
		
		else if (g_distance <= 20)
     65e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_distance>
     662:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_distance+0x1>
     666:	45 97       	sbiw	r24, 0x15	; 21
     668:	20 f4       	brcc	.+8      	; 0x672 <app_start+0x1ac>
		{
			Car_Stopping();
     66a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Car_Stopping>
			car_Backword_30();
     66e:	0e 94 39 01 	call	0x272	; 0x272 <car_Backword_30>
{
	
	startStage();
	
	
	while (g_start_Flag)
     672:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     676:	81 11       	cpse	r24, r1
     678:	29 cf       	rjmp	.-430    	; 0x4cc <app_start+0x6>
		{
			Car_Stopping();
			car_Backword_30();
		}
	}
     67a:	08 95       	ret

0000067c <Is_pressed>:

#include "button_interface.h"
#include "button_config.h"
//static u8 button_press = 0 ; /** GLOBAL VARIABLE TO CHECK THE NUMBER OF PRESSED TIMES **/

Button_State Is_pressed(u8 BUTTON_PIN , u8* value){
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	1f 92       	push	r1
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	8b 01       	movw	r16, r22
	
	Button_State state = Notpressed; 
	en_dioError_t status_pin = WRONG_VALUE;
	
	u8 value_check = 0 ;
     68c:	19 82       	std	Y+1, r1	; 0x01
	
	status_pin =  DIO_readpin (BUTTON_PIN, &value_check);
     68e:	be 01       	movw	r22, r28
     690:	6f 5f       	subi	r22, 0xFF	; 255
     692:	7f 4f       	sbci	r23, 0xFF	; 255
     694:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_readpin>
	
	if (!status_pin)
     698:	81 11       	cpse	r24, r1
     69a:	05 c0       	rjmp	.+10     	; 0x6a6 <Is_pressed+0x2a>
	{
		state = pressed ; 
		*value = value_check ;
     69c:	89 81       	ldd	r24, Y+1	; 0x01
     69e:	f8 01       	movw	r30, r16
     6a0:	80 83       	st	Z, r24
	
	status_pin =  DIO_readpin (BUTTON_PIN, &value_check);
	
	if (!status_pin)
	{
		state = pressed ; 
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	04 c0       	rjmp	.+8      	; 0x6ae <Is_pressed+0x32>
	}
	
	else
	{
		state = Notpressed ; 
		*value = value_check ;
     6a6:	89 81       	ldd	r24, Y+1	; 0x01
     6a8:	f8 01       	movw	r30, r16
     6aa:	80 83       	st	Z, r24
		*value = value_check ;
	}
	
	else
	{
		state = Notpressed ; 
     6ac:	80 e0       	ldi	r24, 0x00	; 0
		*value = value_check ;
	}
	
	return state ; 
	
} 
     6ae:	0f 90       	pop	r0
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	1f 91       	pop	r17
     6b6:	0f 91       	pop	r16
     6b8:	08 95       	ret

000006ba <KEYPAD_init>:
		{BUTTON7, BUTTON8, BUTTON9}};
			
KEYPAD_initError KEYPAD_init(void){
	
	/*Set Column Initial Values to 1 */
	DIO_writepin (COL_1,HIGH);
     6ba:	61 e0       	ldi	r22, 0x01	; 1
     6bc:	88 e1       	ldi	r24, 0x18	; 24
     6be:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	DIO_writepin (COL_2,HIGH);
     6c2:	61 e0       	ldi	r22, 0x01	; 1
     6c4:	89 e1       	ldi	r24, 0x19	; 25
     6c6:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	DIO_writepin (COL_3,HIGH);
     6ca:	61 e0       	ldi	r22, 0x01	; 1
     6cc:	8a e1       	ldi	r24, 0x1A	; 26
     6ce:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	
	/* Enable Pull Up Resistors at Input Rows */
	DIO_writepin (ROW_1,HIGH);
     6d2:	61 e0       	ldi	r22, 0x01	; 1
     6d4:	84 e0       	ldi	r24, 0x04	; 4
     6d6:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	DIO_writepin (ROW_2,HIGH);
     6da:	61 e0       	ldi	r22, 0x01	; 1
     6dc:	85 e0       	ldi	r24, 0x05	; 5
     6de:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	DIO_writepin (ROW_3,HIGH);
     6e2:	61 e0       	ldi	r22, 0x01	; 1
     6e4:	86 e0       	ldi	r24, 0x06	; 6
     6e6:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	
	return KEYPAD_initSuccess;
	
}
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	08 95       	ret

000006ee <KEYPAD_getpressedkey>:


KEYPAD_readError KEYPAD_getpressedkey(u8 *value){
     6ee:	cf 92       	push	r12
     6f0:	df 92       	push	r13
     6f2:	ef 92       	push	r14
     6f4:	ff 92       	push	r15
     6f6:	0f 93       	push	r16
     6f8:	1f 93       	push	r17
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	8c 01       	movw	r16, r24

	// Scan all keypad rows
	for (u8 counter_row = 0; counter_row < KEYPAD_ROWS; counter_row++)
     700:	d0 e0       	ldi	r29, 0x00	; 0
     702:	39 c0       	rjmp	.+114    	; 0x776 <KEYPAD_getpressedkey+0x88>
	{
		 // set current column pin low to test all row pins to find out which button has been pressed
		DIO_writepin (Row_Arr[counter_row],LOW);
     704:	cd 2e       	mov	r12, r29
     706:	d1 2c       	mov	r13, r1
     708:	f6 01       	movw	r30, r12
     70a:	ef 59       	subi	r30, 0x9F	; 159
     70c:	ff 4f       	sbci	r31, 0xFF	; 255
     70e:	60 e0       	ldi	r22, 0x00	; 0
     710:	80 81       	ld	r24, Z
     712:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
		
		//scan and test all keypad columns pins
		 for (u8 counter_col = 0; counter_col < KEYPAD_COLUMNS; counter_col++)
     716:	c0 e0       	ldi	r28, 0x00	; 0
     718:	24 c0       	rjmp	.+72     	; 0x762 <KEYPAD_getpressedkey+0x74>
		 {
			 
			 // check col value if it is 0 then this column and row is connected
			 DIO_readpin (Col_Arr[counter_col],value);
     71a:	ec 2e       	mov	r14, r28
     71c:	f1 2c       	mov	r15, r1
     71e:	f7 01       	movw	r30, r14
     720:	ec 59       	subi	r30, 0x9C	; 156
     722:	ff 4f       	sbci	r31, 0xFF	; 255
     724:	b8 01       	movw	r22, r16
     726:	80 81       	ld	r24, Z
     728:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_readpin>
			 
			 if(*value == 0){
     72c:	f8 01       	movw	r30, r16
     72e:	80 81       	ld	r24, Z
     730:	81 11       	cpse	r24, r1
     732:	16 c0       	rjmp	.+44     	; 0x760 <KEYPAD_getpressedkey+0x72>
				 
				 *value= Button_Arr[counter_row][counter_col];
     734:	c6 01       	movw	r24, r12
     736:	88 0f       	add	r24, r24
     738:	99 1f       	adc	r25, r25
     73a:	8c 0d       	add	r24, r12
     73c:	9d 1d       	adc	r25, r13
     73e:	89 50       	subi	r24, 0x09	; 9
     740:	9f 4f       	sbci	r25, 0xFF	; 255
     742:	fc 01       	movw	r30, r24
     744:	ee 0d       	add	r30, r14
     746:	ff 1d       	adc	r31, r15
     748:	80 81       	ld	r24, Z
     74a:	f8 01       	movw	r30, r16
     74c:	80 83       	st	Z, r24
				 DIO_writepin (Row_Arr[counter_row],HIGH);
     74e:	f6 01       	movw	r30, r12
     750:	ef 59       	subi	r30, 0x9F	; 159
     752:	ff 4f       	sbci	r31, 0xFF	; 255
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	80 81       	ld	r24, Z
     758:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
				  return KEYPAD_readSuccess;
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	0e c0       	rjmp	.+28     	; 0x77c <KEYPAD_getpressedkey+0x8e>
	{
		 // set current column pin low to test all row pins to find out which button has been pressed
		DIO_writepin (Row_Arr[counter_row],LOW);
		
		//scan and test all keypad columns pins
		 for (u8 counter_col = 0; counter_col < KEYPAD_COLUMNS; counter_col++)
     760:	cf 5f       	subi	r28, 0xFF	; 255
     762:	c3 30       	cpi	r28, 0x03	; 3
     764:	d0 f2       	brcs	.-76     	; 0x71a <KEYPAD_getpressedkey+0x2c>
			 }

		}
		
		// set current row pin HIGH again
		DIO_writepin (Row_Arr[counter_row],HIGH);
     766:	f6 01       	movw	r30, r12
     768:	ef 59       	subi	r30, 0x9F	; 159
     76a:	ff 4f       	sbci	r31, 0xFF	; 255
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	80 81       	ld	r24, Z
     770:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>


KEYPAD_readError KEYPAD_getpressedkey(u8 *value){

	// Scan all keypad rows
	for (u8 counter_row = 0; counter_row < KEYPAD_ROWS; counter_row++)
     774:	df 5f       	subi	r29, 0xFF	; 255
     776:	d3 30       	cpi	r29, 0x03	; 3
     778:	28 f2       	brcs	.-118    	; 0x704 <KEYPAD_getpressedkey+0x16>
		// set current row pin HIGH again
		DIO_writepin (Row_Arr[counter_row],HIGH);

	}
	
	return KEYPAD_readFail;
     77a:	81 e0       	ldi	r24, 0x01	; 1

}
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	df 90       	pop	r13
     78a:	cf 90       	pop	r12
     78c:	08 95       	ret

0000078e <WriteIns>:
	for(u8 i=0;i<8;i++)
	{
		WriteData(pattern[i]);
	}
	WriteIns(0x80);
}
     78e:	cf 93       	push	r28
     790:	c8 2f       	mov	r28, r24
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	81 e1       	ldi	r24, 0x11	; 17
     796:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     79a:	6c 2f       	mov	r22, r28
     79c:	66 1f       	adc	r22, r22
     79e:	66 27       	eor	r22, r22
     7a0:	66 1f       	adc	r22, r22
     7a2:	87 e1       	ldi	r24, 0x17	; 23
     7a4:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     7a8:	c6 fb       	bst	r28, 6
     7aa:	66 27       	eor	r22, r22
     7ac:	60 f9       	bld	r22, 0
     7ae:	86 e1       	ldi	r24, 0x16	; 22
     7b0:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     7b4:	c5 fb       	bst	r28, 5
     7b6:	66 27       	eor	r22, r22
     7b8:	60 f9       	bld	r22, 0
     7ba:	85 e1       	ldi	r24, 0x15	; 21
     7bc:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     7c0:	c4 fb       	bst	r28, 4
     7c2:	66 27       	eor	r22, r22
     7c4:	60 f9       	bld	r22, 0
     7c6:	84 e1       	ldi	r24, 0x14	; 20
     7c8:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     7cc:	61 e0       	ldi	r22, 0x01	; 1
     7ce:	83 e1       	ldi	r24, 0x13	; 19
     7d0:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     7d4:	8f e9       	ldi	r24, 0x9F	; 159
     7d6:	9f e0       	ldi	r25, 0x0F	; 15
     7d8:	01 97       	sbiw	r24, 0x01	; 1
     7da:	f1 f7       	brne	.-4      	; 0x7d8 <WriteIns+0x4a>
     7dc:	00 c0       	rjmp	.+0      	; 0x7de <WriteIns+0x50>
     7de:	00 00       	nop
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	83 e1       	ldi	r24, 0x13	; 19
     7e4:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     7e8:	8f e9       	ldi	r24, 0x9F	; 159
     7ea:	9f e0       	ldi	r25, 0x0F	; 15
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <WriteIns+0x5e>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <WriteIns+0x64>
     7f2:	00 00       	nop
     7f4:	c3 fb       	bst	r28, 3
     7f6:	66 27       	eor	r22, r22
     7f8:	60 f9       	bld	r22, 0
     7fa:	87 e1       	ldi	r24, 0x17	; 23
     7fc:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     800:	c2 fb       	bst	r28, 2
     802:	66 27       	eor	r22, r22
     804:	60 f9       	bld	r22, 0
     806:	86 e1       	ldi	r24, 0x16	; 22
     808:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     80c:	c1 fb       	bst	r28, 1
     80e:	66 27       	eor	r22, r22
     810:	60 f9       	bld	r22, 0
     812:	85 e1       	ldi	r24, 0x15	; 21
     814:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     818:	6c 2f       	mov	r22, r28
     81a:	61 70       	andi	r22, 0x01	; 1
     81c:	84 e1       	ldi	r24, 0x14	; 20
     81e:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     822:	61 e0       	ldi	r22, 0x01	; 1
     824:	83 e1       	ldi	r24, 0x13	; 19
     826:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     82a:	8f e9       	ldi	r24, 0x9F	; 159
     82c:	9f e0       	ldi	r25, 0x0F	; 15
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	f1 f7       	brne	.-4      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     832:	00 c0       	rjmp	.+0      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     834:	00 00       	nop
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	83 e1       	ldi	r24, 0x13	; 19
     83a:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     83e:	8f e9       	ldi	r24, 0x9F	; 159
     840:	9f e0       	ldi	r25, 0x0F	; 15
     842:	01 97       	sbiw	r24, 0x01	; 1
     844:	f1 f7       	brne	.-4      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     846:	00 c0       	rjmp	.+0      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     848:	00 00       	nop
     84a:	cf 91       	pop	r28
     84c:	08 95       	ret

0000084e <WriteData>:
     84e:	cf 93       	push	r28
     850:	c8 2f       	mov	r28, r24
     852:	61 e0       	ldi	r22, 0x01	; 1
     854:	81 e1       	ldi	r24, 0x11	; 17
     856:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     85a:	6c 2f       	mov	r22, r28
     85c:	66 1f       	adc	r22, r22
     85e:	66 27       	eor	r22, r22
     860:	66 1f       	adc	r22, r22
     862:	87 e1       	ldi	r24, 0x17	; 23
     864:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     868:	c6 fb       	bst	r28, 6
     86a:	66 27       	eor	r22, r22
     86c:	60 f9       	bld	r22, 0
     86e:	86 e1       	ldi	r24, 0x16	; 22
     870:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     874:	c5 fb       	bst	r28, 5
     876:	66 27       	eor	r22, r22
     878:	60 f9       	bld	r22, 0
     87a:	85 e1       	ldi	r24, 0x15	; 21
     87c:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     880:	c4 fb       	bst	r28, 4
     882:	66 27       	eor	r22, r22
     884:	60 f9       	bld	r22, 0
     886:	84 e1       	ldi	r24, 0x14	; 20
     888:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	83 e1       	ldi	r24, 0x13	; 19
     890:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     894:	8f e9       	ldi	r24, 0x9F	; 159
     896:	9f e0       	ldi	r25, 0x0F	; 15
     898:	01 97       	sbiw	r24, 0x01	; 1
     89a:	f1 f7       	brne	.-4      	; 0x898 <__stack+0x39>
     89c:	00 c0       	rjmp	.+0      	; 0x89e <__stack+0x3f>
     89e:	00 00       	nop
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	83 e1       	ldi	r24, 0x13	; 19
     8a4:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     8a8:	8f e9       	ldi	r24, 0x9F	; 159
     8aa:	9f e0       	ldi	r25, 0x0F	; 15
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <__stack+0x4d>
     8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <__stack+0x53>
     8b2:	00 00       	nop
     8b4:	c3 fb       	bst	r28, 3
     8b6:	66 27       	eor	r22, r22
     8b8:	60 f9       	bld	r22, 0
     8ba:	87 e1       	ldi	r24, 0x17	; 23
     8bc:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     8c0:	c2 fb       	bst	r28, 2
     8c2:	66 27       	eor	r22, r22
     8c4:	60 f9       	bld	r22, 0
     8c6:	86 e1       	ldi	r24, 0x16	; 22
     8c8:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     8cc:	c1 fb       	bst	r28, 1
     8ce:	66 27       	eor	r22, r22
     8d0:	60 f9       	bld	r22, 0
     8d2:	85 e1       	ldi	r24, 0x15	; 21
     8d4:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     8d8:	6c 2f       	mov	r22, r28
     8da:	61 70       	andi	r22, 0x01	; 1
     8dc:	84 e1       	ldi	r24, 0x14	; 20
     8de:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	83 e1       	ldi	r24, 0x13	; 19
     8e6:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     8ea:	8f e9       	ldi	r24, 0x9F	; 159
     8ec:	9f e0       	ldi	r25, 0x0F	; 15
     8ee:	01 97       	sbiw	r24, 0x01	; 1
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <__stack+0x8f>
     8f2:	00 c0       	rjmp	.+0      	; 0x8f4 <__stack+0x95>
     8f4:	00 00       	nop
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	83 e1       	ldi	r24, 0x13	; 19
     8fa:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
     8fe:	8f e9       	ldi	r24, 0x9F	; 159
     900:	9f e0       	ldi	r25, 0x0F	; 15
     902:	01 97       	sbiw	r24, 0x01	; 1
     904:	f1 f7       	brne	.-4      	; 0x902 <__stack+0xa3>
     906:	00 c0       	rjmp	.+0      	; 0x908 <__stack+0xa9>
     908:	00 00       	nop
     90a:	cf 91       	pop	r28
     90c:	08 95       	ret

0000090e <LCD_Init>:
     90e:	2f ef       	ldi	r18, 0xFF	; 255
     910:	80 e7       	ldi	r24, 0x70	; 112
     912:	92 e0       	ldi	r25, 0x02	; 2
     914:	21 50       	subi	r18, 0x01	; 1
     916:	80 40       	sbci	r24, 0x00	; 0
     918:	90 40       	sbci	r25, 0x00	; 0
     91a:	e1 f7       	brne	.-8      	; 0x914 <LCD_Init+0x6>
     91c:	00 c0       	rjmp	.+0      	; 0x91e <LCD_Init+0x10>
     91e:	00 00       	nop
     920:	82 e0       	ldi	r24, 0x02	; 2
     922:	0e 94 c7 03 	call	0x78e	; 0x78e <WriteIns>
     926:	88 e2       	ldi	r24, 0x28	; 40
     928:	0e 94 c7 03 	call	0x78e	; 0x78e <WriteIns>
     92c:	8c e0       	ldi	r24, 0x0C	; 12
     92e:	0e 94 c7 03 	call	0x78e	; 0x78e <WriteIns>
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	0e 94 c7 03 	call	0x78e	; 0x78e <WriteIns>
     938:	8f e9       	ldi	r24, 0x9F	; 159
     93a:	9f e0       	ldi	r25, 0x0F	; 15
     93c:	01 97       	sbiw	r24, 0x01	; 1
     93e:	f1 f7       	brne	.-4      	; 0x93c <LCD_Init+0x2e>
     940:	00 c0       	rjmp	.+0      	; 0x942 <LCD_Init+0x34>
     942:	00 00       	nop
     944:	86 e0       	ldi	r24, 0x06	; 6
     946:	0e 94 c7 03 	call	0x78e	; 0x78e <WriteIns>
     94a:	08 95       	ret

0000094c <LCD_WriteChar>:
     94c:	0e 94 27 04 	call	0x84e	; 0x84e <WriteData>
     950:	08 95       	ret

00000952 <LCD_WriteString>:
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	8c 01       	movw	r16, r24
     95a:	c0 e0       	ldi	r28, 0x00	; 0
     95c:	03 c0       	rjmp	.+6      	; 0x964 <LCD_WriteString+0x12>
     95e:	0e 94 a6 04 	call	0x94c	; 0x94c <LCD_WriteChar>
     962:	cf 5f       	subi	r28, 0xFF	; 255
     964:	f8 01       	movw	r30, r16
     966:	ec 0f       	add	r30, r28
     968:	f1 1d       	adc	r31, r1
     96a:	80 81       	ld	r24, Z
     96c:	81 11       	cpse	r24, r1
     96e:	f7 cf       	rjmp	.-18     	; 0x95e <LCD_WriteString+0xc>
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	08 95       	ret

00000978 <LCD_SetCursor>:
     978:	81 11       	cpse	r24, r1
     97a:	05 c0       	rjmp	.+10     	; 0x986 <LCD_SetCursor+0xe>
     97c:	86 2f       	mov	r24, r22
     97e:	80 68       	ori	r24, 0x80	; 128
     980:	0e 94 c7 03 	call	0x78e	; 0x78e <WriteIns>
     984:	08 95       	ret
     986:	81 30       	cpi	r24, 0x01	; 1
     988:	21 f4       	brne	.+8      	; 0x992 <LCD_SetCursor+0x1a>
     98a:	80 ec       	ldi	r24, 0xC0	; 192
     98c:	86 0f       	add	r24, r22
     98e:	0e 94 c7 03 	call	0x78e	; 0x78e <WriteIns>
     992:	08 95       	ret

00000994 <LCD_Clear>:
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	0e 94 c7 03 	call	0x78e	; 0x78e <WriteIns>
     99a:	8f e9       	ldi	r24, 0x9F	; 159
     99c:	9f e0       	ldi	r25, 0x0F	; 15
     99e:	01 97       	sbiw	r24, 0x01	; 1
     9a0:	f1 f7       	brne	.-4      	; 0x99e <LCD_Clear+0xa>
     9a2:	00 c0       	rjmp	.+0      	; 0x9a4 <LCD_Clear+0x10>
     9a4:	00 00       	nop
     9a6:	08 95       	ret

000009a8 <LCD_WriteNumber>:
     9a8:	cf 92       	push	r12
     9aa:	df 92       	push	r13
     9ac:	ef 92       	push	r14
     9ae:	ff 92       	push	r15
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
     9ba:	2a 97       	sbiw	r28, 0x0a	; 10
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	6b 01       	movw	r12, r22
     9c8:	7c 01       	movw	r14, r24
     9ca:	61 15       	cp	r22, r1
     9cc:	71 05       	cpc	r23, r1
     9ce:	81 05       	cpc	r24, r1
     9d0:	91 05       	cpc	r25, r1
     9d2:	21 f4       	brne	.+8      	; 0x9dc <LCD_WriteNumber+0x34>
     9d4:	80 e3       	ldi	r24, 0x30	; 48
     9d6:	0e 94 a6 04 	call	0x94c	; 0x94c <LCD_WriteChar>
     9da:	39 c0       	rjmp	.+114    	; 0xa4e <LCD_WriteNumber+0xa6>
     9dc:	99 23       	and	r25, r25
     9de:	5c f4       	brge	.+22     	; 0x9f6 <LCD_WriteNumber+0x4e>
     9e0:	f0 94       	com	r15
     9e2:	e0 94       	com	r14
     9e4:	d0 94       	com	r13
     9e6:	c0 94       	com	r12
     9e8:	c1 1c       	adc	r12, r1
     9ea:	d1 1c       	adc	r13, r1
     9ec:	e1 1c       	adc	r14, r1
     9ee:	f1 1c       	adc	r15, r1
     9f0:	8d e2       	ldi	r24, 0x2D	; 45
     9f2:	0e 94 a6 04 	call	0x94c	; 0x94c <LCD_WriteChar>
     9f6:	10 e0       	ldi	r17, 0x00	; 0
     9f8:	15 c0       	rjmp	.+42     	; 0xa24 <LCD_WriteNumber+0x7c>
     9fa:	c7 01       	movw	r24, r14
     9fc:	b6 01       	movw	r22, r12
     9fe:	2a e0       	ldi	r18, 0x0A	; 10
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <__divmodsi4>
     a0a:	e1 e0       	ldi	r30, 0x01	; 1
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	ec 0f       	add	r30, r28
     a10:	fd 1f       	adc	r31, r29
     a12:	e1 0f       	add	r30, r17
     a14:	f1 1d       	adc	r31, r1
     a16:	60 5d       	subi	r22, 0xD0	; 208
     a18:	60 83       	st	Z, r22
     a1a:	1f 5f       	subi	r17, 0xFF	; 255
     a1c:	c2 2e       	mov	r12, r18
     a1e:	d3 2e       	mov	r13, r19
     a20:	e4 2e       	mov	r14, r20
     a22:	f5 2e       	mov	r15, r21
     a24:	c1 14       	cp	r12, r1
     a26:	d1 04       	cpc	r13, r1
     a28:	e1 04       	cpc	r14, r1
     a2a:	f1 04       	cpc	r15, r1
     a2c:	31 f7       	brne	.-52     	; 0x9fa <LCD_WriteNumber+0x52>
     a2e:	0d c0       	rjmp	.+26     	; 0xa4a <LCD_WriteNumber+0xa2>
     a30:	e1 2f       	mov	r30, r17
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	31 97       	sbiw	r30, 0x01	; 1
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	8c 0f       	add	r24, r28
     a3c:	9d 1f       	adc	r25, r29
     a3e:	e8 0f       	add	r30, r24
     a40:	f9 1f       	adc	r31, r25
     a42:	80 81       	ld	r24, Z
     a44:	0e 94 a6 04 	call	0x94c	; 0x94c <LCD_WriteChar>
     a48:	11 50       	subi	r17, 0x01	; 1
     a4a:	11 11       	cpse	r17, r1
     a4c:	f1 cf       	rjmp	.-30     	; 0xa30 <LCD_WriteNumber+0x88>
     a4e:	2a 96       	adiw	r28, 0x0a	; 10
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	f8 94       	cli
     a54:	de bf       	out	0x3e, r29	; 62
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	cd bf       	out	0x3d, r28	; 61
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	1f 91       	pop	r17
     a60:	ff 90       	pop	r15
     a62:	ef 90       	pop	r14
     a64:	df 90       	pop	r13
     a66:	cf 90       	pop	r12
     a68:	08 95       	ret

00000a6a <LCD_PinsInit>:
   void LCD_PinsInit ()
   {
	   DIO_initpin(RS,OUTPUT);
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	81 e1       	ldi	r24, 0x11	; 17
     a6e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <DIO_initpin>
	   DIO_initpin(EN,OUTPUT);
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	83 e1       	ldi	r24, 0x13	; 19
     a76:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <DIO_initpin>
	   DIO_initpin(RW,OUTPUT);
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	82 e1       	ldi	r24, 0x12	; 18
     a7e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <DIO_initpin>
	   DIO_initpin(D4,OUTPUT);
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	84 e1       	ldi	r24, 0x14	; 20
     a86:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <DIO_initpin>
	   DIO_initpin(D5,OUTPUT);
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	85 e1       	ldi	r24, 0x15	; 21
     a8e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <DIO_initpin>
	   DIO_initpin(D6,OUTPUT);
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	86 e1       	ldi	r24, 0x16	; 22
     a96:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <DIO_initpin>
	   DIO_initpin(D7,OUTPUT);
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	87 e1       	ldi	r24, 0x17	; 23
     a9e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <DIO_initpin>
     aa2:	08 95       	ret

00000aa4 <Car_Motors_init>:
/**DESCRIPTION:-
  this function initializes the DIO pins connected to the motors to be output
  **/
en_MotorError_t Car_Motors_init (void)
{
	DIO_initpin(motor1_0,OUTPUT);
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <DIO_initpin>
	DIO_initpin(motor1_1,OUTPUT);
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <DIO_initpin>
	DIO_initpin(motor2_0,OUTPUT);
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <DIO_initpin>
	DIO_initpin(motor2_1,OUTPUT);
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	83 e0       	ldi	r24, 0x03	; 3
     ac0:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <DIO_initpin>

	return motor_ok;
}
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	08 95       	ret

00000ac8 <Car_Moving_FWD>:
/**DESCRIPTION:-
this function is used to drive the motor to move in the +VE direction which will lead the car to move FWD
**/
en_MotorError_t Car_Moving_FWD(void)
{
	DIO_writepin(motor1_0,LOW);          //this is used to provide voltage to the +ve pin of the motor 
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	DIO_writepin(motor1_1,HIGH);           //this is used to provide the ground to the -ve pin of 
     ad0:	61 e0       	ldi	r22, 0x01	; 1
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	DIO_writepin(motor2_0,LOW);
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	82 e0       	ldi	r24, 0x02	; 2
     adc:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	DIO_writepin(motor2_1,HIGH);
     ae0:	61 e0       	ldi	r22, 0x01	; 1
     ae2:	83 e0       	ldi	r24, 0x03	; 3
     ae4:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	
	return motor_ok;

}
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	08 95       	ret

00000aec <Car_Moving_BWD>:
/**DESCRIPTION:-
this function is used to drive the motor to move in the -VE direction which will lead the car to move BWD
**/
en_MotorError_t Car_Moving_BWD(void)
{
	DIO_writepin(motor1_0,HIGH);          //this is used to provide voltage to the -ve pin of the motor
     aec:	61 e0       	ldi	r22, 0x01	; 1
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	DIO_writepin(motor1_1,LOW);           //this is used to provide the ground to the +ve pin of
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	DIO_writepin(motor2_0,HIGH);
     afc:	61 e0       	ldi	r22, 0x01	; 1
     afe:	82 e0       	ldi	r24, 0x02	; 2
     b00:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	DIO_writepin(motor2_1,LOW);
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	83 e0       	ldi	r24, 0x03	; 3
     b08:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	
	return motor_ok;
}
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	08 95       	ret

00000b10 <Car_Stop>:
this function is used to stop the 4 wheels by stopping the 4 motors*/
en_MotorError_t Car_Stop(void)
{
	
	
  DIO_writepin(motor1_0,LOW);          
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
  DIO_writepin(motor1_1,LOW);           
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
  DIO_writepin(motor2_0,LOW);
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
  DIO_writepin(motor2_1,LOW);
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	83 e0       	ldi	r24, 0x03	; 3
     b2c:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>

	return motor_ok;
}
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	08 95       	ret

00000b34 <Car_Rotate_Right>:
this function is used to drive the right wheels to move BWD, and the left wheels to move FWD,
which will lead to rotation of the car */
en_MotorError_t Car_Rotate_Right(void)
{
	//this is used to provide the ground to the -ve pin of
	DIO_writepin(motor1_0,HIGH);
     b34:	61 e0       	ldi	r22, 0x01	; 1
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	DIO_writepin(motor1_1,LOW);
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	
	//this is used to provide voltage to the +ve pin of the motor
	DIO_writepin(motor2_0,LOW);
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	82 e0       	ldi	r24, 0x02	; 2
     b48:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	DIO_writepin(motor2_1,HIGH);
     b4c:	61 e0       	ldi	r22, 0x01	; 1
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>

	return motor_ok;
}
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	08 95       	ret

00000b58 <Car_Rotate_Left>:
this function is used to drive the right wheels to move FWD, and the left wheels to move BWD,
which will lead to rotation of the car */
en_MotorError_t Car_Rotate_Left(void)
{
	//this is used to provide the ground to the +ve pin of
	DIO_writepin(motor1_0,LOW);
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	DIO_writepin(motor1_1,HIGH);
     b60:	61 e0       	ldi	r22, 0x01	; 1
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	
	//this is used to provide voltage to the -ve pin of the motor
	DIO_writepin(motor2_0,HIGH);
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	DIO_writepin(motor2_1,LOW);
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	83 e0       	ldi	r24, 0x03	; 3
     b74:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>

	return motor_ok;
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	08 95       	ret

00000b7c <US_trigger>:
	ICU_init();
}

static void US_trigger()
{
	DIO_writepin(ICU_TRIGGER_CH ,HIGH);
     b7c:	61 e0       	ldi	r22, 0x01	; 1
     b7e:	8b e0       	ldi	r24, 0x0B	; 11
     b80:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b84:	8a e1       	ldi	r24, 0x1A	; 26
     b86:	8a 95       	dec	r24
     b88:	f1 f7       	brne	.-4      	; 0xb86 <US_trigger+0xa>
     b8a:	00 c0       	rjmp	.+0      	; 0xb8c <US_trigger+0x10>
	_delay_us(10);
	DIO_writepin(ICU_TRIGGER_CH ,LOW);
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	8b e0       	ldi	r24, 0x0B	; 11
     b90:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
	timer1_setTimerValue(0);
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <timer1_setTimerValue>
     b9a:	08 95       	ret

00000b9c <US_init>:
volatile u8 flag=0;
volatile u16 t1,t2,t3;

void US_init()
{
	ICU_init();
     b9c:	0e 94 1d 08 	call	0x103a	; 0x103a <ICU_init>
     ba0:	08 95       	ret

00000ba2 <US_getdistance>:
	timer1_setTimerValue(0);
}


u8 US_getdistance(u16 *pu16_distance)
{
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	00 d0       	rcall	.+0      	; 0xbac <US_getdistance+0xa>
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	8c 01       	movw	r16, r24
	u16 icu_time;
	US_trigger();
     bb2:	0e 94 be 05 	call	0xb7c	; 0xb7c <US_trigger>
	ICU_Read(&icu_time);
     bb6:	ce 01       	movw	r24, r28
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	0e 94 2e 08 	call	0x105c	; 0x105c <ICU_Read>
	*pu16_distance =(icu_time/58);   
     bbe:	29 81       	ldd	r18, Y+1	; 0x01
     bc0:	3a 81       	ldd	r19, Y+2	; 0x02
     bc2:	af e9       	ldi	r26, 0x9F	; 159
     bc4:	b6 e4       	ldi	r27, 0x46	; 70
     bc6:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__umulhisi3>
     bca:	92 95       	swap	r25
     bcc:	82 95       	swap	r24
     bce:	8f 70       	andi	r24, 0x0F	; 15
     bd0:	89 27       	eor	r24, r25
     bd2:	9f 70       	andi	r25, 0x0F	; 15
     bd4:	89 27       	eor	r24, r25
     bd6:	f8 01       	movw	r30, r16
     bd8:	91 83       	std	Z+1, r25	; 0x01
     bda:	80 83       	st	Z, r24
}
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	08 95       	ret

00000bea <main>:
#include "APP/app.h"

int main(void)
{   
	
	 app_init();
     bea:	0e 94 47 02 	call	0x48e	; 0x48e <app_init>

    while (1) 
    {
		app_start();
     bee:	0e 94 63 02 	call	0x4c6	; 0x4c6 <app_start>
     bf2:	fd cf       	rjmp	.-6      	; 0xbee <main+0x4>

00000bf4 <DIO_initpin>:
		  DIO_initpin(i,PinsStatusArray[i]);
	  }
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
     bf4:	98 2f       	mov	r25, r24
     bf6:	96 95       	lsr	r25
     bf8:	96 95       	lsr	r25
     bfa:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     bfc:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error = DIO_OK;
	  
	  if (pin_num < 8)
	  {

		  switch(status)
     bfe:	61 30       	cpi	r22, 0x01	; 1
     c00:	09 f4       	brne	.+2      	; 0xc04 <DIO_initpin+0x10>
     c02:	59 c0       	rjmp	.+178    	; 0xcb6 <DIO_initpin+0xc2>
     c04:	20 f0       	brcs	.+8      	; 0xc0e <DIO_initpin+0x1a>
     c06:	62 30       	cpi	r22, 0x02	; 2
     c08:	09 f4       	brne	.+2      	; 0xc0c <DIO_initpin+0x18>
     c0a:	a9 c0       	rjmp	.+338    	; 0xd5e <DIO_initpin+0x16a>
     c0c:	fc c0       	rjmp	.+504    	; 0xe06 <DIO_initpin+0x212>
		  {
			  case OUTPUT:
			  switch(port)
     c0e:	91 30       	cpi	r25, 0x01	; 1
     c10:	c9 f0       	breq	.+50     	; 0xc44 <DIO_initpin+0x50>
     c12:	28 f0       	brcs	.+10     	; 0xc1e <DIO_initpin+0x2a>
     c14:	92 30       	cpi	r25, 0x02	; 2
     c16:	49 f1       	breq	.+82     	; 0xc6a <DIO_initpin+0x76>
     c18:	93 30       	cpi	r25, 0x03	; 3
     c1a:	d1 f1       	breq	.+116    	; 0xc90 <DIO_initpin+0x9c>
     c1c:	f6 c0       	rjmp	.+492    	; 0xe0a <DIO_initpin+0x216>
			  {
				  case PA:
				  SET_BIT( DDRA,pin_num);
     c1e:	4a b3       	in	r20, 0x1a	; 26
     c20:	21 e0       	ldi	r18, 0x01	; 1
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	b9 01       	movw	r22, r18
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <DIO_initpin+0x38>
     c28:	66 0f       	add	r22, r22
     c2a:	77 1f       	adc	r23, r23
     c2c:	8a 95       	dec	r24
     c2e:	e2 f7       	brpl	.-8      	; 0xc28 <DIO_initpin+0x34>
     c30:	cb 01       	movw	r24, r22
     c32:	94 2f       	mov	r25, r20
     c34:	98 2b       	or	r25, r24
     c36:	9a bb       	out	0x1a, r25	; 26
				  CLR_BIT(PORTA,pin_num);
     c38:	9b b3       	in	r25, 0x1b	; 27
     c3a:	80 95       	com	r24
     c3c:	89 23       	and	r24, r25
     c3e:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     c40:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  SET_BIT( DDRA,pin_num);
				  CLR_BIT(PORTA,pin_num);
				  break;
     c42:	08 95       	ret
				  case PB:
				  SET_BIT( DDRB,pin_num);
     c44:	47 b3       	in	r20, 0x17	; 23
     c46:	21 e0       	ldi	r18, 0x01	; 1
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	b9 01       	movw	r22, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <DIO_initpin+0x5e>
     c4e:	66 0f       	add	r22, r22
     c50:	77 1f       	adc	r23, r23
     c52:	8a 95       	dec	r24
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <DIO_initpin+0x5a>
     c56:	cb 01       	movw	r24, r22
     c58:	94 2f       	mov	r25, r20
     c5a:	98 2b       	or	r25, r24
     c5c:	97 bb       	out	0x17, r25	; 23
				  CLR_BIT(PORTB,pin_num);
     c5e:	98 b3       	in	r25, 0x18	; 24
     c60:	80 95       	com	r24
     c62:	89 23       	and	r24, r25
     c64:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     c66:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  SET_BIT( DDRB,pin_num);
				  CLR_BIT(PORTB,pin_num);
				  break;
     c68:	08 95       	ret
				  case PC:
				  SET_BIT( DDRC,pin_num);
     c6a:	44 b3       	in	r20, 0x14	; 20
     c6c:	21 e0       	ldi	r18, 0x01	; 1
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	b9 01       	movw	r22, r18
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <DIO_initpin+0x84>
     c74:	66 0f       	add	r22, r22
     c76:	77 1f       	adc	r23, r23
     c78:	8a 95       	dec	r24
     c7a:	e2 f7       	brpl	.-8      	; 0xc74 <DIO_initpin+0x80>
     c7c:	cb 01       	movw	r24, r22
     c7e:	94 2f       	mov	r25, r20
     c80:	98 2b       	or	r25, r24
     c82:	94 bb       	out	0x14, r25	; 20
				  CLR_BIT(PORTC,pin_num);
     c84:	95 b3       	in	r25, 0x15	; 21
     c86:	80 95       	com	r24
     c88:	89 23       	and	r24, r25
     c8a:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     c8c:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  SET_BIT( DDRC,pin_num);
				  CLR_BIT(PORTC,pin_num);
				  break;
     c8e:	08 95       	ret
				  case PD:
				  SET_BIT( DDRD,pin_num);
     c90:	41 b3       	in	r20, 0x11	; 17
     c92:	21 e0       	ldi	r18, 0x01	; 1
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	b9 01       	movw	r22, r18
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <DIO_initpin+0xaa>
     c9a:	66 0f       	add	r22, r22
     c9c:	77 1f       	adc	r23, r23
     c9e:	8a 95       	dec	r24
     ca0:	e2 f7       	brpl	.-8      	; 0xc9a <DIO_initpin+0xa6>
     ca2:	cb 01       	movw	r24, r22
     ca4:	94 2f       	mov	r25, r20
     ca6:	98 2b       	or	r25, r24
     ca8:	91 bb       	out	0x11, r25	; 17
				  CLR_BIT(PORTD,pin_num);
     caa:	92 b3       	in	r25, 0x12	; 18
     cac:	80 95       	com	r24
     cae:	89 23       	and	r24, r25
     cb0:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     cb2:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  SET_BIT( DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
     cb4:	08 95       	ret
				  error = WRONG_PORT_NUMBER;
				  break;
			  }
			  break;
			  case INFREE:
			  switch(port)
     cb6:	91 30       	cpi	r25, 0x01	; 1
     cb8:	c9 f0       	breq	.+50     	; 0xcec <DIO_initpin+0xf8>
     cba:	28 f0       	brcs	.+10     	; 0xcc6 <DIO_initpin+0xd2>
     cbc:	92 30       	cpi	r25, 0x02	; 2
     cbe:	49 f1       	breq	.+82     	; 0xd12 <DIO_initpin+0x11e>
     cc0:	93 30       	cpi	r25, 0x03	; 3
     cc2:	d1 f1       	breq	.+116    	; 0xd38 <DIO_initpin+0x144>
     cc4:	a4 c0       	rjmp	.+328    	; 0xe0e <DIO_initpin+0x21a>
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
     cc6:	4a b3       	in	r20, 0x1a	; 26
     cc8:	21 e0       	ldi	r18, 0x01	; 1
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	b9 01       	movw	r22, r18
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <DIO_initpin+0xe0>
     cd0:	66 0f       	add	r22, r22
     cd2:	77 1f       	adc	r23, r23
     cd4:	8a 95       	dec	r24
     cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <DIO_initpin+0xdc>
     cd8:	cb 01       	movw	r24, r22
     cda:	80 95       	com	r24
     cdc:	94 2f       	mov	r25, r20
     cde:	98 23       	and	r25, r24
     ce0:	9a bb       	out	0x1a, r25	; 26
				  CLR_BIT(PORTA,pin_num);
     ce2:	9b b3       	in	r25, 0x1b	; 27
     ce4:	89 23       	and	r24, r25
     ce6:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     ce8:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
				  CLR_BIT(PORTA,pin_num);
				  break;
     cea:	08 95       	ret
				  case PB:
				  CLR_BIT(DDRB,pin_num);
     cec:	47 b3       	in	r20, 0x17	; 23
     cee:	21 e0       	ldi	r18, 0x01	; 1
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	b9 01       	movw	r22, r18
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <DIO_initpin+0x106>
     cf6:	66 0f       	add	r22, r22
     cf8:	77 1f       	adc	r23, r23
     cfa:	8a 95       	dec	r24
     cfc:	e2 f7       	brpl	.-8      	; 0xcf6 <DIO_initpin+0x102>
     cfe:	cb 01       	movw	r24, r22
     d00:	80 95       	com	r24
     d02:	94 2f       	mov	r25, r20
     d04:	98 23       	and	r25, r24
     d06:	97 bb       	out	0x17, r25	; 23
				  CLR_BIT(PORTB,pin_num);
     d08:	98 b3       	in	r25, 0x18	; 24
     d0a:	89 23       	and	r24, r25
     d0c:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     d0e:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  CLR_BIT(DDRB,pin_num);
				  CLR_BIT(PORTB,pin_num);
				  break;
     d10:	08 95       	ret
				  case PC:
				  CLR_BIT(DDRC,pin_num);
     d12:	44 b3       	in	r20, 0x14	; 20
     d14:	21 e0       	ldi	r18, 0x01	; 1
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	b9 01       	movw	r22, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <DIO_initpin+0x12c>
     d1c:	66 0f       	add	r22, r22
     d1e:	77 1f       	adc	r23, r23
     d20:	8a 95       	dec	r24
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <DIO_initpin+0x128>
     d24:	cb 01       	movw	r24, r22
     d26:	80 95       	com	r24
     d28:	94 2f       	mov	r25, r20
     d2a:	98 23       	and	r25, r24
     d2c:	94 bb       	out	0x14, r25	; 20
				  CLR_BIT(PORTC,pin_num);
     d2e:	95 b3       	in	r25, 0x15	; 21
     d30:	89 23       	and	r24, r25
     d32:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     d34:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  CLR_BIT(DDRC,pin_num);
				  CLR_BIT(PORTC,pin_num);
				  break;
     d36:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
     d38:	41 b3       	in	r20, 0x11	; 17
     d3a:	21 e0       	ldi	r18, 0x01	; 1
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	b9 01       	movw	r22, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <DIO_initpin+0x152>
     d42:	66 0f       	add	r22, r22
     d44:	77 1f       	adc	r23, r23
     d46:	8a 95       	dec	r24
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <DIO_initpin+0x14e>
     d4a:	cb 01       	movw	r24, r22
     d4c:	80 95       	com	r24
     d4e:	94 2f       	mov	r25, r20
     d50:	98 23       	and	r25, r24
     d52:	91 bb       	out	0x11, r25	; 17
				  CLR_BIT(PORTD,pin_num);
     d54:	92 b3       	in	r25, 0x12	; 18
     d56:	89 23       	and	r24, r25
     d58:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     d5a:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
     d5c:	08 95       	ret
				  break;
			  }
			  break;

			  case INPULL:
			  switch(port)
     d5e:	91 30       	cpi	r25, 0x01	; 1
     d60:	c9 f0       	breq	.+50     	; 0xd94 <DIO_initpin+0x1a0>
     d62:	28 f0       	brcs	.+10     	; 0xd6e <DIO_initpin+0x17a>
     d64:	92 30       	cpi	r25, 0x02	; 2
     d66:	49 f1       	breq	.+82     	; 0xdba <DIO_initpin+0x1c6>
     d68:	93 30       	cpi	r25, 0x03	; 3
     d6a:	d1 f1       	breq	.+116    	; 0xde0 <DIO_initpin+0x1ec>
     d6c:	52 c0       	rjmp	.+164    	; 0xe12 <DIO_initpin+0x21e>
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
     d6e:	4a b3       	in	r20, 0x1a	; 26
     d70:	21 e0       	ldi	r18, 0x01	; 1
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	b9 01       	movw	r22, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_initpin+0x188>
     d78:	66 0f       	add	r22, r22
     d7a:	77 1f       	adc	r23, r23
     d7c:	8a 95       	dec	r24
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_initpin+0x184>
     d80:	cb 01       	movw	r24, r22
     d82:	96 2f       	mov	r25, r22
     d84:	90 95       	com	r25
     d86:	94 23       	and	r25, r20
     d88:	9a bb       	out	0x1a, r25	; 26
				  SET_BIT(PORTA,pin_num);
     d8a:	9b b3       	in	r25, 0x1b	; 27
     d8c:	89 2b       	or	r24, r25
     d8e:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     d90:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
				  SET_BIT(PORTA,pin_num);
				  break;
     d92:	08 95       	ret
				  case PB:
				  CLR_BIT(DDRB,pin_num);
     d94:	47 b3       	in	r20, 0x17	; 23
     d96:	21 e0       	ldi	r18, 0x01	; 1
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	b9 01       	movw	r22, r18
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <DIO_initpin+0x1ae>
     d9e:	66 0f       	add	r22, r22
     da0:	77 1f       	adc	r23, r23
     da2:	8a 95       	dec	r24
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <DIO_initpin+0x1aa>
     da6:	cb 01       	movw	r24, r22
     da8:	96 2f       	mov	r25, r22
     daa:	90 95       	com	r25
     dac:	94 23       	and	r25, r20
     dae:	97 bb       	out	0x17, r25	; 23
				  SET_BIT(PORTB,pin_num);
     db0:	98 b3       	in	r25, 0x18	; 24
     db2:	89 2b       	or	r24, r25
     db4:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     db6:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  CLR_BIT(DDRB,pin_num);
				  SET_BIT(PORTB,pin_num);
				  break;
     db8:	08 95       	ret
				  case PC:
				  CLR_BIT(DDRC,pin_num);
     dba:	44 b3       	in	r20, 0x14	; 20
     dbc:	21 e0       	ldi	r18, 0x01	; 1
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	b9 01       	movw	r22, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <DIO_initpin+0x1d4>
     dc4:	66 0f       	add	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <DIO_initpin+0x1d0>
     dcc:	cb 01       	movw	r24, r22
     dce:	96 2f       	mov	r25, r22
     dd0:	90 95       	com	r25
     dd2:	94 23       	and	r25, r20
     dd4:	94 bb       	out	0x14, r25	; 20
				  SET_BIT(PORTC,pin_num);
     dd6:	95 b3       	in	r25, 0x15	; 21
     dd8:	89 2b       	or	r24, r25
     dda:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     ddc:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  CLR_BIT(DDRC,pin_num);
				  SET_BIT(PORTC,pin_num);
				  break;
     dde:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
     de0:	41 b3       	in	r20, 0x11	; 17
     de2:	21 e0       	ldi	r18, 0x01	; 1
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	b9 01       	movw	r22, r18
     de8:	02 c0       	rjmp	.+4      	; 0xdee <DIO_initpin+0x1fa>
     dea:	66 0f       	add	r22, r22
     dec:	77 1f       	adc	r23, r23
     dee:	8a 95       	dec	r24
     df0:	e2 f7       	brpl	.-8      	; 0xdea <DIO_initpin+0x1f6>
     df2:	cb 01       	movw	r24, r22
     df4:	96 2f       	mov	r25, r22
     df6:	90 95       	com	r25
     df8:	94 23       	and	r25, r20
     dfa:	91 bb       	out	0x11, r25	; 17
				  SET_BIT(PORTD,pin_num);
     dfc:	92 b3       	in	r25, 0x12	; 18
     dfe:	89 2b       	or	r24, r25
     e00:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     e02:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  SET_BIT(PORTD,pin_num);
				  break;
     e04:	08 95       	ret
				  error = WRONG_PORT_NUMBER;
				  break;
			  }
			  break;
			  default:
			  error = WRONG_PORT_NUMBER;
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	08 95       	ret
				  case PD:
				  SET_BIT( DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  SET_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     e12:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
     e14:	08 95       	ret

00000e16 <DIO_Init_All>:
	    return error;
    }
//////////////////////////////////////////////////////////////////////*/
//pin MODE
  void DIO_Init_All(void)
  {
     e16:	cf 93       	push	r28
	  DIO_Pin_type i;
	  for (i=PINA0; i<TOTAL_PINS; i++)
     e18:	c0 e0       	ldi	r28, 0x00	; 0
     e1a:	09 c0       	rjmp	.+18     	; 0xe2e <DIO_Init_All+0x18>
	  {
		  DIO_initpin(i,PinsStatusArray[i]);
     e1c:	ec 2f       	mov	r30, r28
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	e0 50       	subi	r30, 0x00	; 0
     e22:	ff 4f       	sbci	r31, 0xFF	; 255
     e24:	60 81       	ld	r22, Z
     e26:	8c 2f       	mov	r24, r28
     e28:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <DIO_initpin>
//////////////////////////////////////////////////////////////////////*/
//pin MODE
  void DIO_Init_All(void)
  {
	  DIO_Pin_type i;
	  for (i=PINA0; i<TOTAL_PINS; i++)
     e2c:	cf 5f       	subi	r28, 0xFF	; 255
     e2e:	c0 32       	cpi	r28, 0x20	; 32
     e30:	a8 f3       	brcs	.-22     	; 0xe1c <DIO_Init_All+0x6>
	  {
		  DIO_initpin(i,PinsStatusArray[i]);
	  }
  }
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <DIO_writepin>:
	  return error;

  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
     e36:	98 2f       	mov	r25, r24
     e38:	96 95       	lsr	r25
     e3a:	96 95       	lsr	r25
     e3c:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     e3e:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error= DIO_OK;
	  if (pin_num<8)
	  {
		  switch (volt)
     e40:	66 23       	and	r22, r22
     e42:	09 f4       	brne	.+2      	; 0xe46 <DIO_writepin+0x10>
     e44:	43 c0       	rjmp	.+134    	; 0xecc <DIO_writepin+0x96>
     e46:	61 30       	cpi	r22, 0x01	; 1
     e48:	09 f0       	breq	.+2      	; 0xe4c <DIO_writepin+0x16>
     e4a:	84 c0       	rjmp	.+264    	; 0xf54 <DIO_writepin+0x11e>
		  {
			  case HIGH:

			  switch(port)
     e4c:	91 30       	cpi	r25, 0x01	; 1
     e4e:	a1 f0       	breq	.+40     	; 0xe78 <DIO_writepin+0x42>
     e50:	28 f0       	brcs	.+10     	; 0xe5c <DIO_writepin+0x26>
     e52:	92 30       	cpi	r25, 0x02	; 2
     e54:	f9 f0       	breq	.+62     	; 0xe94 <DIO_writepin+0x5e>
     e56:	93 30       	cpi	r25, 0x03	; 3
     e58:	59 f1       	breq	.+86     	; 0xeb0 <DIO_writepin+0x7a>
     e5a:	7e c0       	rjmp	.+252    	; 0xf58 <DIO_writepin+0x122>
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
     e5c:	4b b3       	in	r20, 0x1b	; 27
     e5e:	21 e0       	ldi	r18, 0x01	; 1
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	b9 01       	movw	r22, r18
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <DIO_writepin+0x34>
     e66:	66 0f       	add	r22, r22
     e68:	77 1f       	adc	r23, r23
     e6a:	8a 95       	dec	r24
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <DIO_writepin+0x30>
     e6e:	cb 01       	movw	r24, r22
     e70:	84 2b       	or	r24, r20
     e72:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     e74:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
				  break;
     e76:	08 95       	ret
				  case PB:

				  SET_BIT(PORTB,pin_num);
     e78:	48 b3       	in	r20, 0x18	; 24
     e7a:	21 e0       	ldi	r18, 0x01	; 1
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	b9 01       	movw	r22, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <DIO_writepin+0x50>
     e82:	66 0f       	add	r22, r22
     e84:	77 1f       	adc	r23, r23
     e86:	8a 95       	dec	r24
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <DIO_writepin+0x4c>
     e8a:	cb 01       	movw	r24, r22
     e8c:	84 2b       	or	r24, r20
     e8e:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     e90:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  SET_BIT(PORTB,pin_num);
				  break;
     e92:	08 95       	ret
				  case PC:

				  SET_BIT(PORTC,pin_num);
     e94:	45 b3       	in	r20, 0x15	; 21
     e96:	21 e0       	ldi	r18, 0x01	; 1
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	b9 01       	movw	r22, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <DIO_writepin+0x6c>
     e9e:	66 0f       	add	r22, r22
     ea0:	77 1f       	adc	r23, r23
     ea2:	8a 95       	dec	r24
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <DIO_writepin+0x68>
     ea6:	cb 01       	movw	r24, r22
     ea8:	84 2b       	or	r24, r20
     eaa:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     eac:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  SET_BIT(PORTC,pin_num);
				  break;
     eae:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
     eb0:	42 b3       	in	r20, 0x12	; 18
     eb2:	21 e0       	ldi	r18, 0x01	; 1
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	b9 01       	movw	r22, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <DIO_writepin+0x88>
     eba:	66 0f       	add	r22, r22
     ebc:	77 1f       	adc	r23, r23
     ebe:	8a 95       	dec	r24
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <DIO_writepin+0x84>
     ec2:	cb 01       	movw	r24, r22
     ec4:	84 2b       	or	r24, r20
     ec6:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     ec8:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
     eca:	08 95       	ret
			  }
			  break;

			  case LOW:

			  switch(port)
     ecc:	91 30       	cpi	r25, 0x01	; 1
     ece:	a9 f0       	breq	.+42     	; 0xefa <DIO_writepin+0xc4>
     ed0:	28 f0       	brcs	.+10     	; 0xedc <DIO_writepin+0xa6>
     ed2:	92 30       	cpi	r25, 0x02	; 2
     ed4:	09 f1       	breq	.+66     	; 0xf18 <DIO_writepin+0xe2>
     ed6:	93 30       	cpi	r25, 0x03	; 3
     ed8:	71 f1       	breq	.+92     	; 0xf36 <DIO_writepin+0x100>
     eda:	40 c0       	rjmp	.+128    	; 0xf5c <DIO_writepin+0x126>
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
     edc:	4b b3       	in	r20, 0x1b	; 27
     ede:	21 e0       	ldi	r18, 0x01	; 1
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	b9 01       	movw	r22, r18
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <DIO_writepin+0xb4>
     ee6:	66 0f       	add	r22, r22
     ee8:	77 1f       	adc	r23, r23
     eea:	8a 95       	dec	r24
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <DIO_writepin+0xb0>
     eee:	cb 01       	movw	r24, r22
     ef0:	80 95       	com	r24
     ef2:	84 23       	and	r24, r20
     ef4:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     ef6:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
				  break;
     ef8:	08 95       	ret
				  case PB:

				  CLR_BIT(PORTB,pin_num);
     efa:	48 b3       	in	r20, 0x18	; 24
     efc:	21 e0       	ldi	r18, 0x01	; 1
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	b9 01       	movw	r22, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_writepin+0xd2>
     f04:	66 0f       	add	r22, r22
     f06:	77 1f       	adc	r23, r23
     f08:	8a 95       	dec	r24
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_writepin+0xce>
     f0c:	cb 01       	movw	r24, r22
     f0e:	80 95       	com	r24
     f10:	84 23       	and	r24, r20
     f12:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     f14:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  CLR_BIT(PORTB,pin_num);
				  break;
     f16:	08 95       	ret
				  case PC:

				  CLR_BIT(PORTC,pin_num);
     f18:	45 b3       	in	r20, 0x15	; 21
     f1a:	21 e0       	ldi	r18, 0x01	; 1
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	b9 01       	movw	r22, r18
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_writepin+0xf0>
     f22:	66 0f       	add	r22, r22
     f24:	77 1f       	adc	r23, r23
     f26:	8a 95       	dec	r24
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_writepin+0xec>
     f2a:	cb 01       	movw	r24, r22
     f2c:	80 95       	com	r24
     f2e:	84 23       	and	r24, r20
     f30:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     f32:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  CLR_BIT(PORTC,pin_num);
				  break;
     f34:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
     f36:	42 b3       	in	r20, 0x12	; 18
     f38:	21 e0       	ldi	r18, 0x01	; 1
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	b9 01       	movw	r22, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_writepin+0x10e>
     f40:	66 0f       	add	r22, r22
     f42:	77 1f       	adc	r23, r23
     f44:	8a 95       	dec	r24
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_writepin+0x10a>
     f48:	cb 01       	movw	r24, r22
     f4a:	80 95       	com	r24
     f4c:	84 23       	and	r24, r20
     f4e:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     f50:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
     f52:	08 95       	ret
			  }

			  break;

			  default:
			  error = WRONG_VALUE;
     f54:	83 e0       	ldi	r24, 0x03	; 3
     f56:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
     f5e:	08 95       	ret

00000f60 <DIO_readpin>:
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
     f60:	98 2f       	mov	r25, r24
     f62:	96 95       	lsr	r25
     f64:	96 95       	lsr	r25
     f66:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     f68:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error = DIO_OK;
	  if (pin_num < 8)
	  {

		  switch(port)
     f6a:	91 30       	cpi	r25, 0x01	; 1
     f6c:	a1 f0       	breq	.+40     	; 0xf96 <DIO_readpin+0x36>
     f6e:	28 f0       	brcs	.+10     	; 0xf7a <DIO_readpin+0x1a>
     f70:	92 30       	cpi	r25, 0x02	; 2
     f72:	f9 f0       	breq	.+62     	; 0xfb2 <DIO_readpin+0x52>
     f74:	93 30       	cpi	r25, 0x03	; 3
     f76:	59 f1       	breq	.+86     	; 0xfce <DIO_readpin+0x6e>
     f78:	38 c0       	rjmp	.+112    	; 0xfea <DIO_readpin+0x8a>
		  {
			  case PA:

			  *volt=READ_BIT(PINA,pin_num);
     f7a:	29 b3       	in	r18, 0x19	; 25
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	a9 01       	movw	r20, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <DIO_readpin+0x26>
     f82:	55 95       	asr	r21
     f84:	47 95       	ror	r20
     f86:	8a 95       	dec	r24
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <DIO_readpin+0x22>
     f8a:	ca 01       	movw	r24, r20
     f8c:	81 70       	andi	r24, 0x01	; 1
     f8e:	fb 01       	movw	r30, r22
     f90:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     f92:	80 e0       	ldi	r24, 0x00	; 0
		  switch(port)
		  {
			  case PA:

			  *volt=READ_BIT(PINA,pin_num);
			  break;
     f94:	08 95       	ret
			  case PB:

			  *volt=READ_BIT(PINB,pin_num);
     f96:	26 b3       	in	r18, 0x16	; 22
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	a9 01       	movw	r20, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <DIO_readpin+0x42>
     f9e:	55 95       	asr	r21
     fa0:	47 95       	ror	r20
     fa2:	8a 95       	dec	r24
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <DIO_readpin+0x3e>
     fa6:	ca 01       	movw	r24, r20
     fa8:	81 70       	andi	r24, 0x01	; 1
     faa:	fb 01       	movw	r30, r22
     fac:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     fae:	80 e0       	ldi	r24, 0x00	; 0
			  *volt=READ_BIT(PINA,pin_num);
			  break;
			  case PB:

			  *volt=READ_BIT(PINB,pin_num);
			  break;
     fb0:	08 95       	ret
			  case PC:

			  *volt=READ_BIT(PINC,pin_num);
     fb2:	23 b3       	in	r18, 0x13	; 19
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	a9 01       	movw	r20, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_readpin+0x5e>
     fba:	55 95       	asr	r21
     fbc:	47 95       	ror	r20
     fbe:	8a 95       	dec	r24
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_readpin+0x5a>
     fc2:	ca 01       	movw	r24, r20
     fc4:	81 70       	andi	r24, 0x01	; 1
     fc6:	fb 01       	movw	r30, r22
     fc8:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     fca:	80 e0       	ldi	r24, 0x00	; 0
			  *volt=READ_BIT(PINB,pin_num);
			  break;
			  case PC:

			  *volt=READ_BIT(PINC,pin_num);
			  break;
     fcc:	08 95       	ret
			  case PD:

			  *volt=READ_BIT(PIND,pin_num);
     fce:	20 b3       	in	r18, 0x10	; 16
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	a9 01       	movw	r20, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <DIO_readpin+0x7a>
     fd6:	55 95       	asr	r21
     fd8:	47 95       	ror	r20
     fda:	8a 95       	dec	r24
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <DIO_readpin+0x76>
     fde:	ca 01       	movw	r24, r20
     fe0:	81 70       	andi	r24, 0x01	; 1
     fe2:	fb 01       	movw	r30, r22
     fe4:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     fe6:	80 e0       	ldi	r24, 0x00	; 0
			  *volt=READ_BIT(PINC,pin_num);
			  break;
			  case PD:

			  *volt=READ_BIT(PIND,pin_num);
			  break;
     fe8:	08 95       	ret
			  default:
			  error = WRONG_PORT_NUMBER;
     fea:	81 e0       	ldi	r24, 0x01	; 1
	  else
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;
  }
     fec:	08 95       	ret

00000fee <ICU_Read_callbackfun>:

static volatile u16 t1,t2,ICU_flag=0;

static void ICU_Read_callbackfun(void)
{
	if (ICU_flag==0)
     fee:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <ICU_flag>
     ff2:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <ICU_flag+0x1>
     ff6:	89 2b       	or	r24, r25
     ff8:	79 f4       	brne	.+30     	; 0x1018 <ICU_Read_callbackfun+0x2a>
	{
		timer1_ReadCounts(&t1);
     ffa:	8d e2       	ldi	r24, 0x2D	; 45
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <timer1_ReadCounts>
		EXI_TriggerEdge(ICU_EXI_INT,FALLING_EDGE);
    1002:	62 e0       	ldi	r22, 0x02	; 2
    1004:	82 e0       	ldi	r24, 0x02	; 2
    1006:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <EXI_TriggerEdge>
		ICU_flag=1;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <ICU_flag+0x1>
    1012:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <ICU_flag>
    1016:	08 95       	ret
	}
	else if (ICU_flag==1)
    1018:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <ICU_flag>
    101c:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <ICU_flag+0x1>
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	51 f4       	brne	.+20     	; 0x1038 <ICU_Read_callbackfun+0x4a>
	{
		timer1_ReadCounts(&t2);
    1024:	8b e2       	ldi	r24, 0x2B	; 43
    1026:	91 e0       	ldi	r25, 0x01	; 1
    1028:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <timer1_ReadCounts>
		ICU_flag=2;
    102c:	82 e0       	ldi	r24, 0x02	; 2
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <ICU_flag+0x1>
    1034:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <ICU_flag>
    1038:	08 95       	ret

0000103a <ICU_init>:
	}
}
void ICU_init ()
{
	Timer1_Init(TIMER1_NORMAL_MODE,TIMER1_SCALER_8);
    103a:	62 e0       	ldi	r22, 0x02	; 2
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	0e 94 8c 0a 	call	0x1518	; 0x1518 <Timer1_Init>
	// DIO_initpin(ICU_CH,INFREE);                              // in init all pins
	EXI_Enable(ICU_EXI_INT);
    1042:	82 e0       	ldi	r24, 0x02	; 2
    1044:	0e 94 69 08 	call	0x10d2	; 0x10d2 <EXI_Enable>
	EXI_TriggerEdge(ICU_EXI_INT,RISING_EDGE);
    1048:	63 e0       	ldi	r22, 0x03	; 3
    104a:	82 e0       	ldi	r24, 0x02	; 2
    104c:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <EXI_TriggerEdge>
	EXI_SetCallBack(ICU_EXI_INT, ICU_Read_callbackfun );
    1050:	67 ef       	ldi	r22, 0xF7	; 247
    1052:	77 e0       	ldi	r23, 0x07	; 7
    1054:	82 e0       	ldi	r24, 0x02	; 2
    1056:	0e 94 db 08 	call	0x11b6	; 0x11b6 <EXI_SetCallBack>
    105a:	08 95       	ret

0000105c <ICU_Read>:

}

u8 ICU_Read(u16 *pu16_PeriodTime)
{
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	8c 01       	movw	r16, r24

	u16 timeout ;
	EXI_TriggerEdge(ICU_EXI_INT,RISING_EDGE);
    1066:	63 e0       	ldi	r22, 0x03	; 3
    1068:	82 e0       	ldi	r24, 0x02	; 2
    106a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <EXI_TriggerEdge>
	timer1_setTimerValue(0);
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <timer1_setTimerValue>
	ICU_flag=0;
    1074:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <ICU_flag+0x1>
    1078:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <ICU_flag>
		while((ICU_flag<2)&&(timeout<23000))
    107c:	05 c0       	rjmp	.+10     	; 0x1088 <ICU_Read+0x2c>
		{
			timeout++;
    107e:	21 96       	adiw	r28, 0x01	; 1
    1080:	82 e0       	ldi	r24, 0x02	; 2
    1082:	8a 95       	dec	r24
    1084:	f1 f7       	brne	.-4      	; 0x1082 <ICU_Read+0x26>
    1086:	00 c0       	rjmp	.+0      	; 0x1088 <ICU_Read+0x2c>

	u16 timeout ;
	EXI_TriggerEdge(ICU_EXI_INT,RISING_EDGE);
	timer1_setTimerValue(0);
	ICU_flag=0;
		while((ICU_flag<2)&&(timeout<23000))
    1088:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <ICU_flag>
    108c:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <ICU_flag+0x1>
    1090:	02 97       	sbiw	r24, 0x02	; 2
    1092:	20 f4       	brcc	.+8      	; 0x109c <ICU_Read+0x40>
    1094:	c8 3d       	cpi	r28, 0xD8	; 216
    1096:	e9 e5       	ldi	r30, 0x59	; 89
    1098:	de 07       	cpc	r29, r30
    109a:	88 f3       	brcs	.-30     	; 0x107e <ICU_Read+0x22>
		{
			timeout++;
			_delay_us(1);
		}
		
		if(ICU_flag==2)
    109c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <ICU_flag>
    10a0:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <ICU_flag+0x1>
    10a4:	02 97       	sbiw	r24, 0x02	; 2
    10a6:	79 f4       	brne	.+30     	; 0x10c6 <ICU_Read+0x6a>
		{
			*pu16_PeriodTime =(t2-t1);
    10a8:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <t2>
    10ac:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <t2+0x1>
    10b0:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <t1>
    10b4:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <t1+0x1>
    10b8:	82 1b       	sub	r24, r18
    10ba:	93 0b       	sbc	r25, r19
    10bc:	f8 01       	movw	r30, r16
    10be:	91 83       	std	Z+1, r25	; 0x01
    10c0:	80 83       	st	Z, r24
			
			return 1 ;    //done
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	01 c0       	rjmp	.+2      	; 0x10c8 <ICU_Read+0x6c>
		}
	
	return  0; //timeout
    10c6:	80 e0       	ldi	r24, 0x00	; 0
}
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	08 95       	ret

000010d2 <EXI_Enable>:

void EXI_Init(void)
{
	EXI_TriggerEdge(EX_INT0,FALLING_EDGE);
	EXI_TriggerEdge(EX_INT1,FALLING_EDGE);
	EXI_TriggerEdge(EX_INT2,FALLING_EDGE);
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	41 f0       	breq	.+16     	; 0x10e6 <EXI_Enable+0x14>
    10d6:	18 f0       	brcs	.+6      	; 0x10de <EXI_Enable+0xc>
    10d8:	82 30       	cpi	r24, 0x02	; 2
    10da:	49 f0       	breq	.+18     	; 0x10ee <EXI_Enable+0x1c>
    10dc:	08 95       	ret
    10de:	8b b7       	in	r24, 0x3b	; 59
    10e0:	80 64       	ori	r24, 0x40	; 64
    10e2:	8b bf       	out	0x3b, r24	; 59
    10e4:	08 95       	ret
    10e6:	8b b7       	in	r24, 0x3b	; 59
    10e8:	80 68       	ori	r24, 0x80	; 128
    10ea:	8b bf       	out	0x3b, r24	; 59
    10ec:	08 95       	ret
    10ee:	8b b7       	in	r24, 0x3b	; 59
    10f0:	80 62       	ori	r24, 0x20	; 32
    10f2:	8b bf       	out	0x3b, r24	; 59
    10f4:	08 95       	ret

000010f6 <EXI_TriggerEdge>:
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	49 f1       	breq	.+82     	; 0x114c <EXI_TriggerEdge+0x56>
    10fa:	20 f0       	brcs	.+8      	; 0x1104 <EXI_TriggerEdge+0xe>
    10fc:	82 30       	cpi	r24, 0x02	; 2
    10fe:	09 f4       	brne	.+2      	; 0x1102 <EXI_TriggerEdge+0xc>
    1100:	49 c0       	rjmp	.+146    	; 0x1194 <EXI_TriggerEdge+0x9e>
    1102:	08 95       	ret
    1104:	61 30       	cpi	r22, 0x01	; 1
    1106:	69 f0       	breq	.+26     	; 0x1122 <EXI_TriggerEdge+0x2c>
    1108:	28 f0       	brcs	.+10     	; 0x1114 <EXI_TriggerEdge+0x1e>
    110a:	62 30       	cpi	r22, 0x02	; 2
    110c:	89 f0       	breq	.+34     	; 0x1130 <EXI_TriggerEdge+0x3a>
    110e:	63 30       	cpi	r22, 0x03	; 3
    1110:	b1 f0       	breq	.+44     	; 0x113e <EXI_TriggerEdge+0x48>
    1112:	08 95       	ret
    1114:	85 b7       	in	r24, 0x35	; 53
    1116:	8e 7f       	andi	r24, 0xFE	; 254
    1118:	85 bf       	out	0x35, r24	; 53
    111a:	85 b7       	in	r24, 0x35	; 53
    111c:	8d 7f       	andi	r24, 0xFD	; 253
    111e:	85 bf       	out	0x35, r24	; 53
    1120:	08 95       	ret
    1122:	85 b7       	in	r24, 0x35	; 53
    1124:	81 60       	ori	r24, 0x01	; 1
    1126:	85 bf       	out	0x35, r24	; 53
    1128:	85 b7       	in	r24, 0x35	; 53
    112a:	8d 7f       	andi	r24, 0xFD	; 253
    112c:	85 bf       	out	0x35, r24	; 53
    112e:	08 95       	ret
    1130:	85 b7       	in	r24, 0x35	; 53
    1132:	8e 7f       	andi	r24, 0xFE	; 254
    1134:	85 bf       	out	0x35, r24	; 53
    1136:	85 b7       	in	r24, 0x35	; 53
    1138:	82 60       	ori	r24, 0x02	; 2
    113a:	85 bf       	out	0x35, r24	; 53
    113c:	08 95       	ret
    113e:	85 b7       	in	r24, 0x35	; 53
    1140:	81 60       	ori	r24, 0x01	; 1
    1142:	85 bf       	out	0x35, r24	; 53
    1144:	85 b7       	in	r24, 0x35	; 53
    1146:	82 60       	ori	r24, 0x02	; 2
    1148:	85 bf       	out	0x35, r24	; 53
    114a:	08 95       	ret
    114c:	61 30       	cpi	r22, 0x01	; 1
    114e:	69 f0       	breq	.+26     	; 0x116a <EXI_TriggerEdge+0x74>
    1150:	28 f0       	brcs	.+10     	; 0x115c <EXI_TriggerEdge+0x66>
    1152:	62 30       	cpi	r22, 0x02	; 2
    1154:	89 f0       	breq	.+34     	; 0x1178 <EXI_TriggerEdge+0x82>
    1156:	63 30       	cpi	r22, 0x03	; 3
    1158:	b1 f0       	breq	.+44     	; 0x1186 <EXI_TriggerEdge+0x90>
    115a:	08 95       	ret
    115c:	85 b7       	in	r24, 0x35	; 53
    115e:	8b 7f       	andi	r24, 0xFB	; 251
    1160:	85 bf       	out	0x35, r24	; 53
    1162:	85 b7       	in	r24, 0x35	; 53
    1164:	87 7f       	andi	r24, 0xF7	; 247
    1166:	85 bf       	out	0x35, r24	; 53
    1168:	08 95       	ret
    116a:	85 b7       	in	r24, 0x35	; 53
    116c:	84 60       	ori	r24, 0x04	; 4
    116e:	85 bf       	out	0x35, r24	; 53
    1170:	85 b7       	in	r24, 0x35	; 53
    1172:	87 7f       	andi	r24, 0xF7	; 247
    1174:	85 bf       	out	0x35, r24	; 53
    1176:	08 95       	ret
    1178:	85 b7       	in	r24, 0x35	; 53
    117a:	8b 7f       	andi	r24, 0xFB	; 251
    117c:	85 bf       	out	0x35, r24	; 53
    117e:	85 b7       	in	r24, 0x35	; 53
    1180:	88 60       	ori	r24, 0x08	; 8
    1182:	85 bf       	out	0x35, r24	; 53
    1184:	08 95       	ret
    1186:	85 b7       	in	r24, 0x35	; 53
    1188:	84 60       	ori	r24, 0x04	; 4
    118a:	85 bf       	out	0x35, r24	; 53
    118c:	85 b7       	in	r24, 0x35	; 53
    118e:	88 60       	ori	r24, 0x08	; 8
    1190:	85 bf       	out	0x35, r24	; 53
    1192:	08 95       	ret
    1194:	62 30       	cpi	r22, 0x02	; 2
    1196:	19 f0       	breq	.+6      	; 0x119e <EXI_TriggerEdge+0xa8>
    1198:	63 30       	cpi	r22, 0x03	; 3
    119a:	29 f0       	breq	.+10     	; 0x11a6 <EXI_TriggerEdge+0xb0>
    119c:	08 c0       	rjmp	.+16     	; 0x11ae <EXI_TriggerEdge+0xb8>
    119e:	84 b7       	in	r24, 0x34	; 52
    11a0:	8f 7b       	andi	r24, 0xBF	; 191
    11a2:	84 bf       	out	0x34, r24	; 52
    11a4:	08 95       	ret
    11a6:	84 b7       	in	r24, 0x34	; 52
    11a8:	80 64       	ori	r24, 0x40	; 64
    11aa:	84 bf       	out	0x34, r24	; 52
    11ac:	08 95       	ret
    11ae:	84 b7       	in	r24, 0x34	; 52
    11b0:	8f 7b       	andi	r24, 0xBF	; 191
    11b2:	84 bf       	out	0x34, r24	; 52
    11b4:	08 95       	ret

000011b6 <EXI_SetCallBack>:
/************************************Call back functions*********************************************/
void EXI_SetCallBack(ExInterruptSource_type Interrupt,void(*LocalPtr)(void))
{
	
	
	switch(Interrupt){
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	49 f0       	breq	.+18     	; 0x11cc <EXI_SetCallBack+0x16>
    11ba:	18 f0       	brcs	.+6      	; 0x11c2 <EXI_SetCallBack+0xc>
    11bc:	82 30       	cpi	r24, 0x02	; 2
    11be:	59 f0       	breq	.+22     	; 0x11d6 <EXI_SetCallBack+0x20>
    11c0:	08 95       	ret
		case EX_INT0:
		INT0_Fptr=LocalPtr;
    11c2:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <INT0_Fptr+0x1>
    11c6:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <INT0_Fptr>
		break;
    11ca:	08 95       	ret
		case EX_INT1:
		INT1_Fptr=LocalPtr;
    11cc:	70 93 32 01 	sts	0x0132, r23	; 0x800132 <INT1_Fptr+0x1>
    11d0:	60 93 31 01 	sts	0x0131, r22	; 0x800131 <INT1_Fptr>
		break;
    11d4:	08 95       	ret
		case EX_INT2:
		INT2_Fptr=LocalPtr;
    11d6:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <INT2_Fptr+0x1>
    11da:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <INT2_Fptr>
    11de:	08 95       	ret

000011e0 <__vector_1>:




ISR(INT0_vect)
{  
    11e0:	1f 92       	push	r1
    11e2:	0f 92       	push	r0
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	0f 92       	push	r0
    11e8:	11 24       	eor	r1, r1
    11ea:	2f 93       	push	r18
    11ec:	3f 93       	push	r19
    11ee:	4f 93       	push	r20
    11f0:	5f 93       	push	r21
    11f2:	6f 93       	push	r22
    11f4:	7f 93       	push	r23
    11f6:	8f 93       	push	r24
    11f8:	9f 93       	push	r25
    11fa:	af 93       	push	r26
    11fc:	bf 93       	push	r27
    11fe:	ef 93       	push	r30
    1200:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
    1202:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <INT0_Fptr>
    1206:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <INT0_Fptr+0x1>
    120a:	30 97       	sbiw	r30, 0x00	; 0
    120c:	09 f0       	breq	.+2      	; 0x1210 <__vector_1+0x30>
	{
		INT0_Fptr();
    120e:	09 95       	icall
	}
}
    1210:	ff 91       	pop	r31
    1212:	ef 91       	pop	r30
    1214:	bf 91       	pop	r27
    1216:	af 91       	pop	r26
    1218:	9f 91       	pop	r25
    121a:	8f 91       	pop	r24
    121c:	7f 91       	pop	r23
    121e:	6f 91       	pop	r22
    1220:	5f 91       	pop	r21
    1222:	4f 91       	pop	r20
    1224:	3f 91       	pop	r19
    1226:	2f 91       	pop	r18
    1228:	0f 90       	pop	r0
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	0f 90       	pop	r0
    122e:	1f 90       	pop	r1
    1230:	18 95       	reti

00001232 <__vector_2>:
ISR(INT1_vect)
{
    1232:	1f 92       	push	r1
    1234:	0f 92       	push	r0
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	0f 92       	push	r0
    123a:	11 24       	eor	r1, r1
    123c:	2f 93       	push	r18
    123e:	3f 93       	push	r19
    1240:	4f 93       	push	r20
    1242:	5f 93       	push	r21
    1244:	6f 93       	push	r22
    1246:	7f 93       	push	r23
    1248:	8f 93       	push	r24
    124a:	9f 93       	push	r25
    124c:	af 93       	push	r26
    124e:	bf 93       	push	r27
    1250:	ef 93       	push	r30
    1252:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
    1254:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <INT1_Fptr>
    1258:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <INT1_Fptr+0x1>
    125c:	30 97       	sbiw	r30, 0x00	; 0
    125e:	09 f0       	breq	.+2      	; 0x1262 <__vector_2+0x30>
	{
		INT1_Fptr();
    1260:	09 95       	icall
	}
}
    1262:	ff 91       	pop	r31
    1264:	ef 91       	pop	r30
    1266:	bf 91       	pop	r27
    1268:	af 91       	pop	r26
    126a:	9f 91       	pop	r25
    126c:	8f 91       	pop	r24
    126e:	7f 91       	pop	r23
    1270:	6f 91       	pop	r22
    1272:	5f 91       	pop	r21
    1274:	4f 91       	pop	r20
    1276:	3f 91       	pop	r19
    1278:	2f 91       	pop	r18
    127a:	0f 90       	pop	r0
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	0f 90       	pop	r0
    1280:	1f 90       	pop	r1
    1282:	18 95       	reti

00001284 <__vector_3>:
ISR(INT2_vect)
{
    1284:	1f 92       	push	r1
    1286:	0f 92       	push	r0
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	0f 92       	push	r0
    128c:	11 24       	eor	r1, r1
    128e:	2f 93       	push	r18
    1290:	3f 93       	push	r19
    1292:	4f 93       	push	r20
    1294:	5f 93       	push	r21
    1296:	6f 93       	push	r22
    1298:	7f 93       	push	r23
    129a:	8f 93       	push	r24
    129c:	9f 93       	push	r25
    129e:	af 93       	push	r26
    12a0:	bf 93       	push	r27
    12a2:	ef 93       	push	r30
    12a4:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
    12a6:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <INT2_Fptr>
    12aa:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <INT2_Fptr+0x1>
    12ae:	30 97       	sbiw	r30, 0x00	; 0
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <__vector_3+0x30>
	{
		INT2_Fptr();
    12b2:	09 95       	icall
	}
}
    12b4:	ff 91       	pop	r31
    12b6:	ef 91       	pop	r30
    12b8:	bf 91       	pop	r27
    12ba:	af 91       	pop	r26
    12bc:	9f 91       	pop	r25
    12be:	8f 91       	pop	r24
    12c0:	7f 91       	pop	r23
    12c2:	6f 91       	pop	r22
    12c4:	5f 91       	pop	r21
    12c6:	4f 91       	pop	r20
    12c8:	3f 91       	pop	r19
    12ca:	2f 91       	pop	r18
    12cc:	0f 90       	pop	r0
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	0f 90       	pop	r0
    12d2:	1f 90       	pop	r1
    12d4:	18 95       	reti

000012d6 <waveGen>:
	TIMER0_OV_SetCallBack(waveGen);
	
} 

void waveGen()
{  static u32 OV=0;
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
	TCNT0=6;
    12da:	86 e0       	ldi	r24, 0x06	; 6
    12dc:	82 bf       	out	0x32, r24	; 50
	OV++;
    12de:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <OV.2058>
    12e2:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <OV.2058+0x1>
    12e6:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <OV.2058+0x2>
    12ea:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <OV.2058+0x3>
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	a1 1d       	adc	r26, r1
    12f2:	b1 1d       	adc	r27, r1
    12f4:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <OV.2058>
    12f8:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <OV.2058+0x1>
    12fc:	a0 93 37 01 	sts	0x0137, r26	; 0x800137 <OV.2058+0x2>
    1300:	b0 93 38 01 	sts	0x0138, r27	; 0x800138 <OV.2058+0x3>
	if (OV==(u32_OFFTicks+1))
    1304:	00 91 39 01 	lds	r16, 0x0139	; 0x800139 <u32_OFFTicks>
    1308:	10 91 3a 01 	lds	r17, 0x013A	; 0x80013a <u32_OFFTicks+0x1>
    130c:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <u32_OFFTicks+0x2>
    1310:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <u32_OFFTicks+0x3>
    1314:	b9 01       	movw	r22, r18
    1316:	a8 01       	movw	r20, r16
    1318:	4f 5f       	subi	r20, 0xFF	; 255
    131a:	5f 4f       	sbci	r21, 0xFF	; 255
    131c:	6f 4f       	sbci	r22, 0xFF	; 255
    131e:	7f 4f       	sbci	r23, 0xFF	; 255
    1320:	84 17       	cp	r24, r20
    1322:	95 07       	cpc	r25, r21
    1324:	a6 07       	cpc	r26, r22
    1326:	b7 07       	cpc	r27, r23
    1328:	29 f4       	brne	.+10     	; 0x1334 <waveGen+0x5e>
	{
		DIO_writepin(PINB0,HIGH);//
    132a:	61 e0       	ldi	r22, 0x01	; 1
    132c:	88 e0       	ldi	r24, 0x08	; 8
    132e:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
    1332:	21 c0       	rjmp	.+66     	; 0x1376 <waveGen+0xa0>
	}
	else if (OV==(u32_ONTicks+u32_OFFTicks+2))
    1334:	40 91 3d 01 	lds	r20, 0x013D	; 0x80013d <u32_ONTicks>
    1338:	50 91 3e 01 	lds	r21, 0x013E	; 0x80013e <u32_ONTicks+0x1>
    133c:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <u32_ONTicks+0x2>
    1340:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <u32_ONTicks+0x3>
    1344:	40 0f       	add	r20, r16
    1346:	51 1f       	adc	r21, r17
    1348:	62 1f       	adc	r22, r18
    134a:	73 1f       	adc	r23, r19
    134c:	4e 5f       	subi	r20, 0xFE	; 254
    134e:	5f 4f       	sbci	r21, 0xFF	; 255
    1350:	6f 4f       	sbci	r22, 0xFF	; 255
    1352:	7f 4f       	sbci	r23, 0xFF	; 255
    1354:	84 17       	cp	r24, r20
    1356:	95 07       	cpc	r25, r21
    1358:	a6 07       	cpc	r26, r22
    135a:	b7 07       	cpc	r27, r23
    135c:	61 f4       	brne	.+24     	; 0x1376 <waveGen+0xa0>
	{
		DIO_writepin(PINB0,LOW);//
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	88 e0       	ldi	r24, 0x08	; 8
    1362:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
		OV=0;
    1366:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <OV.2058>
    136a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <OV.2058+0x1>
    136e:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <OV.2058+0x2>
    1372:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <OV.2058+0x3>
	}
	
}
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	08 95       	ret

0000137c <pwm_init>:
u32 u32_ONTicks=0,u32_OFFTicks=0;


void pwm_init()
{
	DIO_initpin(PINB0,OUTPUT);
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	88 e0       	ldi	r24, 0x08	; 8
    1380:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <DIO_initpin>
	TIMER0_Init(TIMER0_NORMAL_MODE);
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	0e 94 36 0a 	call	0x146c	; 0x146c <TIMER0_Init>
	TIMER0_OV_InterruptEnable();
    138a:	0e 94 88 0a 	call	0x1510	; 0x1510 <TIMER0_OV_InterruptEnable>
	TIMER0_OV_SetCallBack(waveGen);
    138e:	8b e6       	ldi	r24, 0x6B	; 107
    1390:	99 e0       	ldi	r25, 0x09	; 9
    1392:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <TIMER0_OV_SetCallBack>
    1396:	08 95       	ret

00001398 <PWM_set_duty>:
	
}


void PWM_set_duty(u8 u8_DutyCycle,u32 u32_Freq)
{
    1398:	8f 92       	push	r8
    139a:	9f 92       	push	r9
    139c:	af 92       	push	r10
    139e:	bf 92       	push	r11
    13a0:	cf 92       	push	r12
    13a2:	df 92       	push	r13
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	cf 93       	push	r28
    13aa:	c8 2f       	mov	r28, r24
	f64 f64_wavePeriodTime = (f32)1 / u32_Freq*1000000;					         // The Periodic Time for the Generated Pulse in Seconds //
    13ac:	cb 01       	movw	r24, r22
    13ae:	ba 01       	movw	r22, r20
    13b0:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__floatunsisf>
    13b4:	9b 01       	movw	r18, r22
    13b6:	ac 01       	movw	r20, r24
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	80 e8       	ldi	r24, 0x80	; 128
    13be:	9f e3       	ldi	r25, 0x3F	; 63
    13c0:	0e 94 43 0c 	call	0x1886	; 0x1886 <__divsf3>
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	34 e2       	ldi	r19, 0x24	; 36
    13c8:	44 e7       	ldi	r20, 0x74	; 116
    13ca:	59 e4       	ldi	r21, 0x49	; 73
    13cc:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__mulsf3>
    13d0:	4b 01       	movw	r8, r22
    13d2:	5c 01       	movw	r10, r24
	f64 f64_waveONTime = (f64_wavePeriodTime*u8_DutyCycle) / 100;		// The HIGH Level Time in Seconds //
    13d4:	6c 2f       	mov	r22, r28
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <__floatsisf>
    13e0:	a5 01       	movw	r20, r10
    13e2:	94 01       	movw	r18, r8
    13e4:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__mulsf3>
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	48 ec       	ldi	r20, 0xC8	; 200
    13ee:	52 e4       	ldi	r21, 0x42	; 66
    13f0:	0e 94 43 0c 	call	0x1886	; 0x1886 <__divsf3>
    13f4:	6b 01       	movw	r12, r22
    13f6:	7c 01       	movw	r14, r24
	f64 f64_waveOFFTime = f64_wavePeriodTime - f64_waveONTime;		   // The LOW Level Time in Seconds //
    13f8:	9b 01       	movw	r18, r22
    13fa:	ac 01       	movw	r20, r24
    13fc:	c5 01       	movw	r24, r10
    13fe:	b4 01       	movw	r22, r8
    1400:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__subsf3>
    1404:	4b 01       	movw	r8, r22
    1406:	5c 01       	movw	r10, r24
	f64 f64_oneTickTime = 0.0;
	f64_oneTickTime = (f64) (((f64)PWM_PRESCALER/(f64)F_CPU)*1000000);   //1u at 8,8
	//LCD_WriteNumber(f64_wavePeriodTime) ;
	f64 f64_max_time = (256*f64_oneTickTime); //256u
	//LCD_WriteNumber( f64_max_time) ;
	u32_ONTicks     =  f64_waveONTime/(f64_max_time-6);
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	4a e7       	ldi	r20, 0x7A	; 122
    140e:	53 e4       	ldi	r21, 0x43	; 67
    1410:	c7 01       	movw	r24, r14
    1412:	b6 01       	movw	r22, r12
    1414:	0e 94 43 0c 	call	0x1886	; 0x1886 <__divsf3>
    1418:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fixunssfsi>
    141c:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <u32_ONTicks>
    1420:	70 93 3e 01 	sts	0x013E, r23	; 0x80013e <u32_ONTicks+0x1>
    1424:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u32_ONTicks+0x2>
    1428:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <u32_ONTicks+0x3>
	u32_OFFTicks    =  f64_waveOFFTime/(f64_max_time-6);
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	4a e7       	ldi	r20, 0x7A	; 122
    1432:	53 e4       	ldi	r21, 0x43	; 67
    1434:	c5 01       	movw	r24, r10
    1436:	b4 01       	movw	r22, r8
    1438:	0e 94 43 0c 	call	0x1886	; 0x1886 <__divsf3>
    143c:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fixunssfsi>
    1440:	60 93 39 01 	sts	0x0139, r22	; 0x800139 <u32_OFFTicks>
    1444:	70 93 3a 01 	sts	0x013A, r23	; 0x80013a <u32_OFFTicks+0x1>
    1448:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <u32_OFFTicks+0x2>
    144c:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <u32_OFFTicks+0x3>
	DIO_writepin(PINB0,HIGH);
    1450:	61 e0       	ldi	r22, 0x01	; 1
    1452:	88 e0       	ldi	r24, 0x08	; 8
    1454:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_writepin>
}
    1458:	cf 91       	pop	r28
    145a:	ff 90       	pop	r15
    145c:	ef 90       	pop	r14
    145e:	df 90       	pop	r13
    1460:	cf 90       	pop	r12
    1462:	bf 90       	pop	r11
    1464:	af 90       	pop	r10
    1466:	9f 90       	pop	r9
    1468:	8f 90       	pop	r8
    146a:	08 95       	ret

0000146c <TIMER0_Init>:
{
	SET_BIT(TIMSK,TOIE2);
}
void TIMER2_OV_InterruptDisable(void)
{
	CLR_BIT(TIMSK,TOIE2);
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	69 f0       	breq	.+26     	; 0x148a <TIMER0_Init+0x1e>
    1470:	28 f0       	brcs	.+10     	; 0x147c <TIMER0_Init+0x10>
    1472:	82 30       	cpi	r24, 0x02	; 2
    1474:	89 f0       	breq	.+34     	; 0x1498 <TIMER0_Init+0x2c>
    1476:	83 30       	cpi	r24, 0x03	; 3
    1478:	b1 f0       	breq	.+44     	; 0x14a6 <TIMER0_Init+0x3a>
    147a:	08 95       	ret
    147c:	83 b7       	in	r24, 0x33	; 51
    147e:	8f 7b       	andi	r24, 0xBF	; 191
    1480:	83 bf       	out	0x33, r24	; 51
    1482:	83 b7       	in	r24, 0x33	; 51
    1484:	87 7f       	andi	r24, 0xF7	; 247
    1486:	83 bf       	out	0x33, r24	; 51
    1488:	08 95       	ret
    148a:	83 b7       	in	r24, 0x33	; 51
    148c:	80 64       	ori	r24, 0x40	; 64
    148e:	83 bf       	out	0x33, r24	; 51
    1490:	83 b7       	in	r24, 0x33	; 51
    1492:	87 7f       	andi	r24, 0xF7	; 247
    1494:	83 bf       	out	0x33, r24	; 51
    1496:	08 95       	ret
    1498:	83 b7       	in	r24, 0x33	; 51
    149a:	8f 7b       	andi	r24, 0xBF	; 191
    149c:	83 bf       	out	0x33, r24	; 51
    149e:	83 b7       	in	r24, 0x33	; 51
    14a0:	88 60       	ori	r24, 0x08	; 8
    14a2:	83 bf       	out	0x33, r24	; 51
    14a4:	08 95       	ret
    14a6:	83 b7       	in	r24, 0x33	; 51
    14a8:	80 64       	ori	r24, 0x40	; 64
    14aa:	83 bf       	out	0x33, r24	; 51
    14ac:	83 b7       	in	r24, 0x33	; 51
    14ae:	88 60       	ori	r24, 0x08	; 8
    14b0:	83 bf       	out	0x33, r24	; 51
    14b2:	08 95       	ret

000014b4 <TIMER0_OV_SetCallBack>:
    14b4:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <Timer0_OVF_Fptr+0x1>
    14b8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <Timer0_OVF_Fptr>
    14bc:	08 95       	ret

000014be <__vector_11>:
    14be:	1f 92       	push	r1
    14c0:	0f 92       	push	r0
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	0f 92       	push	r0
    14c6:	11 24       	eor	r1, r1
    14c8:	2f 93       	push	r18
    14ca:	3f 93       	push	r19
    14cc:	4f 93       	push	r20
    14ce:	5f 93       	push	r21
    14d0:	6f 93       	push	r22
    14d2:	7f 93       	push	r23
    14d4:	8f 93       	push	r24
    14d6:	9f 93       	push	r25
    14d8:	af 93       	push	r26
    14da:	bf 93       	push	r27
    14dc:	ef 93       	push	r30
    14de:	ff 93       	push	r31
    14e0:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <Timer0_OVF_Fptr>
    14e4:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <Timer0_OVF_Fptr+0x1>
    14e8:	30 97       	sbiw	r30, 0x00	; 0
    14ea:	09 f0       	breq	.+2      	; 0x14ee <__vector_11+0x30>
    14ec:	09 95       	icall
    14ee:	ff 91       	pop	r31
    14f0:	ef 91       	pop	r30
    14f2:	bf 91       	pop	r27
    14f4:	af 91       	pop	r26
    14f6:	9f 91       	pop	r25
    14f8:	8f 91       	pop	r24
    14fa:	7f 91       	pop	r23
    14fc:	6f 91       	pop	r22
    14fe:	5f 91       	pop	r21
    1500:	4f 91       	pop	r20
    1502:	3f 91       	pop	r19
    1504:	2f 91       	pop	r18
    1506:	0f 90       	pop	r0
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	0f 90       	pop	r0
    150c:	1f 90       	pop	r1
    150e:	18 95       	reti

00001510 <TIMER0_OV_InterruptEnable>:
    1510:	89 b7       	in	r24, 0x39	; 57
    1512:	81 60       	ori	r24, 0x01	; 1
    1514:	89 bf       	out	0x39, r24	; 57
    1516:	08 95       	ret

00001518 <Timer1_Init>:
    1518:	82 30       	cpi	r24, 0x02	; 2
    151a:	29 f1       	breq	.+74     	; 0x1566 <Timer1_Init+0x4e>
    151c:	28 f4       	brcc	.+10     	; 0x1528 <Timer1_Init+0x10>
    151e:	88 23       	and	r24, r24
    1520:	41 f0       	breq	.+16     	; 0x1532 <Timer1_Init+0x1a>
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	99 f0       	breq	.+38     	; 0x154c <Timer1_Init+0x34>
    1526:	45 c0       	rjmp	.+138    	; 0x15b2 <Timer1_Init+0x9a>
    1528:	83 30       	cpi	r24, 0x03	; 3
    152a:	51 f1       	breq	.+84     	; 0x1580 <Timer1_Init+0x68>
    152c:	84 30       	cpi	r24, 0x04	; 4
    152e:	a9 f1       	breq	.+106    	; 0x159a <Timer1_Init+0x82>
    1530:	40 c0       	rjmp	.+128    	; 0x15b2 <Timer1_Init+0x9a>
    1532:	8f b5       	in	r24, 0x2f	; 47
    1534:	8e 7f       	andi	r24, 0xFE	; 254
    1536:	8f bd       	out	0x2f, r24	; 47
    1538:	8f b5       	in	r24, 0x2f	; 47
    153a:	8d 7f       	andi	r24, 0xFD	; 253
    153c:	8f bd       	out	0x2f, r24	; 47
    153e:	8e b5       	in	r24, 0x2e	; 46
    1540:	87 7f       	andi	r24, 0xF7	; 247
    1542:	8e bd       	out	0x2e, r24	; 46
    1544:	8e b5       	in	r24, 0x2e	; 46
    1546:	8f 7e       	andi	r24, 0xEF	; 239
    1548:	8e bd       	out	0x2e, r24	; 46
    154a:	33 c0       	rjmp	.+102    	; 0x15b2 <Timer1_Init+0x9a>
    154c:	8f b5       	in	r24, 0x2f	; 47
    154e:	8e 7f       	andi	r24, 0xFE	; 254
    1550:	8f bd       	out	0x2f, r24	; 47
    1552:	8f b5       	in	r24, 0x2f	; 47
    1554:	8d 7f       	andi	r24, 0xFD	; 253
    1556:	8f bd       	out	0x2f, r24	; 47
    1558:	8e b5       	in	r24, 0x2e	; 46
    155a:	88 60       	ori	r24, 0x08	; 8
    155c:	8e bd       	out	0x2e, r24	; 46
    155e:	8e b5       	in	r24, 0x2e	; 46
    1560:	80 61       	ori	r24, 0x10	; 16
    1562:	8e bd       	out	0x2e, r24	; 46
    1564:	26 c0       	rjmp	.+76     	; 0x15b2 <Timer1_Init+0x9a>
    1566:	8f b5       	in	r24, 0x2f	; 47
    1568:	8e 7f       	andi	r24, 0xFE	; 254
    156a:	8f bd       	out	0x2f, r24	; 47
    156c:	8f b5       	in	r24, 0x2f	; 47
    156e:	8d 7f       	andi	r24, 0xFD	; 253
    1570:	8f bd       	out	0x2f, r24	; 47
    1572:	8e b5       	in	r24, 0x2e	; 46
    1574:	88 60       	ori	r24, 0x08	; 8
    1576:	8e bd       	out	0x2e, r24	; 46
    1578:	8e b5       	in	r24, 0x2e	; 46
    157a:	8f 7e       	andi	r24, 0xEF	; 239
    157c:	8e bd       	out	0x2e, r24	; 46
    157e:	19 c0       	rjmp	.+50     	; 0x15b2 <Timer1_Init+0x9a>
    1580:	8f b5       	in	r24, 0x2f	; 47
    1582:	8e 7f       	andi	r24, 0xFE	; 254
    1584:	8f bd       	out	0x2f, r24	; 47
    1586:	8f b5       	in	r24, 0x2f	; 47
    1588:	82 60       	ori	r24, 0x02	; 2
    158a:	8f bd       	out	0x2f, r24	; 47
    158c:	8e b5       	in	r24, 0x2e	; 46
    158e:	88 60       	ori	r24, 0x08	; 8
    1590:	8e bd       	out	0x2e, r24	; 46
    1592:	8e b5       	in	r24, 0x2e	; 46
    1594:	80 61       	ori	r24, 0x10	; 16
    1596:	8e bd       	out	0x2e, r24	; 46
    1598:	0c c0       	rjmp	.+24     	; 0x15b2 <Timer1_Init+0x9a>
    159a:	8f b5       	in	r24, 0x2f	; 47
    159c:	81 60       	ori	r24, 0x01	; 1
    159e:	8f bd       	out	0x2f, r24	; 47
    15a0:	8f b5       	in	r24, 0x2f	; 47
    15a2:	82 60       	ori	r24, 0x02	; 2
    15a4:	8f bd       	out	0x2f, r24	; 47
    15a6:	8e b5       	in	r24, 0x2e	; 46
    15a8:	88 60       	ori	r24, 0x08	; 8
    15aa:	8e bd       	out	0x2e, r24	; 46
    15ac:	8e b5       	in	r24, 0x2e	; 46
    15ae:	80 61       	ori	r24, 0x10	; 16
    15b0:	8e bd       	out	0x2e, r24	; 46
    15b2:	8e b5       	in	r24, 0x2e	; 46
    15b4:	88 7f       	andi	r24, 0xF8	; 248
    15b6:	8e bd       	out	0x2e, r24	; 46
    15b8:	8e b5       	in	r24, 0x2e	; 46
    15ba:	68 2b       	or	r22, r24
    15bc:	6e bd       	out	0x2e, r22	; 46
    15be:	08 95       	ret

000015c0 <__vector_9>:
    15c0:	1f 92       	push	r1
    15c2:	0f 92       	push	r0
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	0f 92       	push	r0
    15c8:	11 24       	eor	r1, r1
    15ca:	2f 93       	push	r18
    15cc:	3f 93       	push	r19
    15ce:	4f 93       	push	r20
    15d0:	5f 93       	push	r21
    15d2:	6f 93       	push	r22
    15d4:	7f 93       	push	r23
    15d6:	8f 93       	push	r24
    15d8:	9f 93       	push	r25
    15da:	af 93       	push	r26
    15dc:	bf 93       	push	r27
    15de:	ef 93       	push	r30
    15e0:	ff 93       	push	r31
    15e2:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <Timer1_OVF_Fptr>
    15e6:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <Timer1_OVF_Fptr+0x1>
    15ea:	30 97       	sbiw	r30, 0x00	; 0
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <__vector_9+0x30>
    15ee:	09 95       	icall
    15f0:	ff 91       	pop	r31
    15f2:	ef 91       	pop	r30
    15f4:	bf 91       	pop	r27
    15f6:	af 91       	pop	r26
    15f8:	9f 91       	pop	r25
    15fa:	8f 91       	pop	r24
    15fc:	7f 91       	pop	r23
    15fe:	6f 91       	pop	r22
    1600:	5f 91       	pop	r21
    1602:	4f 91       	pop	r20
    1604:	3f 91       	pop	r19
    1606:	2f 91       	pop	r18
    1608:	0f 90       	pop	r0
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	0f 90       	pop	r0
    160e:	1f 90       	pop	r1
    1610:	18 95       	reti

00001612 <__vector_8>:
    1612:	1f 92       	push	r1
    1614:	0f 92       	push	r0
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	0f 92       	push	r0
    161a:	11 24       	eor	r1, r1
    161c:	2f 93       	push	r18
    161e:	3f 93       	push	r19
    1620:	4f 93       	push	r20
    1622:	5f 93       	push	r21
    1624:	6f 93       	push	r22
    1626:	7f 93       	push	r23
    1628:	8f 93       	push	r24
    162a:	9f 93       	push	r25
    162c:	af 93       	push	r26
    162e:	bf 93       	push	r27
    1630:	ef 93       	push	r30
    1632:	ff 93       	push	r31
    1634:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <Timer1_OCB_Fptr>
    1638:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <Timer1_OCB_Fptr+0x1>
    163c:	30 97       	sbiw	r30, 0x00	; 0
    163e:	09 f0       	breq	.+2      	; 0x1642 <__vector_8+0x30>
    1640:	09 95       	icall
    1642:	ff 91       	pop	r31
    1644:	ef 91       	pop	r30
    1646:	bf 91       	pop	r27
    1648:	af 91       	pop	r26
    164a:	9f 91       	pop	r25
    164c:	8f 91       	pop	r24
    164e:	7f 91       	pop	r23
    1650:	6f 91       	pop	r22
    1652:	5f 91       	pop	r21
    1654:	4f 91       	pop	r20
    1656:	3f 91       	pop	r19
    1658:	2f 91       	pop	r18
    165a:	0f 90       	pop	r0
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	0f 90       	pop	r0
    1660:	1f 90       	pop	r1
    1662:	18 95       	reti

00001664 <__vector_6>:
    1664:	1f 92       	push	r1
    1666:	0f 92       	push	r0
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	0f 92       	push	r0
    166c:	11 24       	eor	r1, r1
    166e:	2f 93       	push	r18
    1670:	3f 93       	push	r19
    1672:	4f 93       	push	r20
    1674:	5f 93       	push	r21
    1676:	6f 93       	push	r22
    1678:	7f 93       	push	r23
    167a:	8f 93       	push	r24
    167c:	9f 93       	push	r25
    167e:	af 93       	push	r26
    1680:	bf 93       	push	r27
    1682:	ef 93       	push	r30
    1684:	ff 93       	push	r31
    1686:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <Timer1_ICU_Fptr>
    168a:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <Timer1_ICU_Fptr+0x1>
    168e:	30 97       	sbiw	r30, 0x00	; 0
    1690:	09 f0       	breq	.+2      	; 0x1694 <__vector_6+0x30>
    1692:	09 95       	icall
    1694:	ff 91       	pop	r31
    1696:	ef 91       	pop	r30
    1698:	bf 91       	pop	r27
    169a:	af 91       	pop	r26
    169c:	9f 91       	pop	r25
    169e:	8f 91       	pop	r24
    16a0:	7f 91       	pop	r23
    16a2:	6f 91       	pop	r22
    16a4:	5f 91       	pop	r21
    16a6:	4f 91       	pop	r20
    16a8:	3f 91       	pop	r19
    16aa:	2f 91       	pop	r18
    16ac:	0f 90       	pop	r0
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	0f 90       	pop	r0
    16b2:	1f 90       	pop	r1
    16b4:	18 95       	reti

000016b6 <timer1_ReadCounts>:
    16b6:	2c b5       	in	r18, 0x2c	; 44
    16b8:	3d b5       	in	r19, 0x2d	; 45
    16ba:	fc 01       	movw	r30, r24
    16bc:	31 83       	std	Z+1, r19	; 0x01
    16be:	20 83       	st	Z, r18
    16c0:	08 95       	ret

000016c2 <timer1_setTimerValue>:
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	9d bd       	out	0x2d, r25	; 45
    16c6:	8c bd       	out	0x2c, r24	; 44
    16c8:	08 95       	ret

000016ca <TIMER2_Init>:
    16ca:	81 30       	cpi	r24, 0x01	; 1
    16cc:	69 f0       	breq	.+26     	; 0x16e8 <TIMER2_Init+0x1e>
    16ce:	28 f0       	brcs	.+10     	; 0x16da <TIMER2_Init+0x10>
    16d0:	82 30       	cpi	r24, 0x02	; 2
    16d2:	89 f0       	breq	.+34     	; 0x16f6 <TIMER2_Init+0x2c>
    16d4:	83 30       	cpi	r24, 0x03	; 3
    16d6:	b1 f0       	breq	.+44     	; 0x1704 <TIMER2_Init+0x3a>
    16d8:	08 95       	ret
    16da:	85 b5       	in	r24, 0x25	; 37
    16dc:	8f 7b       	andi	r24, 0xBF	; 191
    16de:	85 bd       	out	0x25, r24	; 37
    16e0:	85 b5       	in	r24, 0x25	; 37
    16e2:	87 7f       	andi	r24, 0xF7	; 247
    16e4:	85 bd       	out	0x25, r24	; 37
    16e6:	08 95       	ret
    16e8:	85 b5       	in	r24, 0x25	; 37
    16ea:	80 64       	ori	r24, 0x40	; 64
    16ec:	85 bd       	out	0x25, r24	; 37
    16ee:	85 b5       	in	r24, 0x25	; 37
    16f0:	87 7f       	andi	r24, 0xF7	; 247
    16f2:	85 bd       	out	0x25, r24	; 37
    16f4:	08 95       	ret
    16f6:	85 b5       	in	r24, 0x25	; 37
    16f8:	8f 7b       	andi	r24, 0xBF	; 191
    16fa:	85 bd       	out	0x25, r24	; 37
    16fc:	85 b5       	in	r24, 0x25	; 37
    16fe:	88 60       	ori	r24, 0x08	; 8
    1700:	85 bd       	out	0x25, r24	; 37
    1702:	08 95       	ret
    1704:	85 b5       	in	r24, 0x25	; 37
    1706:	80 64       	ori	r24, 0x40	; 64
    1708:	85 bd       	out	0x25, r24	; 37
    170a:	85 b5       	in	r24, 0x25	; 37
    170c:	88 60       	ori	r24, 0x08	; 8
    170e:	85 bd       	out	0x25, r24	; 37
    1710:	08 95       	ret

00001712 <TIMER_2_setIntialValue>:
    1712:	84 bd       	out	0x24, r24	; 36
    1714:	84 e0       	ldi	r24, 0x04	; 4
    1716:	08 95       	ret

00001718 <timer2_start>:
    1718:	88 30       	cpi	r24, 0x08	; 8
    171a:	40 f4       	brcc	.+16     	; 0x172c <timer2_start+0x14>
    171c:	95 b5       	in	r25, 0x25	; 37
    171e:	98 7f       	andi	r25, 0xF8	; 248
    1720:	95 bd       	out	0x25, r25	; 37
    1722:	95 b5       	in	r25, 0x25	; 37
    1724:	89 2b       	or	r24, r25
    1726:	85 bd       	out	0x25, r24	; 37
    1728:	84 e0       	ldi	r24, 0x04	; 4
    172a:	08 95       	ret
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	08 95       	ret

00001730 <TIMER2_OV_InterruptEnable>:
    1730:	89 b7       	in	r24, 0x39	; 57
    1732:	80 64       	ori	r24, 0x40	; 64
    1734:	89 bf       	out	0x39, r24	; 57
    1736:	08 95       	ret

00001738 <TIMER_2_INT>:
    1738:	0e 94 98 0b 	call	0x1730	; 0x1730 <TIMER2_OV_InterruptEnable>
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	0e 94 65 0b 	call	0x16ca	; 0x16ca <TIMER2_Init>
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	0e 94 89 0b 	call	0x1712	; 0x1712 <TIMER_2_setIntialValue>
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <timer2_start>
    174e:	08 95       	ret

00001750 <TIMER2_OV_SetCallBack>:
}

////////////////////////////////////////////Timer 2 Call Back functions///////////////////////////////////////
void TIMER2_OV_SetCallBack(void(*LocalFptr)(void))
{
	Timer2_OVF_Fptr=LocalFptr;
    1750:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <Timer2_OVF_Fptr+0x1>
    1754:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <Timer2_OVF_Fptr>
    1758:	08 95       	ret

0000175a <__vector_5>:
}



ISR(TIMER2_OV_vect)
{
    175a:	1f 92       	push	r1
    175c:	0f 92       	push	r0
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	0f 92       	push	r0
    1762:	11 24       	eor	r1, r1
    1764:	2f 93       	push	r18
    1766:	3f 93       	push	r19
    1768:	4f 93       	push	r20
    176a:	5f 93       	push	r21
    176c:	6f 93       	push	r22
    176e:	7f 93       	push	r23
    1770:	8f 93       	push	r24
    1772:	9f 93       	push	r25
    1774:	af 93       	push	r26
    1776:	bf 93       	push	r27
    1778:	ef 93       	push	r30
    177a:	ff 93       	push	r31
	if(Timer2_OVF_Fptr!=NULLPTR)
    177c:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <Timer2_OVF_Fptr>
    1780:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <Timer2_OVF_Fptr+0x1>
    1784:	30 97       	sbiw	r30, 0x00	; 0
    1786:	09 f0       	breq	.+2      	; 0x178a <__vector_5+0x30>
	{
		Timer2_OVF_Fptr();
    1788:	09 95       	icall
	}
}
    178a:	ff 91       	pop	r31
    178c:	ef 91       	pop	r30
    178e:	bf 91       	pop	r27
    1790:	af 91       	pop	r26
    1792:	9f 91       	pop	r25
    1794:	8f 91       	pop	r24
    1796:	7f 91       	pop	r23
    1798:	6f 91       	pop	r22
    179a:	5f 91       	pop	r21
    179c:	4f 91       	pop	r20
    179e:	3f 91       	pop	r19
    17a0:	2f 91       	pop	r18
    17a2:	0f 90       	pop	r0
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	0f 90       	pop	r0
    17a8:	1f 90       	pop	r1
    17aa:	18 95       	reti

000017ac <__subsf3>:
    17ac:	50 58       	subi	r21, 0x80	; 128

000017ae <__addsf3>:
    17ae:	bb 27       	eor	r27, r27
    17b0:	aa 27       	eor	r26, r26
    17b2:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__addsf3x>
    17b6:	0c 94 38 0d 	jmp	0x1a70	; 0x1a70 <__fp_round>
    17ba:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__fp_pscA>
    17be:	38 f0       	brcs	.+14     	; 0x17ce <__addsf3+0x20>
    17c0:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__fp_pscB>
    17c4:	20 f0       	brcs	.+8      	; 0x17ce <__addsf3+0x20>
    17c6:	39 f4       	brne	.+14     	; 0x17d6 <__addsf3+0x28>
    17c8:	9f 3f       	cpi	r25, 0xFF	; 255
    17ca:	19 f4       	brne	.+6      	; 0x17d2 <__addsf3+0x24>
    17cc:	26 f4       	brtc	.+8      	; 0x17d6 <__addsf3+0x28>
    17ce:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__fp_nan>
    17d2:	0e f4       	brtc	.+2      	; 0x17d6 <__addsf3+0x28>
    17d4:	e0 95       	com	r30
    17d6:	e7 fb       	bst	r30, 7
    17d8:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__fp_inf>

000017dc <__addsf3x>:
    17dc:	e9 2f       	mov	r30, r25
    17de:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__fp_split3>
    17e2:	58 f3       	brcs	.-42     	; 0x17ba <__addsf3+0xc>
    17e4:	ba 17       	cp	r27, r26
    17e6:	62 07       	cpc	r22, r18
    17e8:	73 07       	cpc	r23, r19
    17ea:	84 07       	cpc	r24, r20
    17ec:	95 07       	cpc	r25, r21
    17ee:	20 f0       	brcs	.+8      	; 0x17f8 <__addsf3x+0x1c>
    17f0:	79 f4       	brne	.+30     	; 0x1810 <__addsf3x+0x34>
    17f2:	a6 f5       	brtc	.+104    	; 0x185c <__addsf3x+0x80>
    17f4:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__fp_zero>
    17f8:	0e f4       	brtc	.+2      	; 0x17fc <__addsf3x+0x20>
    17fa:	e0 95       	com	r30
    17fc:	0b 2e       	mov	r0, r27
    17fe:	ba 2f       	mov	r27, r26
    1800:	a0 2d       	mov	r26, r0
    1802:	0b 01       	movw	r0, r22
    1804:	b9 01       	movw	r22, r18
    1806:	90 01       	movw	r18, r0
    1808:	0c 01       	movw	r0, r24
    180a:	ca 01       	movw	r24, r20
    180c:	a0 01       	movw	r20, r0
    180e:	11 24       	eor	r1, r1
    1810:	ff 27       	eor	r31, r31
    1812:	59 1b       	sub	r21, r25
    1814:	99 f0       	breq	.+38     	; 0x183c <__addsf3x+0x60>
    1816:	59 3f       	cpi	r21, 0xF9	; 249
    1818:	50 f4       	brcc	.+20     	; 0x182e <__addsf3x+0x52>
    181a:	50 3e       	cpi	r21, 0xE0	; 224
    181c:	68 f1       	brcs	.+90     	; 0x1878 <__addsf3x+0x9c>
    181e:	1a 16       	cp	r1, r26
    1820:	f0 40       	sbci	r31, 0x00	; 0
    1822:	a2 2f       	mov	r26, r18
    1824:	23 2f       	mov	r18, r19
    1826:	34 2f       	mov	r19, r20
    1828:	44 27       	eor	r20, r20
    182a:	58 5f       	subi	r21, 0xF8	; 248
    182c:	f3 cf       	rjmp	.-26     	; 0x1814 <__addsf3x+0x38>
    182e:	46 95       	lsr	r20
    1830:	37 95       	ror	r19
    1832:	27 95       	ror	r18
    1834:	a7 95       	ror	r26
    1836:	f0 40       	sbci	r31, 0x00	; 0
    1838:	53 95       	inc	r21
    183a:	c9 f7       	brne	.-14     	; 0x182e <__addsf3x+0x52>
    183c:	7e f4       	brtc	.+30     	; 0x185c <__addsf3x+0x80>
    183e:	1f 16       	cp	r1, r31
    1840:	ba 0b       	sbc	r27, r26
    1842:	62 0b       	sbc	r22, r18
    1844:	73 0b       	sbc	r23, r19
    1846:	84 0b       	sbc	r24, r20
    1848:	ba f0       	brmi	.+46     	; 0x1878 <__addsf3x+0x9c>
    184a:	91 50       	subi	r25, 0x01	; 1
    184c:	a1 f0       	breq	.+40     	; 0x1876 <__addsf3x+0x9a>
    184e:	ff 0f       	add	r31, r31
    1850:	bb 1f       	adc	r27, r27
    1852:	66 1f       	adc	r22, r22
    1854:	77 1f       	adc	r23, r23
    1856:	88 1f       	adc	r24, r24
    1858:	c2 f7       	brpl	.-16     	; 0x184a <__addsf3x+0x6e>
    185a:	0e c0       	rjmp	.+28     	; 0x1878 <__addsf3x+0x9c>
    185c:	ba 0f       	add	r27, r26
    185e:	62 1f       	adc	r22, r18
    1860:	73 1f       	adc	r23, r19
    1862:	84 1f       	adc	r24, r20
    1864:	48 f4       	brcc	.+18     	; 0x1878 <__addsf3x+0x9c>
    1866:	87 95       	ror	r24
    1868:	77 95       	ror	r23
    186a:	67 95       	ror	r22
    186c:	b7 95       	ror	r27
    186e:	f7 95       	ror	r31
    1870:	9e 3f       	cpi	r25, 0xFE	; 254
    1872:	08 f0       	brcs	.+2      	; 0x1876 <__addsf3x+0x9a>
    1874:	b0 cf       	rjmp	.-160    	; 0x17d6 <__addsf3+0x28>
    1876:	93 95       	inc	r25
    1878:	88 0f       	add	r24, r24
    187a:	08 f0       	brcs	.+2      	; 0x187e <__addsf3x+0xa2>
    187c:	99 27       	eor	r25, r25
    187e:	ee 0f       	add	r30, r30
    1880:	97 95       	ror	r25
    1882:	87 95       	ror	r24
    1884:	08 95       	ret

00001886 <__divsf3>:
    1886:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__divsf3x>
    188a:	0c 94 38 0d 	jmp	0x1a70	; 0x1a70 <__fp_round>
    188e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__fp_pscB>
    1892:	58 f0       	brcs	.+22     	; 0x18aa <__divsf3+0x24>
    1894:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__fp_pscA>
    1898:	40 f0       	brcs	.+16     	; 0x18aa <__divsf3+0x24>
    189a:	29 f4       	brne	.+10     	; 0x18a6 <__divsf3+0x20>
    189c:	5f 3f       	cpi	r21, 0xFF	; 255
    189e:	29 f0       	breq	.+10     	; 0x18aa <__divsf3+0x24>
    18a0:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__fp_inf>
    18a4:	51 11       	cpse	r21, r1
    18a6:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__fp_szero>
    18aa:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__fp_nan>

000018ae <__divsf3x>:
    18ae:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__fp_split3>
    18b2:	68 f3       	brcs	.-38     	; 0x188e <__divsf3+0x8>

000018b4 <__divsf3_pse>:
    18b4:	99 23       	and	r25, r25
    18b6:	b1 f3       	breq	.-20     	; 0x18a4 <__divsf3+0x1e>
    18b8:	55 23       	and	r21, r21
    18ba:	91 f3       	breq	.-28     	; 0x18a0 <__divsf3+0x1a>
    18bc:	95 1b       	sub	r25, r21
    18be:	55 0b       	sbc	r21, r21
    18c0:	bb 27       	eor	r27, r27
    18c2:	aa 27       	eor	r26, r26
    18c4:	62 17       	cp	r22, r18
    18c6:	73 07       	cpc	r23, r19
    18c8:	84 07       	cpc	r24, r20
    18ca:	38 f0       	brcs	.+14     	; 0x18da <__divsf3_pse+0x26>
    18cc:	9f 5f       	subi	r25, 0xFF	; 255
    18ce:	5f 4f       	sbci	r21, 0xFF	; 255
    18d0:	22 0f       	add	r18, r18
    18d2:	33 1f       	adc	r19, r19
    18d4:	44 1f       	adc	r20, r20
    18d6:	aa 1f       	adc	r26, r26
    18d8:	a9 f3       	breq	.-22     	; 0x18c4 <__divsf3_pse+0x10>
    18da:	35 d0       	rcall	.+106    	; 0x1946 <__divsf3_pse+0x92>
    18dc:	0e 2e       	mov	r0, r30
    18de:	3a f0       	brmi	.+14     	; 0x18ee <__divsf3_pse+0x3a>
    18e0:	e0 e8       	ldi	r30, 0x80	; 128
    18e2:	32 d0       	rcall	.+100    	; 0x1948 <__divsf3_pse+0x94>
    18e4:	91 50       	subi	r25, 0x01	; 1
    18e6:	50 40       	sbci	r21, 0x00	; 0
    18e8:	e6 95       	lsr	r30
    18ea:	00 1c       	adc	r0, r0
    18ec:	ca f7       	brpl	.-14     	; 0x18e0 <__divsf3_pse+0x2c>
    18ee:	2b d0       	rcall	.+86     	; 0x1946 <__divsf3_pse+0x92>
    18f0:	fe 2f       	mov	r31, r30
    18f2:	29 d0       	rcall	.+82     	; 0x1946 <__divsf3_pse+0x92>
    18f4:	66 0f       	add	r22, r22
    18f6:	77 1f       	adc	r23, r23
    18f8:	88 1f       	adc	r24, r24
    18fa:	bb 1f       	adc	r27, r27
    18fc:	26 17       	cp	r18, r22
    18fe:	37 07       	cpc	r19, r23
    1900:	48 07       	cpc	r20, r24
    1902:	ab 07       	cpc	r26, r27
    1904:	b0 e8       	ldi	r27, 0x80	; 128
    1906:	09 f0       	breq	.+2      	; 0x190a <__divsf3_pse+0x56>
    1908:	bb 0b       	sbc	r27, r27
    190a:	80 2d       	mov	r24, r0
    190c:	bf 01       	movw	r22, r30
    190e:	ff 27       	eor	r31, r31
    1910:	93 58       	subi	r25, 0x83	; 131
    1912:	5f 4f       	sbci	r21, 0xFF	; 255
    1914:	3a f0       	brmi	.+14     	; 0x1924 <__divsf3_pse+0x70>
    1916:	9e 3f       	cpi	r25, 0xFE	; 254
    1918:	51 05       	cpc	r21, r1
    191a:	78 f0       	brcs	.+30     	; 0x193a <__divsf3_pse+0x86>
    191c:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__fp_inf>
    1920:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__fp_szero>
    1924:	5f 3f       	cpi	r21, 0xFF	; 255
    1926:	e4 f3       	brlt	.-8      	; 0x1920 <__divsf3_pse+0x6c>
    1928:	98 3e       	cpi	r25, 0xE8	; 232
    192a:	d4 f3       	brlt	.-12     	; 0x1920 <__divsf3_pse+0x6c>
    192c:	86 95       	lsr	r24
    192e:	77 95       	ror	r23
    1930:	67 95       	ror	r22
    1932:	b7 95       	ror	r27
    1934:	f7 95       	ror	r31
    1936:	9f 5f       	subi	r25, 0xFF	; 255
    1938:	c9 f7       	brne	.-14     	; 0x192c <__divsf3_pse+0x78>
    193a:	88 0f       	add	r24, r24
    193c:	91 1d       	adc	r25, r1
    193e:	96 95       	lsr	r25
    1940:	87 95       	ror	r24
    1942:	97 f9       	bld	r25, 7
    1944:	08 95       	ret
    1946:	e1 e0       	ldi	r30, 0x01	; 1
    1948:	66 0f       	add	r22, r22
    194a:	77 1f       	adc	r23, r23
    194c:	88 1f       	adc	r24, r24
    194e:	bb 1f       	adc	r27, r27
    1950:	62 17       	cp	r22, r18
    1952:	73 07       	cpc	r23, r19
    1954:	84 07       	cpc	r24, r20
    1956:	ba 07       	cpc	r27, r26
    1958:	20 f0       	brcs	.+8      	; 0x1962 <__divsf3_pse+0xae>
    195a:	62 1b       	sub	r22, r18
    195c:	73 0b       	sbc	r23, r19
    195e:	84 0b       	sbc	r24, r20
    1960:	ba 0b       	sbc	r27, r26
    1962:	ee 1f       	adc	r30, r30
    1964:	88 f7       	brcc	.-30     	; 0x1948 <__divsf3_pse+0x94>
    1966:	e0 95       	com	r30
    1968:	08 95       	ret

0000196a <__fixunssfsi>:
    196a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__fp_splitA>
    196e:	88 f0       	brcs	.+34     	; 0x1992 <__fixunssfsi+0x28>
    1970:	9f 57       	subi	r25, 0x7F	; 127
    1972:	98 f0       	brcs	.+38     	; 0x199a <__fixunssfsi+0x30>
    1974:	b9 2f       	mov	r27, r25
    1976:	99 27       	eor	r25, r25
    1978:	b7 51       	subi	r27, 0x17	; 23
    197a:	b0 f0       	brcs	.+44     	; 0x19a8 <__fixunssfsi+0x3e>
    197c:	e1 f0       	breq	.+56     	; 0x19b6 <__fixunssfsi+0x4c>
    197e:	66 0f       	add	r22, r22
    1980:	77 1f       	adc	r23, r23
    1982:	88 1f       	adc	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	1a f0       	brmi	.+6      	; 0x198e <__fixunssfsi+0x24>
    1988:	ba 95       	dec	r27
    198a:	c9 f7       	brne	.-14     	; 0x197e <__fixunssfsi+0x14>
    198c:	14 c0       	rjmp	.+40     	; 0x19b6 <__fixunssfsi+0x4c>
    198e:	b1 30       	cpi	r27, 0x01	; 1
    1990:	91 f0       	breq	.+36     	; 0x19b6 <__fixunssfsi+0x4c>
    1992:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__fp_zero>
    1996:	b1 e0       	ldi	r27, 0x01	; 1
    1998:	08 95       	ret
    199a:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__fp_zero>
    199e:	67 2f       	mov	r22, r23
    19a0:	78 2f       	mov	r23, r24
    19a2:	88 27       	eor	r24, r24
    19a4:	b8 5f       	subi	r27, 0xF8	; 248
    19a6:	39 f0       	breq	.+14     	; 0x19b6 <__fixunssfsi+0x4c>
    19a8:	b9 3f       	cpi	r27, 0xF9	; 249
    19aa:	cc f3       	brlt	.-14     	; 0x199e <__fixunssfsi+0x34>
    19ac:	86 95       	lsr	r24
    19ae:	77 95       	ror	r23
    19b0:	67 95       	ror	r22
    19b2:	b3 95       	inc	r27
    19b4:	d9 f7       	brne	.-10     	; 0x19ac <__fixunssfsi+0x42>
    19b6:	3e f4       	brtc	.+14     	; 0x19c6 <__fixunssfsi+0x5c>
    19b8:	90 95       	com	r25
    19ba:	80 95       	com	r24
    19bc:	70 95       	com	r23
    19be:	61 95       	neg	r22
    19c0:	7f 4f       	sbci	r23, 0xFF	; 255
    19c2:	8f 4f       	sbci	r24, 0xFF	; 255
    19c4:	9f 4f       	sbci	r25, 0xFF	; 255
    19c6:	08 95       	ret

000019c8 <__floatunsisf>:
    19c8:	e8 94       	clt
    19ca:	09 c0       	rjmp	.+18     	; 0x19de <__floatsisf+0x12>

000019cc <__floatsisf>:
    19cc:	97 fb       	bst	r25, 7
    19ce:	3e f4       	brtc	.+14     	; 0x19de <__floatsisf+0x12>
    19d0:	90 95       	com	r25
    19d2:	80 95       	com	r24
    19d4:	70 95       	com	r23
    19d6:	61 95       	neg	r22
    19d8:	7f 4f       	sbci	r23, 0xFF	; 255
    19da:	8f 4f       	sbci	r24, 0xFF	; 255
    19dc:	9f 4f       	sbci	r25, 0xFF	; 255
    19de:	99 23       	and	r25, r25
    19e0:	a9 f0       	breq	.+42     	; 0x1a0c <__floatsisf+0x40>
    19e2:	f9 2f       	mov	r31, r25
    19e4:	96 e9       	ldi	r25, 0x96	; 150
    19e6:	bb 27       	eor	r27, r27
    19e8:	93 95       	inc	r25
    19ea:	f6 95       	lsr	r31
    19ec:	87 95       	ror	r24
    19ee:	77 95       	ror	r23
    19f0:	67 95       	ror	r22
    19f2:	b7 95       	ror	r27
    19f4:	f1 11       	cpse	r31, r1
    19f6:	f8 cf       	rjmp	.-16     	; 0x19e8 <__floatsisf+0x1c>
    19f8:	fa f4       	brpl	.+62     	; 0x1a38 <__floatsisf+0x6c>
    19fa:	bb 0f       	add	r27, r27
    19fc:	11 f4       	brne	.+4      	; 0x1a02 <__floatsisf+0x36>
    19fe:	60 ff       	sbrs	r22, 0
    1a00:	1b c0       	rjmp	.+54     	; 0x1a38 <__floatsisf+0x6c>
    1a02:	6f 5f       	subi	r22, 0xFF	; 255
    1a04:	7f 4f       	sbci	r23, 0xFF	; 255
    1a06:	8f 4f       	sbci	r24, 0xFF	; 255
    1a08:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0a:	16 c0       	rjmp	.+44     	; 0x1a38 <__floatsisf+0x6c>
    1a0c:	88 23       	and	r24, r24
    1a0e:	11 f0       	breq	.+4      	; 0x1a14 <__floatsisf+0x48>
    1a10:	96 e9       	ldi	r25, 0x96	; 150
    1a12:	11 c0       	rjmp	.+34     	; 0x1a36 <__floatsisf+0x6a>
    1a14:	77 23       	and	r23, r23
    1a16:	21 f0       	breq	.+8      	; 0x1a20 <__floatsisf+0x54>
    1a18:	9e e8       	ldi	r25, 0x8E	; 142
    1a1a:	87 2f       	mov	r24, r23
    1a1c:	76 2f       	mov	r23, r22
    1a1e:	05 c0       	rjmp	.+10     	; 0x1a2a <__floatsisf+0x5e>
    1a20:	66 23       	and	r22, r22
    1a22:	71 f0       	breq	.+28     	; 0x1a40 <__floatsisf+0x74>
    1a24:	96 e8       	ldi	r25, 0x86	; 134
    1a26:	86 2f       	mov	r24, r22
    1a28:	70 e0       	ldi	r23, 0x00	; 0
    1a2a:	60 e0       	ldi	r22, 0x00	; 0
    1a2c:	2a f0       	brmi	.+10     	; 0x1a38 <__floatsisf+0x6c>
    1a2e:	9a 95       	dec	r25
    1a30:	66 0f       	add	r22, r22
    1a32:	77 1f       	adc	r23, r23
    1a34:	88 1f       	adc	r24, r24
    1a36:	da f7       	brpl	.-10     	; 0x1a2e <__floatsisf+0x62>
    1a38:	88 0f       	add	r24, r24
    1a3a:	96 95       	lsr	r25
    1a3c:	87 95       	ror	r24
    1a3e:	97 f9       	bld	r25, 7
    1a40:	08 95       	ret

00001a42 <__fp_inf>:
    1a42:	97 f9       	bld	r25, 7
    1a44:	9f 67       	ori	r25, 0x7F	; 127
    1a46:	80 e8       	ldi	r24, 0x80	; 128
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	08 95       	ret

00001a4e <__fp_nan>:
    1a4e:	9f ef       	ldi	r25, 0xFF	; 255
    1a50:	80 ec       	ldi	r24, 0xC0	; 192
    1a52:	08 95       	ret

00001a54 <__fp_pscA>:
    1a54:	00 24       	eor	r0, r0
    1a56:	0a 94       	dec	r0
    1a58:	16 16       	cp	r1, r22
    1a5a:	17 06       	cpc	r1, r23
    1a5c:	18 06       	cpc	r1, r24
    1a5e:	09 06       	cpc	r0, r25
    1a60:	08 95       	ret

00001a62 <__fp_pscB>:
    1a62:	00 24       	eor	r0, r0
    1a64:	0a 94       	dec	r0
    1a66:	12 16       	cp	r1, r18
    1a68:	13 06       	cpc	r1, r19
    1a6a:	14 06       	cpc	r1, r20
    1a6c:	05 06       	cpc	r0, r21
    1a6e:	08 95       	ret

00001a70 <__fp_round>:
    1a70:	09 2e       	mov	r0, r25
    1a72:	03 94       	inc	r0
    1a74:	00 0c       	add	r0, r0
    1a76:	11 f4       	brne	.+4      	; 0x1a7c <__fp_round+0xc>
    1a78:	88 23       	and	r24, r24
    1a7a:	52 f0       	brmi	.+20     	; 0x1a90 <__fp_round+0x20>
    1a7c:	bb 0f       	add	r27, r27
    1a7e:	40 f4       	brcc	.+16     	; 0x1a90 <__fp_round+0x20>
    1a80:	bf 2b       	or	r27, r31
    1a82:	11 f4       	brne	.+4      	; 0x1a88 <__fp_round+0x18>
    1a84:	60 ff       	sbrs	r22, 0
    1a86:	04 c0       	rjmp	.+8      	; 0x1a90 <__fp_round+0x20>
    1a88:	6f 5f       	subi	r22, 0xFF	; 255
    1a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a90:	08 95       	ret

00001a92 <__fp_split3>:
    1a92:	57 fd       	sbrc	r21, 7
    1a94:	90 58       	subi	r25, 0x80	; 128
    1a96:	44 0f       	add	r20, r20
    1a98:	55 1f       	adc	r21, r21
    1a9a:	59 f0       	breq	.+22     	; 0x1ab2 <__fp_splitA+0x10>
    1a9c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a9e:	71 f0       	breq	.+28     	; 0x1abc <__fp_splitA+0x1a>
    1aa0:	47 95       	ror	r20

00001aa2 <__fp_splitA>:
    1aa2:	88 0f       	add	r24, r24
    1aa4:	97 fb       	bst	r25, 7
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	61 f0       	breq	.+24     	; 0x1ac2 <__fp_splitA+0x20>
    1aaa:	9f 3f       	cpi	r25, 0xFF	; 255
    1aac:	79 f0       	breq	.+30     	; 0x1acc <__fp_splitA+0x2a>
    1aae:	87 95       	ror	r24
    1ab0:	08 95       	ret
    1ab2:	12 16       	cp	r1, r18
    1ab4:	13 06       	cpc	r1, r19
    1ab6:	14 06       	cpc	r1, r20
    1ab8:	55 1f       	adc	r21, r21
    1aba:	f2 cf       	rjmp	.-28     	; 0x1aa0 <__fp_split3+0xe>
    1abc:	46 95       	lsr	r20
    1abe:	f1 df       	rcall	.-30     	; 0x1aa2 <__fp_splitA>
    1ac0:	08 c0       	rjmp	.+16     	; 0x1ad2 <__fp_splitA+0x30>
    1ac2:	16 16       	cp	r1, r22
    1ac4:	17 06       	cpc	r1, r23
    1ac6:	18 06       	cpc	r1, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	f1 cf       	rjmp	.-30     	; 0x1aae <__fp_splitA+0xc>
    1acc:	86 95       	lsr	r24
    1ace:	71 05       	cpc	r23, r1
    1ad0:	61 05       	cpc	r22, r1
    1ad2:	08 94       	sec
    1ad4:	08 95       	ret

00001ad6 <__fp_zero>:
    1ad6:	e8 94       	clt

00001ad8 <__fp_szero>:
    1ad8:	bb 27       	eor	r27, r27
    1ada:	66 27       	eor	r22, r22
    1adc:	77 27       	eor	r23, r23
    1ade:	cb 01       	movw	r24, r22
    1ae0:	97 f9       	bld	r25, 7
    1ae2:	08 95       	ret

00001ae4 <__mulsf3>:
    1ae4:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__mulsf3x>
    1ae8:	0c 94 38 0d 	jmp	0x1a70	; 0x1a70 <__fp_round>
    1aec:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__fp_pscA>
    1af0:	38 f0       	brcs	.+14     	; 0x1b00 <__mulsf3+0x1c>
    1af2:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__fp_pscB>
    1af6:	20 f0       	brcs	.+8      	; 0x1b00 <__mulsf3+0x1c>
    1af8:	95 23       	and	r25, r21
    1afa:	11 f0       	breq	.+4      	; 0x1b00 <__mulsf3+0x1c>
    1afc:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__fp_inf>
    1b00:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__fp_nan>
    1b04:	11 24       	eor	r1, r1
    1b06:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__fp_szero>

00001b0a <__mulsf3x>:
    1b0a:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__fp_split3>
    1b0e:	70 f3       	brcs	.-36     	; 0x1aec <__mulsf3+0x8>

00001b10 <__mulsf3_pse>:
    1b10:	95 9f       	mul	r25, r21
    1b12:	c1 f3       	breq	.-16     	; 0x1b04 <__mulsf3+0x20>
    1b14:	95 0f       	add	r25, r21
    1b16:	50 e0       	ldi	r21, 0x00	; 0
    1b18:	55 1f       	adc	r21, r21
    1b1a:	62 9f       	mul	r22, r18
    1b1c:	f0 01       	movw	r30, r0
    1b1e:	72 9f       	mul	r23, r18
    1b20:	bb 27       	eor	r27, r27
    1b22:	f0 0d       	add	r31, r0
    1b24:	b1 1d       	adc	r27, r1
    1b26:	63 9f       	mul	r22, r19
    1b28:	aa 27       	eor	r26, r26
    1b2a:	f0 0d       	add	r31, r0
    1b2c:	b1 1d       	adc	r27, r1
    1b2e:	aa 1f       	adc	r26, r26
    1b30:	64 9f       	mul	r22, r20
    1b32:	66 27       	eor	r22, r22
    1b34:	b0 0d       	add	r27, r0
    1b36:	a1 1d       	adc	r26, r1
    1b38:	66 1f       	adc	r22, r22
    1b3a:	82 9f       	mul	r24, r18
    1b3c:	22 27       	eor	r18, r18
    1b3e:	b0 0d       	add	r27, r0
    1b40:	a1 1d       	adc	r26, r1
    1b42:	62 1f       	adc	r22, r18
    1b44:	73 9f       	mul	r23, r19
    1b46:	b0 0d       	add	r27, r0
    1b48:	a1 1d       	adc	r26, r1
    1b4a:	62 1f       	adc	r22, r18
    1b4c:	83 9f       	mul	r24, r19
    1b4e:	a0 0d       	add	r26, r0
    1b50:	61 1d       	adc	r22, r1
    1b52:	22 1f       	adc	r18, r18
    1b54:	74 9f       	mul	r23, r20
    1b56:	33 27       	eor	r19, r19
    1b58:	a0 0d       	add	r26, r0
    1b5a:	61 1d       	adc	r22, r1
    1b5c:	23 1f       	adc	r18, r19
    1b5e:	84 9f       	mul	r24, r20
    1b60:	60 0d       	add	r22, r0
    1b62:	21 1d       	adc	r18, r1
    1b64:	82 2f       	mov	r24, r18
    1b66:	76 2f       	mov	r23, r22
    1b68:	6a 2f       	mov	r22, r26
    1b6a:	11 24       	eor	r1, r1
    1b6c:	9f 57       	subi	r25, 0x7F	; 127
    1b6e:	50 40       	sbci	r21, 0x00	; 0
    1b70:	9a f0       	brmi	.+38     	; 0x1b98 <__mulsf3_pse+0x88>
    1b72:	f1 f0       	breq	.+60     	; 0x1bb0 <__mulsf3_pse+0xa0>
    1b74:	88 23       	and	r24, r24
    1b76:	4a f0       	brmi	.+18     	; 0x1b8a <__mulsf3_pse+0x7a>
    1b78:	ee 0f       	add	r30, r30
    1b7a:	ff 1f       	adc	r31, r31
    1b7c:	bb 1f       	adc	r27, r27
    1b7e:	66 1f       	adc	r22, r22
    1b80:	77 1f       	adc	r23, r23
    1b82:	88 1f       	adc	r24, r24
    1b84:	91 50       	subi	r25, 0x01	; 1
    1b86:	50 40       	sbci	r21, 0x00	; 0
    1b88:	a9 f7       	brne	.-22     	; 0x1b74 <__mulsf3_pse+0x64>
    1b8a:	9e 3f       	cpi	r25, 0xFE	; 254
    1b8c:	51 05       	cpc	r21, r1
    1b8e:	80 f0       	brcs	.+32     	; 0x1bb0 <__mulsf3_pse+0xa0>
    1b90:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__fp_inf>
    1b94:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__fp_szero>
    1b98:	5f 3f       	cpi	r21, 0xFF	; 255
    1b9a:	e4 f3       	brlt	.-8      	; 0x1b94 <__mulsf3_pse+0x84>
    1b9c:	98 3e       	cpi	r25, 0xE8	; 232
    1b9e:	d4 f3       	brlt	.-12     	; 0x1b94 <__mulsf3_pse+0x84>
    1ba0:	86 95       	lsr	r24
    1ba2:	77 95       	ror	r23
    1ba4:	67 95       	ror	r22
    1ba6:	b7 95       	ror	r27
    1ba8:	f7 95       	ror	r31
    1baa:	e7 95       	ror	r30
    1bac:	9f 5f       	subi	r25, 0xFF	; 255
    1bae:	c1 f7       	brne	.-16     	; 0x1ba0 <__mulsf3_pse+0x90>
    1bb0:	fe 2b       	or	r31, r30
    1bb2:	88 0f       	add	r24, r24
    1bb4:	91 1d       	adc	r25, r1
    1bb6:	96 95       	lsr	r25
    1bb8:	87 95       	ror	r24
    1bba:	97 f9       	bld	r25, 7
    1bbc:	08 95       	ret

00001bbe <__divmodsi4>:
    1bbe:	05 2e       	mov	r0, r21
    1bc0:	97 fb       	bst	r25, 7
    1bc2:	1e f4       	brtc	.+6      	; 0x1bca <__divmodsi4+0xc>
    1bc4:	00 94       	com	r0
    1bc6:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__negsi2>
    1bca:	57 fd       	sbrc	r21, 7
    1bcc:	07 d0       	rcall	.+14     	; 0x1bdc <__divmodsi4_neg2>
    1bce:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__udivmodsi4>
    1bd2:	07 fc       	sbrc	r0, 7
    1bd4:	03 d0       	rcall	.+6      	; 0x1bdc <__divmodsi4_neg2>
    1bd6:	4e f4       	brtc	.+18     	; 0x1bea <__divmodsi4_exit>
    1bd8:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__negsi2>

00001bdc <__divmodsi4_neg2>:
    1bdc:	50 95       	com	r21
    1bde:	40 95       	com	r20
    1be0:	30 95       	com	r19
    1be2:	21 95       	neg	r18
    1be4:	3f 4f       	sbci	r19, 0xFF	; 255
    1be6:	4f 4f       	sbci	r20, 0xFF	; 255
    1be8:	5f 4f       	sbci	r21, 0xFF	; 255

00001bea <__divmodsi4_exit>:
    1bea:	08 95       	ret

00001bec <__negsi2>:
    1bec:	90 95       	com	r25
    1bee:	80 95       	com	r24
    1bf0:	70 95       	com	r23
    1bf2:	61 95       	neg	r22
    1bf4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf6:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfa:	08 95       	ret

00001bfc <__umulhisi3>:
    1bfc:	a2 9f       	mul	r26, r18
    1bfe:	b0 01       	movw	r22, r0
    1c00:	b3 9f       	mul	r27, r19
    1c02:	c0 01       	movw	r24, r0
    1c04:	a3 9f       	mul	r26, r19
    1c06:	70 0d       	add	r23, r0
    1c08:	81 1d       	adc	r24, r1
    1c0a:	11 24       	eor	r1, r1
    1c0c:	91 1d       	adc	r25, r1
    1c0e:	b2 9f       	mul	r27, r18
    1c10:	70 0d       	add	r23, r0
    1c12:	81 1d       	adc	r24, r1
    1c14:	11 24       	eor	r1, r1
    1c16:	91 1d       	adc	r25, r1
    1c18:	08 95       	ret

00001c1a <__udivmodsi4>:
    1c1a:	a1 e2       	ldi	r26, 0x21	; 33
    1c1c:	1a 2e       	mov	r1, r26
    1c1e:	aa 1b       	sub	r26, r26
    1c20:	bb 1b       	sub	r27, r27
    1c22:	fd 01       	movw	r30, r26
    1c24:	0d c0       	rjmp	.+26     	; 0x1c40 <__udivmodsi4_ep>

00001c26 <__udivmodsi4_loop>:
    1c26:	aa 1f       	adc	r26, r26
    1c28:	bb 1f       	adc	r27, r27
    1c2a:	ee 1f       	adc	r30, r30
    1c2c:	ff 1f       	adc	r31, r31
    1c2e:	a2 17       	cp	r26, r18
    1c30:	b3 07       	cpc	r27, r19
    1c32:	e4 07       	cpc	r30, r20
    1c34:	f5 07       	cpc	r31, r21
    1c36:	20 f0       	brcs	.+8      	; 0x1c40 <__udivmodsi4_ep>
    1c38:	a2 1b       	sub	r26, r18
    1c3a:	b3 0b       	sbc	r27, r19
    1c3c:	e4 0b       	sbc	r30, r20
    1c3e:	f5 0b       	sbc	r31, r21

00001c40 <__udivmodsi4_ep>:
    1c40:	66 1f       	adc	r22, r22
    1c42:	77 1f       	adc	r23, r23
    1c44:	88 1f       	adc	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	1a 94       	dec	r1
    1c4a:	69 f7       	brne	.-38     	; 0x1c26 <__udivmodsi4_loop>
    1c4c:	60 95       	com	r22
    1c4e:	70 95       	com	r23
    1c50:	80 95       	com	r24
    1c52:	90 95       	com	r25
    1c54:	9b 01       	movw	r18, r22
    1c56:	ac 01       	movw	r20, r24
    1c58:	bd 01       	movw	r22, r26
    1c5a:	cf 01       	movw	r24, r30
    1c5c:	08 95       	ret

00001c5e <_exit>:
    1c5e:	f8 94       	cli

00001c60 <__stop_program>:
    1c60:	ff cf       	rjmp	.-2      	; 0x1c60 <__stop_program>
