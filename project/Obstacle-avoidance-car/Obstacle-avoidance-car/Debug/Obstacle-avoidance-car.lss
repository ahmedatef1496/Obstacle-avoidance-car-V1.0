
Obstacle-avoidance-car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001866  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000082  00800060  00001866  000018fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  008000e2  008000e2  0000197c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  000019e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000480d  00000000  00000000  00001df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014b8  00000000  00000000  00006605  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002584  00000000  00000000  00007abd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ac8  00000000  00000000  0000a044  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001318  00000000  00000000  0000ab0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000288e  00000000  00000000  0000be24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  0000e6b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__vector_1>
       8:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__vector_2>
       c:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__vector_3>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <__vector_5>
      18:	0c 94 be 08 	jmp	0x117c	; 0x117c <__vector_6>
      1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      20:	0c 94 95 08 	jmp	0x112a	; 0x112a <__vector_8>
      24:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__vector_9>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <__vector_11>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	1e 09       	sbc	r17, r14
      56:	29 09       	sbc	r18, r9
      58:	3f 09       	sbc	r19, r15
      5a:	34 09       	sbc	r19, r4
      5c:	4a 09       	sbc	r20, r10
      5e:	55 09       	sbc	r21, r5
      60:	60 09       	sbc	r22, r0

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e6 e6       	ldi	r30, 0x66	; 102
      76:	f8 e1       	ldi	r31, 0x18	; 24
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a2 3e       	cpi	r26, 0xE2	; 226
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	21 e0       	ldi	r18, 0x01	; 1
      86:	a2 ee       	ldi	r26, 0xE2	; 226
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	ad 30       	cpi	r26, 0x0D	; 13
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 2e 04 	call	0x85c	; 0x85c <main>
      98:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <car_Forward_30>:



void car_Forward_30()
{	
	LCD_Clear();
      a0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <LCD_Clear>
	PWM_set_duty(30,100);
      a4:	44 e6       	ldi	r20, 0x64	; 100
      a6:	50 e0       	ldi	r21, 0x00	; 0
      a8:	60 e0       	ldi	r22, 0x00	; 0
      aa:	70 e0       	ldi	r23, 0x00	; 0
      ac:	8e e1       	ldi	r24, 0x1E	; 30
      ae:	0e 94 4c 07 	call	0xe98	; 0xe98 <PWM_set_duty>
	timer_start(TIMER0_SCALER_8);
      b2:	82 e0       	ldi	r24, 0x02	; 2
      b4:	0e 94 da 07 	call	0xfb4	; 0xfb4 <timer_start>
	Car_Moving_FWD();
      b8:	0e 94 75 03 	call	0x6ea	; 0x6ea <Car_Moving_FWD>
	LCD_SetCursor(0,0);
      bc:	60 e0       	ldi	r22, 0x00	; 0
      be:	80 e0       	ldi	r24, 0x00	; 0
      c0:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_SetCursor>
	LCD_WriteString("Speed:30% Dir:	F");
      c4:	82 e6       	ldi	r24, 0x62	; 98
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_WriteString>
	LCD_SetCursor(1,0);
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_SetCursor>
	LCD_WriteString("Dist.:");
      d4:	83 e7       	ldi	r24, 0x73	; 115
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_WriteString>
	LCD_WriteNumber(g_distance);
      dc:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <g_distance>
      e0:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <g_distance+0x1>
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <LCD_WriteNumber>
	LCD_WriteString(" Cm");
      ec:	8a e7       	ldi	r24, 0x7A	; 122
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_WriteString>
      f4:	08 95       	ret

000000f6 <car_Forward_50>:
}

void car_Forward_50()
{
	LCD_Clear();
      f6:	0e 94 db 02 	call	0x5b6	; 0x5b6 <LCD_Clear>
	PWM_set_duty(50,100);
      fa:	44 e6       	ldi	r20, 0x64	; 100
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	60 e0       	ldi	r22, 0x00	; 0
     100:	70 e0       	ldi	r23, 0x00	; 0
     102:	82 e3       	ldi	r24, 0x32	; 50
     104:	0e 94 4c 07 	call	0xe98	; 0xe98 <PWM_set_duty>
	timer_start(TIMER0_SCALER_8);
     108:	82 e0       	ldi	r24, 0x02	; 2
     10a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <timer_start>
	Car_Moving_FWD();
     10e:	0e 94 75 03 	call	0x6ea	; 0x6ea <Car_Moving_FWD>
	LCD_SetCursor(0,0);
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_SetCursor>
	LCD_WriteString("Speed:50% Dir:	F");
     11a:	8e e7       	ldi	r24, 0x7E	; 126
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_WriteString>
	LCD_SetCursor(1,0);
     122:	60 e0       	ldi	r22, 0x00	; 0
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_SetCursor>
	LCD_WriteString("Dist.:");
     12a:	83 e7       	ldi	r24, 0x73	; 115
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_WriteString>
	LCD_WriteNumber(g_distance);
     132:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <g_distance>
     136:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <g_distance+0x1>
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <LCD_WriteNumber>
	LCD_WriteString(" Cm");
     142:	8a e7       	ldi	r24, 0x7A	; 122
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_WriteString>
     14a:	08 95       	ret

0000014c <car_Rotating>:
}

void car_Rotating()
{
	LCD_Clear();
     14c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <LCD_Clear>
	PWM_set_duty(30,100);
     150:	44 e6       	ldi	r20, 0x64	; 100
     152:	50 e0       	ldi	r21, 0x00	; 0
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	70 e0       	ldi	r23, 0x00	; 0
     158:	8e e1       	ldi	r24, 0x1E	; 30
     15a:	0e 94 4c 07 	call	0xe98	; 0xe98 <PWM_set_duty>
	timer_start(TIMER0_SCALER_8);
     15e:	82 e0       	ldi	r24, 0x02	; 2
     160:	0e 94 da 07 	call	0xfb4	; 0xfb4 <timer_start>
	LCD_SetCursor(0,0);
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_SetCursor>
	LCD_WriteString("Speed:30% Dir:	R");
     16c:	8f e8       	ldi	r24, 0x8F	; 143
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_WriteString>
	LCD_SetCursor(1,0);
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_SetCursor>
	LCD_WriteString("Dist.:");
     17c:	83 e7       	ldi	r24, 0x73	; 115
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_WriteString>
	LCD_WriteNumber(g_distance);
     184:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <g_distance>
     188:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <g_distance+0x1>
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	0e 94 e5 02 	call	0x5ca	; 0x5ca <LCD_WriteNumber>
	LCD_WriteString(" Cm");
     194:	8a e7       	ldi	r24, 0x7A	; 122
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_WriteString>
	if (g_counter %2 == 0)
     19c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <g_counter>
     1a0:	80 fd       	sbrc	r24, 0
     1a2:	03 c0       	rjmp	.+6      	; 0x1aa <car_Rotating+0x5e>
	{
		Car_Rotate_Right();
     1a4:	0e 94 ab 03 	call	0x756	; 0x756 <Car_Rotate_Right>
     1a8:	08 95       	ret
	}
	else
	{
		Car_Rotate_Left();
     1aa:	0e 94 bd 03 	call	0x77a	; 0x77a <Car_Rotate_Left>
     1ae:	08 95       	ret

000001b0 <car_Backword_30>:
}


void car_Backword_30()
{
	LCD_Clear();
     1b0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <LCD_Clear>
	PWM_set_duty(30,100);
     1b4:	44 e6       	ldi	r20, 0x64	; 100
     1b6:	50 e0       	ldi	r21, 0x00	; 0
     1b8:	60 e0       	ldi	r22, 0x00	; 0
     1ba:	70 e0       	ldi	r23, 0x00	; 0
     1bc:	8e e1       	ldi	r24, 0x1E	; 30
     1be:	0e 94 4c 07 	call	0xe98	; 0xe98 <PWM_set_duty>
	timer_start(TIMER0_SCALER_8);
     1c2:	82 e0       	ldi	r24, 0x02	; 2
     1c4:	0e 94 da 07 	call	0xfb4	; 0xfb4 <timer_start>
	Car_Moving_BWD();
     1c8:	0e 94 87 03 	call	0x70e	; 0x70e <Car_Moving_BWD>
	LCD_SetCursor(0,0);
     1cc:	60 e0       	ldi	r22, 0x00	; 0
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_SetCursor>
	LCD_WriteString("Speed:30% Dir:	B");
     1d4:	80 ea       	ldi	r24, 0xA0	; 160
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_WriteString>
	LCD_SetCursor(1,0);
     1dc:	60 e0       	ldi	r22, 0x00	; 0
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_SetCursor>
	LCD_WriteString("Dist.:");
     1e4:	83 e7       	ldi	r24, 0x73	; 115
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_WriteString>
	LCD_WriteNumber(g_distance);
     1ec:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <g_distance>
     1f0:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <g_distance+0x1>
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <LCD_WriteNumber>
	LCD_WriteString(" Cm");
     1fc:	8a e7       	ldi	r24, 0x7A	; 122
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_WriteString>
     204:	08 95       	ret

00000206 <Car_Stopping>:
}


void Car_Stopping()
{
	LCD_Clear();
     206:	0e 94 db 02 	call	0x5b6	; 0x5b6 <LCD_Clear>
	PWM_set_duty(0,100);
     20a:	44 e6       	ldi	r20, 0x64	; 100
     20c:	50 e0       	ldi	r21, 0x00	; 0
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	70 e0       	ldi	r23, 0x00	; 0
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	0e 94 4c 07 	call	0xe98	; 0xe98 <PWM_set_duty>
	timer_start(TIMER0_SCALER_8);
     218:	82 e0       	ldi	r24, 0x02	; 2
     21a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <timer_start>
	Car_Stop();
     21e:	0e 94 99 03 	call	0x732	; 0x732 <Car_Stop>
	LCD_SetCursor(0,0);
     222:	60 e0       	ldi	r22, 0x00	; 0
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_SetCursor>
	LCD_WriteString("Speed:00% Dir:	S");
     22a:	81 eb       	ldi	r24, 0xB1	; 177
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_WriteString>
	LCD_SetCursor(1,0);
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_SetCursor>
	LCD_WriteString("Dist.:");
     23a:	83 e7       	ldi	r24, 0x73	; 115
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_WriteString>
	LCD_WriteNumber(g_distance);
     242:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <g_distance>
     246:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <g_distance+0x1>
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <LCD_WriteNumber>
	LCD_WriteString(" Cm");
     252:	8a e7       	ldi	r24, 0x7A	; 122
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_WriteString>
     25a:	08 95       	ret

0000025c <app_init>:



void app_init()
{
	LCD_PinsInit();
     25c:	0e 94 46 03 	call	0x68c	; 0x68c <LCD_PinsInit>
	LCD_Init();
     260:	0e 94 98 02 	call	0x530	; 0x530 <LCD_Init>
	GLOBALE_ENABLE();
     264:	78 94       	sei
	pwm_init();
     266:	0e 94 3e 07 	call	0xe7c	; 0xe7c <pwm_init>
	Car_Motors_init();
     26a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <Car_Motors_init>
	LCD_Init();
     26e:	0e 94 98 02 	call	0x530	; 0x530 <LCD_Init>
	KEYPAD_init();
     272:	0e 94 be 01 	call	0x37c	; 0x37c <KEYPAD_init>
	DIO_initpin(PIND6,INPULL);
     276:	62 e0       	ldi	r22, 0x02	; 2
     278:	8e e1       	ldi	r24, 0x1E	; 30
     27a:	0e 94 33 04 	call	0x866	; 0x866 <DIO_initpin>
	DIO_Init_All();
     27e:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_Init_All>
	TIMER_2_INT();
     282:	0e 94 6d 09 	call	0x12da	; 0x12da <TIMER_2_INT>
     286:	08 95       	ret

00000288 <app_start>:
void app_start()
{
	//Start_stage();
	
	
	while (g_start_Flag)
     288:	74 c0       	rjmp	.+232    	; 0x372 <app_start+0xea>
	{
		g_distance = US_getdistance();
     28a:	0e 94 ef 03 	call	0x7de	; 0x7de <US_getdistance>
     28e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <g_distance+0x1>
     292:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_distance>
		if (g_distance > 70 && car_mode == 0)
     296:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_distance>
     29a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_distance+0x1>
     29e:	87 34       	cpi	r24, 0x47	; 71
     2a0:	91 05       	cpc	r25, r1
     2a2:	98 f0       	brcs	.+38     	; 0x2ca <app_start+0x42>
     2a4:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <car_mode>
     2a8:	81 11       	cpse	r24, r1
     2aa:	0f c0       	rjmp	.+30     	; 0x2ca <app_start+0x42>
		{
			car_Forward_30();
     2ac:	0e 94 50 00 	call	0xa0	; 0xa0 <car_Forward_30>
			mode_ovf = 100;
     2b0:	84 e6       	ldi	r24, 0x64	; 100
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	a0 e0       	ldi	r26, 0x00	; 0
     2b6:	b0 e0       	ldi	r27, 0x00	; 0
     2b8:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <mode_ovf>
     2bc:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <mode_ovf+0x1>
     2c0:	a0 93 fc 00 	sts	0x00FC, r26	; 0x8000fc <mode_ovf+0x2>
     2c4:	b0 93 fd 00 	sts	0x00FD, r27	; 0x8000fd <mode_ovf+0x3>
     2c8:	54 c0       	rjmp	.+168    	; 0x372 <app_start+0xea>
		}
		else if (car_mode == 1 && g_distance > 70)
     2ca:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <car_mode>
     2ce:	81 30       	cpi	r24, 0x01	; 1
     2d0:	51 f4       	brne	.+20     	; 0x2e6 <app_start+0x5e>
     2d2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_distance>
     2d6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_distance+0x1>
     2da:	87 34       	cpi	r24, 0x47	; 71
     2dc:	91 05       	cpc	r25, r1
     2de:	18 f0       	brcs	.+6      	; 0x2e6 <app_start+0x5e>
		{
			car_Forward_50();
     2e0:	0e 94 7b 00 	call	0xf6	; 0xf6 <car_Forward_50>
     2e4:	46 c0       	rjmp	.+140    	; 0x372 <app_start+0xea>
		}
		else if (g_distance <= 70 && g_distance > 30)
     2e6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_distance>
     2ea:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_distance+0x1>
     2ee:	87 34       	cpi	r24, 0x47	; 71
     2f0:	91 05       	cpc	r25, r1
     2f2:	48 f4       	brcc	.+18     	; 0x306 <app_start+0x7e>
     2f4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_distance>
     2f8:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_distance+0x1>
     2fc:	4f 97       	sbiw	r24, 0x1f	; 31
     2fe:	18 f0       	brcs	.+6      	; 0x306 <app_start+0x7e>
		{
			car_Forward_30();
     300:	0e 94 50 00 	call	0xa0	; 0xa0 <car_Forward_30>
     304:	36 c0       	rjmp	.+108    	; 0x372 <app_start+0xea>
		}
		else if (g_distance <= 30 && g_distance > 20)
     306:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_distance>
     30a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_distance+0x1>
     30e:	4f 97       	sbiw	r24, 0x1f	; 31
     310:	e8 f4       	brcc	.+58     	; 0x34c <app_start+0xc4>
     312:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_distance>
     316:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_distance+0x1>
     31a:	45 97       	sbiw	r24, 0x15	; 21
     31c:	b8 f0       	brcs	.+46     	; 0x34c <app_start+0xc4>
		{
			Car_Stopping();
     31e:	0e 94 03 01 	call	0x206	; 0x206 <Car_Stopping>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     322:	2f ef       	ldi	r18, 0xFF	; 255
     324:	87 ea       	ldi	r24, 0xA7	; 167
     326:	91 e6       	ldi	r25, 0x61	; 97
     328:	21 50       	subi	r18, 0x01	; 1
     32a:	80 40       	sbci	r24, 0x00	; 0
     32c:	90 40       	sbci	r25, 0x00	; 0
     32e:	e1 f7       	brne	.-8      	; 0x328 <app_start+0xa0>
     330:	00 c0       	rjmp	.+0      	; 0x332 <app_start+0xaa>
     332:	00 00       	nop
			_delay_ms(4000);
			car_Rotating();
     334:	0e 94 a6 00 	call	0x14c	; 0x14c <car_Rotating>
     338:	2f ef       	ldi	r18, 0xFF	; 255
     33a:	81 e1       	ldi	r24, 0x11	; 17
     33c:	9a e7       	ldi	r25, 0x7A	; 122
     33e:	21 50       	subi	r18, 0x01	; 1
     340:	80 40       	sbci	r24, 0x00	; 0
     342:	90 40       	sbci	r25, 0x00	; 0
     344:	e1 f7       	brne	.-8      	; 0x33e <app_start+0xb6>
     346:	00 c0       	rjmp	.+0      	; 0x348 <app_start+0xc0>
     348:	00 00       	nop
     34a:	13 c0       	rjmp	.+38     	; 0x372 <app_start+0xea>
			_delay_ms(5000);

		}
		else if (g_distance <= 20)
     34c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_distance>
     350:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_distance+0x1>
     354:	45 97       	sbiw	r24, 0x15	; 21
     356:	68 f4       	brcc	.+26     	; 0x372 <app_start+0xea>
		{
			Car_Stopping();
     358:	0e 94 03 01 	call	0x206	; 0x206 <Car_Stopping>
     35c:	2f ef       	ldi	r18, 0xFF	; 255
     35e:	87 ea       	ldi	r24, 0xA7	; 167
     360:	91 e6       	ldi	r25, 0x61	; 97
     362:	21 50       	subi	r18, 0x01	; 1
     364:	80 40       	sbci	r24, 0x00	; 0
     366:	90 40       	sbci	r25, 0x00	; 0
     368:	e1 f7       	brne	.-8      	; 0x362 <app_start+0xda>
     36a:	00 c0       	rjmp	.+0      	; 0x36c <app_start+0xe4>
     36c:	00 00       	nop
			_delay_ms(4000);
			car_Backword_30();
     36e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <car_Backword_30>
void app_start()
{
	//Start_stage();
	
	
	while (g_start_Flag)
     372:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     376:	81 11       	cpse	r24, r1
     378:	88 cf       	rjmp	.-240    	; 0x28a <app_start+0x2>
			Car_Stopping();
			_delay_ms(4000);
			car_Backword_30();
		}
	}
     37a:	08 95       	ret

0000037c <KEYPAD_init>:
		{BUTTON7, BUTTON8, BUTTON9}};
			
KEYPAD_initError KEYPAD_init(void){
	
	/*Set Column Initial Values to 1 */
	DIO_writepin (COL_1,HIGH);
     37c:	61 e0       	ldi	r22, 0x01	; 1
     37e:	88 e1       	ldi	r24, 0x18	; 24
     380:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
	DIO_writepin (COL_2,HIGH);
     384:	61 e0       	ldi	r22, 0x01	; 1
     386:	89 e1       	ldi	r24, 0x19	; 25
     388:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
	DIO_writepin (COL_3,HIGH);
     38c:	61 e0       	ldi	r22, 0x01	; 1
     38e:	8a e1       	ldi	r24, 0x1A	; 26
     390:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
	
	/* Enable Pull Up Resistors at Input Rows */
	DIO_writepin (ROW_1,HIGH);
     394:	61 e0       	ldi	r22, 0x01	; 1
     396:	8b e1       	ldi	r24, 0x1B	; 27
     398:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
	DIO_writepin (ROW_2,HIGH);
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	8c e1       	ldi	r24, 0x1C	; 28
     3a0:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
	DIO_writepin (ROW_3,HIGH);
     3a4:	61 e0       	ldi	r22, 0x01	; 1
     3a6:	8d e1       	ldi	r24, 0x1D	; 29
     3a8:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
	
	return KEYPAD_initSuccess;
	
}
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	08 95       	ret

000003b0 <WriteIns>:
	for(u8 i=0;i<8;i++)
	{
		WriteData(pattern[i]);
	}
	WriteIns(0x80);
}
     3b0:	cf 93       	push	r28
     3b2:	c8 2f       	mov	r28, r24
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	81 e1       	ldi	r24, 0x11	; 17
     3b8:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     3bc:	6c 2f       	mov	r22, r28
     3be:	66 1f       	adc	r22, r22
     3c0:	66 27       	eor	r22, r22
     3c2:	66 1f       	adc	r22, r22
     3c4:	87 e1       	ldi	r24, 0x17	; 23
     3c6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     3ca:	c6 fb       	bst	r28, 6
     3cc:	66 27       	eor	r22, r22
     3ce:	60 f9       	bld	r22, 0
     3d0:	86 e1       	ldi	r24, 0x16	; 22
     3d2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     3d6:	c5 fb       	bst	r28, 5
     3d8:	66 27       	eor	r22, r22
     3da:	60 f9       	bld	r22, 0
     3dc:	85 e1       	ldi	r24, 0x15	; 21
     3de:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     3e2:	c4 fb       	bst	r28, 4
     3e4:	66 27       	eor	r22, r22
     3e6:	60 f9       	bld	r22, 0
     3e8:	84 e1       	ldi	r24, 0x14	; 20
     3ea:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     3ee:	61 e0       	ldi	r22, 0x01	; 1
     3f0:	83 e1       	ldi	r24, 0x13	; 19
     3f2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     3f6:	8f e9       	ldi	r24, 0x9F	; 159
     3f8:	9f e0       	ldi	r25, 0x0F	; 15
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <WriteIns+0x4a>
     3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
     400:	00 00       	nop
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	83 e1       	ldi	r24, 0x13	; 19
     406:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     40a:	8f e9       	ldi	r24, 0x9F	; 159
     40c:	9f e0       	ldi	r25, 0x0F	; 15
     40e:	01 97       	sbiw	r24, 0x01	; 1
     410:	f1 f7       	brne	.-4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     412:	00 c0       	rjmp	.+0      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     414:	00 00       	nop
     416:	c3 fb       	bst	r28, 3
     418:	66 27       	eor	r22, r22
     41a:	60 f9       	bld	r22, 0
     41c:	87 e1       	ldi	r24, 0x17	; 23
     41e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     422:	c2 fb       	bst	r28, 2
     424:	66 27       	eor	r22, r22
     426:	60 f9       	bld	r22, 0
     428:	86 e1       	ldi	r24, 0x16	; 22
     42a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     42e:	c1 fb       	bst	r28, 1
     430:	66 27       	eor	r22, r22
     432:	60 f9       	bld	r22, 0
     434:	85 e1       	ldi	r24, 0x15	; 21
     436:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     43a:	6c 2f       	mov	r22, r28
     43c:	61 70       	andi	r22, 0x01	; 1
     43e:	84 e1       	ldi	r24, 0x14	; 20
     440:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     444:	61 e0       	ldi	r22, 0x01	; 1
     446:	83 e1       	ldi	r24, 0x13	; 19
     448:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     44c:	8f e9       	ldi	r24, 0x9F	; 159
     44e:	9f e0       	ldi	r25, 0x0F	; 15
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	f1 f7       	brne	.-4      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     454:	00 c0       	rjmp	.+0      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     456:	00 00       	nop
     458:	60 e0       	ldi	r22, 0x00	; 0
     45a:	83 e1       	ldi	r24, 0x13	; 19
     45c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     460:	8f e9       	ldi	r24, 0x9F	; 159
     462:	9f e0       	ldi	r25, 0x0F	; 15
     464:	01 97       	sbiw	r24, 0x01	; 1
     466:	f1 f7       	brne	.-4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     468:	00 c0       	rjmp	.+0      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     46a:	00 00       	nop
     46c:	cf 91       	pop	r28
     46e:	08 95       	ret

00000470 <WriteData>:
     470:	cf 93       	push	r28
     472:	c8 2f       	mov	r28, r24
     474:	61 e0       	ldi	r22, 0x01	; 1
     476:	81 e1       	ldi	r24, 0x11	; 17
     478:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     47c:	6c 2f       	mov	r22, r28
     47e:	66 1f       	adc	r22, r22
     480:	66 27       	eor	r22, r22
     482:	66 1f       	adc	r22, r22
     484:	87 e1       	ldi	r24, 0x17	; 23
     486:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     48a:	c6 fb       	bst	r28, 6
     48c:	66 27       	eor	r22, r22
     48e:	60 f9       	bld	r22, 0
     490:	86 e1       	ldi	r24, 0x16	; 22
     492:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     496:	c5 fb       	bst	r28, 5
     498:	66 27       	eor	r22, r22
     49a:	60 f9       	bld	r22, 0
     49c:	85 e1       	ldi	r24, 0x15	; 21
     49e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     4a2:	c4 fb       	bst	r28, 4
     4a4:	66 27       	eor	r22, r22
     4a6:	60 f9       	bld	r22, 0
     4a8:	84 e1       	ldi	r24, 0x14	; 20
     4aa:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     4ae:	61 e0       	ldi	r22, 0x01	; 1
     4b0:	83 e1       	ldi	r24, 0x13	; 19
     4b2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     4b6:	8f e9       	ldi	r24, 0x9F	; 159
     4b8:	9f e0       	ldi	r25, 0x0F	; 15
     4ba:	01 97       	sbiw	r24, 0x01	; 1
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <WriteData+0x4a>
     4be:	00 c0       	rjmp	.+0      	; 0x4c0 <WriteData+0x50>
     4c0:	00 00       	nop
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	83 e1       	ldi	r24, 0x13	; 19
     4c6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     4ca:	8f e9       	ldi	r24, 0x9F	; 159
     4cc:	9f e0       	ldi	r25, 0x0F	; 15
     4ce:	01 97       	sbiw	r24, 0x01	; 1
     4d0:	f1 f7       	brne	.-4      	; 0x4ce <WriteData+0x5e>
     4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <WriteData+0x64>
     4d4:	00 00       	nop
     4d6:	c3 fb       	bst	r28, 3
     4d8:	66 27       	eor	r22, r22
     4da:	60 f9       	bld	r22, 0
     4dc:	87 e1       	ldi	r24, 0x17	; 23
     4de:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     4e2:	c2 fb       	bst	r28, 2
     4e4:	66 27       	eor	r22, r22
     4e6:	60 f9       	bld	r22, 0
     4e8:	86 e1       	ldi	r24, 0x16	; 22
     4ea:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     4ee:	c1 fb       	bst	r28, 1
     4f0:	66 27       	eor	r22, r22
     4f2:	60 f9       	bld	r22, 0
     4f4:	85 e1       	ldi	r24, 0x15	; 21
     4f6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     4fa:	6c 2f       	mov	r22, r28
     4fc:	61 70       	andi	r22, 0x01	; 1
     4fe:	84 e1       	ldi	r24, 0x14	; 20
     500:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	83 e1       	ldi	r24, 0x13	; 19
     508:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     50c:	8f e9       	ldi	r24, 0x9F	; 159
     50e:	9f e0       	ldi	r25, 0x0F	; 15
     510:	01 97       	sbiw	r24, 0x01	; 1
     512:	f1 f7       	brne	.-4      	; 0x510 <WriteData+0xa0>
     514:	00 c0       	rjmp	.+0      	; 0x516 <WriteData+0xa6>
     516:	00 00       	nop
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	83 e1       	ldi	r24, 0x13	; 19
     51c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     520:	8f e9       	ldi	r24, 0x9F	; 159
     522:	9f e0       	ldi	r25, 0x0F	; 15
     524:	01 97       	sbiw	r24, 0x01	; 1
     526:	f1 f7       	brne	.-4      	; 0x524 <WriteData+0xb4>
     528:	00 c0       	rjmp	.+0      	; 0x52a <WriteData+0xba>
     52a:	00 00       	nop
     52c:	cf 91       	pop	r28
     52e:	08 95       	ret

00000530 <LCD_Init>:
     530:	2f ef       	ldi	r18, 0xFF	; 255
     532:	80 e7       	ldi	r24, 0x70	; 112
     534:	92 e0       	ldi	r25, 0x02	; 2
     536:	21 50       	subi	r18, 0x01	; 1
     538:	80 40       	sbci	r24, 0x00	; 0
     53a:	90 40       	sbci	r25, 0x00	; 0
     53c:	e1 f7       	brne	.-8      	; 0x536 <LCD_Init+0x6>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <LCD_Init+0x10>
     540:	00 00       	nop
     542:	82 e0       	ldi	r24, 0x02	; 2
     544:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <WriteIns>
     548:	88 e2       	ldi	r24, 0x28	; 40
     54a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <WriteIns>
     54e:	8c e0       	ldi	r24, 0x0C	; 12
     550:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <WriteIns>
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <WriteIns>
     55a:	8f e9       	ldi	r24, 0x9F	; 159
     55c:	9f e0       	ldi	r25, 0x0F	; 15
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	f1 f7       	brne	.-4      	; 0x55e <LCD_Init+0x2e>
     562:	00 c0       	rjmp	.+0      	; 0x564 <LCD_Init+0x34>
     564:	00 00       	nop
     566:	86 e0       	ldi	r24, 0x06	; 6
     568:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <WriteIns>
     56c:	08 95       	ret

0000056e <LCD_WriteChar>:
     56e:	0e 94 38 02 	call	0x470	; 0x470 <WriteData>
     572:	08 95       	ret

00000574 <LCD_WriteString>:
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	8c 01       	movw	r16, r24
     57c:	c0 e0       	ldi	r28, 0x00	; 0
     57e:	03 c0       	rjmp	.+6      	; 0x586 <LCD_WriteString+0x12>
     580:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_WriteChar>
     584:	cf 5f       	subi	r28, 0xFF	; 255
     586:	f8 01       	movw	r30, r16
     588:	ec 0f       	add	r30, r28
     58a:	f1 1d       	adc	r31, r1
     58c:	80 81       	ld	r24, Z
     58e:	81 11       	cpse	r24, r1
     590:	f7 cf       	rjmp	.-18     	; 0x580 <LCD_WriteString+0xc>
     592:	cf 91       	pop	r28
     594:	1f 91       	pop	r17
     596:	0f 91       	pop	r16
     598:	08 95       	ret

0000059a <LCD_SetCursor>:
     59a:	81 11       	cpse	r24, r1
     59c:	05 c0       	rjmp	.+10     	; 0x5a8 <LCD_SetCursor+0xe>
     59e:	86 2f       	mov	r24, r22
     5a0:	80 68       	ori	r24, 0x80	; 128
     5a2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <WriteIns>
     5a6:	08 95       	ret
     5a8:	81 30       	cpi	r24, 0x01	; 1
     5aa:	21 f4       	brne	.+8      	; 0x5b4 <LCD_SetCursor+0x1a>
     5ac:	80 ec       	ldi	r24, 0xC0	; 192
     5ae:	86 0f       	add	r24, r22
     5b0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <WriteIns>
     5b4:	08 95       	ret

000005b6 <LCD_Clear>:
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <WriteIns>
     5bc:	8f e9       	ldi	r24, 0x9F	; 159
     5be:	9f e0       	ldi	r25, 0x0F	; 15
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	f1 f7       	brne	.-4      	; 0x5c0 <LCD_Clear+0xa>
     5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <LCD_Clear+0x10>
     5c6:	00 00       	nop
     5c8:	08 95       	ret

000005ca <LCD_WriteNumber>:
     5ca:	cf 92       	push	r12
     5cc:	df 92       	push	r13
     5ce:	ef 92       	push	r14
     5d0:	ff 92       	push	r15
     5d2:	1f 93       	push	r17
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	cd b7       	in	r28, 0x3d	; 61
     5da:	de b7       	in	r29, 0x3e	; 62
     5dc:	2a 97       	sbiw	r28, 0x0a	; 10
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	cd bf       	out	0x3d, r28	; 61
     5e8:	6b 01       	movw	r12, r22
     5ea:	7c 01       	movw	r14, r24
     5ec:	61 15       	cp	r22, r1
     5ee:	71 05       	cpc	r23, r1
     5f0:	81 05       	cpc	r24, r1
     5f2:	91 05       	cpc	r25, r1
     5f4:	21 f4       	brne	.+8      	; 0x5fe <LCD_WriteNumber+0x34>
     5f6:	80 e3       	ldi	r24, 0x30	; 48
     5f8:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_WriteChar>
     5fc:	39 c0       	rjmp	.+114    	; 0x670 <LCD_WriteNumber+0xa6>
     5fe:	99 23       	and	r25, r25
     600:	5c f4       	brge	.+22     	; 0x618 <LCD_WriteNumber+0x4e>
     602:	f0 94       	com	r15
     604:	e0 94       	com	r14
     606:	d0 94       	com	r13
     608:	c0 94       	com	r12
     60a:	c1 1c       	adc	r12, r1
     60c:	d1 1c       	adc	r13, r1
     60e:	e1 1c       	adc	r14, r1
     610:	f1 1c       	adc	r15, r1
     612:	8d e2       	ldi	r24, 0x2D	; 45
     614:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_WriteChar>
     618:	10 e0       	ldi	r17, 0x00	; 0
     61a:	15 c0       	rjmp	.+42     	; 0x646 <LCD_WriteNumber+0x7c>
     61c:	c7 01       	movw	r24, r14
     61e:	b6 01       	movw	r22, r12
     620:	2a e0       	ldi	r18, 0x0A	; 10
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	40 e0       	ldi	r20, 0x00	; 0
     626:	50 e0       	ldi	r21, 0x00	; 0
     628:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__divmodsi4>
     62c:	e1 e0       	ldi	r30, 0x01	; 1
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	ec 0f       	add	r30, r28
     632:	fd 1f       	adc	r31, r29
     634:	e1 0f       	add	r30, r17
     636:	f1 1d       	adc	r31, r1
     638:	60 5d       	subi	r22, 0xD0	; 208
     63a:	60 83       	st	Z, r22
     63c:	1f 5f       	subi	r17, 0xFF	; 255
     63e:	c2 2e       	mov	r12, r18
     640:	d3 2e       	mov	r13, r19
     642:	e4 2e       	mov	r14, r20
     644:	f5 2e       	mov	r15, r21
     646:	c1 14       	cp	r12, r1
     648:	d1 04       	cpc	r13, r1
     64a:	e1 04       	cpc	r14, r1
     64c:	f1 04       	cpc	r15, r1
     64e:	31 f7       	brne	.-52     	; 0x61c <LCD_WriteNumber+0x52>
     650:	0d c0       	rjmp	.+26     	; 0x66c <LCD_WriteNumber+0xa2>
     652:	e1 2f       	mov	r30, r17
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	31 97       	sbiw	r30, 0x01	; 1
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	8c 0f       	add	r24, r28
     65e:	9d 1f       	adc	r25, r29
     660:	e8 0f       	add	r30, r24
     662:	f9 1f       	adc	r31, r25
     664:	80 81       	ld	r24, Z
     666:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_WriteChar>
     66a:	11 50       	subi	r17, 0x01	; 1
     66c:	11 11       	cpse	r17, r1
     66e:	f1 cf       	rjmp	.-30     	; 0x652 <LCD_WriteNumber+0x88>
     670:	2a 96       	adiw	r28, 0x0a	; 10
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	ff 90       	pop	r15
     684:	ef 90       	pop	r14
     686:	df 90       	pop	r13
     688:	cf 90       	pop	r12
     68a:	08 95       	ret

0000068c <LCD_PinsInit>:
   void LCD_PinsInit ()
   {
	   DIO_initpin(RS,OUTPUT);
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	81 e1       	ldi	r24, 0x11	; 17
     690:	0e 94 33 04 	call	0x866	; 0x866 <DIO_initpin>
	   DIO_initpin(EN,OUTPUT);
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	83 e1       	ldi	r24, 0x13	; 19
     698:	0e 94 33 04 	call	0x866	; 0x866 <DIO_initpin>
	   DIO_initpin(RW,OUTPUT);
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	82 e1       	ldi	r24, 0x12	; 18
     6a0:	0e 94 33 04 	call	0x866	; 0x866 <DIO_initpin>
	   DIO_initpin(D4,OUTPUT);
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	84 e1       	ldi	r24, 0x14	; 20
     6a8:	0e 94 33 04 	call	0x866	; 0x866 <DIO_initpin>
	   DIO_initpin(D5,OUTPUT);
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	85 e1       	ldi	r24, 0x15	; 21
     6b0:	0e 94 33 04 	call	0x866	; 0x866 <DIO_initpin>
	   DIO_initpin(D6,OUTPUT);
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	86 e1       	ldi	r24, 0x16	; 22
     6b8:	0e 94 33 04 	call	0x866	; 0x866 <DIO_initpin>
	   DIO_initpin(D7,OUTPUT);
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	87 e1       	ldi	r24, 0x17	; 23
     6c0:	0e 94 33 04 	call	0x866	; 0x866 <DIO_initpin>
     6c4:	08 95       	ret

000006c6 <Car_Motors_init>:
/**DESCRIPTION:-
  this function initializes the DIO pins connected to the motors to be output
  **/
en_MotorError_t Car_Motors_init (void)
{
	DIO_initpin(motor1_0,OUTPUT);
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	0e 94 33 04 	call	0x866	; 0x866 <DIO_initpin>
	DIO_initpin(motor1_1,OUTPUT);
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	0e 94 33 04 	call	0x866	; 0x866 <DIO_initpin>
	DIO_initpin(motor2_0,OUTPUT);
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	0e 94 33 04 	call	0x866	; 0x866 <DIO_initpin>
	DIO_initpin(motor2_1,OUTPUT);
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	83 e0       	ldi	r24, 0x03	; 3
     6e2:	0e 94 33 04 	call	0x866	; 0x866 <DIO_initpin>

	return motor_ok;
}
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	08 95       	ret

000006ea <Car_Moving_FWD>:
/**DESCRIPTION:-
this function is used to drive the motor to move in the +VE direction which will lead the car to move FWD
**/
en_MotorError_t Car_Moving_FWD(void)
{
	DIO_writepin(motor1_0,LOW);          //this is used to provide voltage to the +ve pin of the motor 
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
	DIO_writepin(motor1_1,HIGH);           //this is used to provide the ground to the -ve pin of 
     6f2:	61 e0       	ldi	r22, 0x01	; 1
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
	DIO_writepin(motor2_0,LOW);
     6fa:	60 e0       	ldi	r22, 0x00	; 0
     6fc:	82 e0       	ldi	r24, 0x02	; 2
     6fe:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
	DIO_writepin(motor2_1,HIGH);
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	83 e0       	ldi	r24, 0x03	; 3
     706:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
	
	return motor_ok;

}
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	08 95       	ret

0000070e <Car_Moving_BWD>:
/**DESCRIPTION:-
this function is used to drive the motor to move in the -VE direction which will lead the car to move BWD
**/
en_MotorError_t Car_Moving_BWD(void)
{
	DIO_writepin(motor1_0,HIGH);          //this is used to provide voltage to the -ve pin of the motor
     70e:	61 e0       	ldi	r22, 0x01	; 1
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
	DIO_writepin(motor1_1,LOW);           //this is used to provide the ground to the +ve pin of
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
	DIO_writepin(motor2_0,HIGH);
     71e:	61 e0       	ldi	r22, 0x01	; 1
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
	DIO_writepin(motor2_1,LOW);
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	83 e0       	ldi	r24, 0x03	; 3
     72a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
	
	return motor_ok;
}
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	08 95       	ret

00000732 <Car_Stop>:
this function is used to stop the 4 wheels by stopping the 4 motors*/
en_MotorError_t Car_Stop(void)
{
	
	
  DIO_writepin(motor1_0,LOW);          
     732:	60 e0       	ldi	r22, 0x00	; 0
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
  DIO_writepin(motor1_1,LOW);           
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
  DIO_writepin(motor2_0,LOW);
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
  DIO_writepin(motor2_1,LOW);
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	83 e0       	ldi	r24, 0x03	; 3
     74e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>

	return motor_ok;
}
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	08 95       	ret

00000756 <Car_Rotate_Right>:
this function is used to drive the right wheels to move BWD, and the left wheels to move FWD,
which will lead to rotation of the car */
en_MotorError_t Car_Rotate_Right(void)
{
	//this is used to provide the ground to the -ve pin of
	DIO_writepin(motor1_0,HIGH);
     756:	61 e0       	ldi	r22, 0x01	; 1
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
	DIO_writepin(motor1_1,LOW);
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
	
	//this is used to provide voltage to the +ve pin of the motor
	DIO_writepin(motor2_0,LOW);
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	82 e0       	ldi	r24, 0x02	; 2
     76a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
	DIO_writepin(motor2_1,HIGH);
     76e:	61 e0       	ldi	r22, 0x01	; 1
     770:	83 e0       	ldi	r24, 0x03	; 3
     772:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>

	return motor_ok;
}
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	08 95       	ret

0000077a <Car_Rotate_Left>:
this function is used to drive the right wheels to move FWD, and the left wheels to move BWD,
which will lead to rotation of the car */
en_MotorError_t Car_Rotate_Left(void)
{
	//this is used to provide the ground to the +ve pin of
	DIO_writepin(motor1_0,LOW);
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
	DIO_writepin(motor1_1,HIGH);
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
	
	//this is used to provide voltage to the -ve pin of the motor
	DIO_writepin(motor2_0,HIGH);
     78a:	61 e0       	ldi	r22, 0x01	; 1
     78c:	82 e0       	ldi	r24, 0x02	; 2
     78e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
	DIO_writepin(motor2_1,LOW);
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	83 e0       	ldi	r24, 0x03	; 3
     796:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>

	return motor_ok;
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	08 95       	ret

0000079e <USCallBackFun>:
volatile u8 flag=0;
volatile u16 t1,t2,t3;

void USCallBackFun(void)
{
	if (flag==0)
     79e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__data_end>
     7a2:	81 11       	cpse	r24, r1
     7a4:	0e c0       	rjmp	.+28     	; 0x7c2 <USCallBackFun+0x24>
	{
		t1=TCNT1;
     7a6:	8c b5       	in	r24, 0x2c	; 44
     7a8:	9d b5       	in	r25, 0x2d	; 45
     7aa:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <t1+0x1>
     7ae:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <t1>
		EXI_TriggerEdge(EX_INT2,FALLING_EDGE);
     7b2:	62 e0       	ldi	r22, 0x02	; 2
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <EXI_TriggerEdge>
		flag=1;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__data_end>
     7c0:	08 95       	ret
	}
	else if (flag==1)
     7c2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__data_end>
     7c6:	81 30       	cpi	r24, 0x01	; 1
     7c8:	49 f4       	brne	.+18     	; 0x7dc <USCallBackFun+0x3e>
	{
		t2=TCNT1;
     7ca:	8c b5       	in	r24, 0x2c	; 44
     7cc:	9d b5       	in	r25, 0x2d	; 45
     7ce:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <t2+0x1>
     7d2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <t2>
		flag=2;
     7d6:	82 e0       	ldi	r24, 0x02	; 2
     7d8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__data_end>
     7dc:	08 95       	ret

000007de <US_getdistance>:
{
	u8 duty;
	u32 frq;
	u16 time, u16_d;
	
	Timer1_Init(TIMER1_NORMAL_MODE,TIMER1_SCALER_8);
     7de:	62 e0       	ldi	r22, 0x02	; 2
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	0e 94 18 08 	call	0x1030	; 0x1030 <Timer1_Init>
	EXI_Enable(EX_INT2);
     7e6:	82 e0       	ldi	r24, 0x02	; 2
     7e8:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <EXI_Enable>
	TCNT1=0;
     7ec:	1d bc       	out	0x2d, r1	; 45
     7ee:	1c bc       	out	0x2c, r1	; 44
	EXI_SetCallBack(EX_INT2, USCallBackFun);
     7f0:	6f ec       	ldi	r22, 0xCF	; 207
     7f2:	73 e0       	ldi	r23, 0x03	; 3
     7f4:	82 e0       	ldi	r24, 0x02	; 2
     7f6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <EXI_SetCallBack>
	EXI_TriggerEdge(EX_INT2,RISING_EDGE);
     7fa:	63 e0       	ldi	r22, 0x03	; 3
     7fc:	82 e0       	ldi	r24, 0x02	; 2
     7fe:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <EXI_TriggerEdge>
	
	
	
	while(1)
	{
		TCNT1=0;
     802:	1d bc       	out	0x2d, r1	; 45
     804:	1c bc       	out	0x2c, r1	; 44
		flag=0;
     806:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__data_end>
		EXI_TriggerEdge(EX_INT2,RISING_EDGE);
     80a:	63 e0       	ldi	r22, 0x03	; 3
     80c:	82 e0       	ldi	r24, 0x02	; 2
     80e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <EXI_TriggerEdge>
		DIO_writepin(PINB3,HIGH);
     812:	61 e0       	ldi	r22, 0x01	; 1
     814:	8b e0       	ldi	r24, 0x0B	; 11
     816:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     81a:	8a e1       	ldi	r24, 0x1A	; 26
     81c:	8a 95       	dec	r24
     81e:	f1 f7       	brne	.-4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     820:	00 c0       	rjmp	.+0      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		_delay_us(10);
		DIO_writepin(PINB3,LOW);
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	8b e0       	ldi	r24, 0x0B	; 11
     826:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
		while(flag<2);
     82a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__data_end>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	e0 f3       	brcs	.-8      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
		time=(t2-t1);
     832:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <t2>
     836:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <t2+0x1>
     83a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <t1>
     83e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <t1+0x1>
     842:	28 1b       	sub	r18, r24
     844:	39 0b       	sbc	r19, r25
		u16_d=(time/58);
     846:	af e9       	ldi	r26, 0x9F	; 159
     848:	b6 e4       	ldi	r27, 0x46	; 70
     84a:	0e 94 22 0c 	call	0x1844	; 0x1844 <__umulhisi3>
		return u16_d;		
	}
     84e:	92 95       	swap	r25
     850:	82 95       	swap	r24
     852:	8f 70       	andi	r24, 0x0F	; 15
     854:	89 27       	eor	r24, r25
     856:	9f 70       	andi	r25, 0x0F	; 15
     858:	89 27       	eor	r24, r25
     85a:	08 95       	ret

0000085c <main>:
#include "APP/app.h"

int main(void)
{   
	
	 app_init();
     85c:	0e 94 2e 01 	call	0x25c	; 0x25c <app_init>

    while (1) 
    {
		app_start();
     860:	0e 94 44 01 	call	0x288	; 0x288 <app_start>
     864:	fd cf       	rjmp	.-6      	; 0x860 <__stack+0x1>

00000866 <DIO_initpin>:
		  DIO_initpin(i,PinsStatusArray[i]);
	  }
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
     866:	98 2f       	mov	r25, r24
     868:	96 95       	lsr	r25
     86a:	96 95       	lsr	r25
     86c:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     86e:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error = DIO_OK;
	  
	  if (pin_num < 8)
	  {

		  switch(status)
     870:	61 30       	cpi	r22, 0x01	; 1
     872:	09 f4       	brne	.+2      	; 0x876 <DIO_initpin+0x10>
     874:	59 c0       	rjmp	.+178    	; 0x928 <DIO_initpin+0xc2>
     876:	20 f0       	brcs	.+8      	; 0x880 <DIO_initpin+0x1a>
     878:	62 30       	cpi	r22, 0x02	; 2
     87a:	09 f4       	brne	.+2      	; 0x87e <DIO_initpin+0x18>
     87c:	a9 c0       	rjmp	.+338    	; 0x9d0 <DIO_initpin+0x16a>
     87e:	fc c0       	rjmp	.+504    	; 0xa78 <DIO_initpin+0x212>
		  {
			  case OUTPUT:
			  switch(port)
     880:	91 30       	cpi	r25, 0x01	; 1
     882:	c9 f0       	breq	.+50     	; 0x8b6 <DIO_initpin+0x50>
     884:	28 f0       	brcs	.+10     	; 0x890 <DIO_initpin+0x2a>
     886:	92 30       	cpi	r25, 0x02	; 2
     888:	49 f1       	breq	.+82     	; 0x8dc <DIO_initpin+0x76>
     88a:	93 30       	cpi	r25, 0x03	; 3
     88c:	d1 f1       	breq	.+116    	; 0x902 <DIO_initpin+0x9c>
     88e:	f6 c0       	rjmp	.+492    	; 0xa7c <DIO_initpin+0x216>
			  {
				  case PA:
				  SET_BIT( DDRA,pin_num);
     890:	4a b3       	in	r20, 0x1a	; 26
     892:	21 e0       	ldi	r18, 0x01	; 1
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	b9 01       	movw	r22, r18
     898:	02 c0       	rjmp	.+4      	; 0x89e <DIO_initpin+0x38>
     89a:	66 0f       	add	r22, r22
     89c:	77 1f       	adc	r23, r23
     89e:	8a 95       	dec	r24
     8a0:	e2 f7       	brpl	.-8      	; 0x89a <DIO_initpin+0x34>
     8a2:	cb 01       	movw	r24, r22
     8a4:	94 2f       	mov	r25, r20
     8a6:	98 2b       	or	r25, r24
     8a8:	9a bb       	out	0x1a, r25	; 26
				  CLR_BIT(PORTA,pin_num);
     8aa:	9b b3       	in	r25, 0x1b	; 27
     8ac:	80 95       	com	r24
     8ae:	89 23       	and	r24, r25
     8b0:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     8b2:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  SET_BIT( DDRA,pin_num);
				  CLR_BIT(PORTA,pin_num);
				  break;
     8b4:	08 95       	ret
				  case PB:
				  SET_BIT( DDRB,pin_num);
     8b6:	47 b3       	in	r20, 0x17	; 23
     8b8:	21 e0       	ldi	r18, 0x01	; 1
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	b9 01       	movw	r22, r18
     8be:	02 c0       	rjmp	.+4      	; 0x8c4 <DIO_initpin+0x5e>
     8c0:	66 0f       	add	r22, r22
     8c2:	77 1f       	adc	r23, r23
     8c4:	8a 95       	dec	r24
     8c6:	e2 f7       	brpl	.-8      	; 0x8c0 <DIO_initpin+0x5a>
     8c8:	cb 01       	movw	r24, r22
     8ca:	94 2f       	mov	r25, r20
     8cc:	98 2b       	or	r25, r24
     8ce:	97 bb       	out	0x17, r25	; 23
				  CLR_BIT(PORTB,pin_num);
     8d0:	98 b3       	in	r25, 0x18	; 24
     8d2:	80 95       	com	r24
     8d4:	89 23       	and	r24, r25
     8d6:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     8d8:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  SET_BIT( DDRB,pin_num);
				  CLR_BIT(PORTB,pin_num);
				  break;
     8da:	08 95       	ret
				  case PC:
				  SET_BIT( DDRC,pin_num);
     8dc:	44 b3       	in	r20, 0x14	; 20
     8de:	21 e0       	ldi	r18, 0x01	; 1
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	b9 01       	movw	r22, r18
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <DIO_initpin+0x84>
     8e6:	66 0f       	add	r22, r22
     8e8:	77 1f       	adc	r23, r23
     8ea:	8a 95       	dec	r24
     8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <DIO_initpin+0x80>
     8ee:	cb 01       	movw	r24, r22
     8f0:	94 2f       	mov	r25, r20
     8f2:	98 2b       	or	r25, r24
     8f4:	94 bb       	out	0x14, r25	; 20
				  CLR_BIT(PORTC,pin_num);
     8f6:	95 b3       	in	r25, 0x15	; 21
     8f8:	80 95       	com	r24
     8fa:	89 23       	and	r24, r25
     8fc:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     8fe:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  SET_BIT( DDRC,pin_num);
				  CLR_BIT(PORTC,pin_num);
				  break;
     900:	08 95       	ret
				  case PD:
				  SET_BIT( DDRD,pin_num);
     902:	41 b3       	in	r20, 0x11	; 17
     904:	21 e0       	ldi	r18, 0x01	; 1
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	b9 01       	movw	r22, r18
     90a:	02 c0       	rjmp	.+4      	; 0x910 <DIO_initpin+0xaa>
     90c:	66 0f       	add	r22, r22
     90e:	77 1f       	adc	r23, r23
     910:	8a 95       	dec	r24
     912:	e2 f7       	brpl	.-8      	; 0x90c <DIO_initpin+0xa6>
     914:	cb 01       	movw	r24, r22
     916:	94 2f       	mov	r25, r20
     918:	98 2b       	or	r25, r24
     91a:	91 bb       	out	0x11, r25	; 17
				  CLR_BIT(PORTD,pin_num);
     91c:	92 b3       	in	r25, 0x12	; 18
     91e:	80 95       	com	r24
     920:	89 23       	and	r24, r25
     922:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     924:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  SET_BIT( DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
     926:	08 95       	ret
				  error = WRONG_PORT_NUMBER;
				  break;
			  }
			  break;
			  case INFREE:
			  switch(port)
     928:	91 30       	cpi	r25, 0x01	; 1
     92a:	c9 f0       	breq	.+50     	; 0x95e <DIO_initpin+0xf8>
     92c:	28 f0       	brcs	.+10     	; 0x938 <DIO_initpin+0xd2>
     92e:	92 30       	cpi	r25, 0x02	; 2
     930:	49 f1       	breq	.+82     	; 0x984 <DIO_initpin+0x11e>
     932:	93 30       	cpi	r25, 0x03	; 3
     934:	d1 f1       	breq	.+116    	; 0x9aa <DIO_initpin+0x144>
     936:	a4 c0       	rjmp	.+328    	; 0xa80 <DIO_initpin+0x21a>
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
     938:	4a b3       	in	r20, 0x1a	; 26
     93a:	21 e0       	ldi	r18, 0x01	; 1
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	b9 01       	movw	r22, r18
     940:	02 c0       	rjmp	.+4      	; 0x946 <DIO_initpin+0xe0>
     942:	66 0f       	add	r22, r22
     944:	77 1f       	adc	r23, r23
     946:	8a 95       	dec	r24
     948:	e2 f7       	brpl	.-8      	; 0x942 <DIO_initpin+0xdc>
     94a:	cb 01       	movw	r24, r22
     94c:	80 95       	com	r24
     94e:	94 2f       	mov	r25, r20
     950:	98 23       	and	r25, r24
     952:	9a bb       	out	0x1a, r25	; 26
				  CLR_BIT(PORTA,pin_num);
     954:	9b b3       	in	r25, 0x1b	; 27
     956:	89 23       	and	r24, r25
     958:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     95a:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
				  CLR_BIT(PORTA,pin_num);
				  break;
     95c:	08 95       	ret
				  case PB:
				  CLR_BIT(DDRB,pin_num);
     95e:	47 b3       	in	r20, 0x17	; 23
     960:	21 e0       	ldi	r18, 0x01	; 1
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	b9 01       	movw	r22, r18
     966:	02 c0       	rjmp	.+4      	; 0x96c <DIO_initpin+0x106>
     968:	66 0f       	add	r22, r22
     96a:	77 1f       	adc	r23, r23
     96c:	8a 95       	dec	r24
     96e:	e2 f7       	brpl	.-8      	; 0x968 <DIO_initpin+0x102>
     970:	cb 01       	movw	r24, r22
     972:	80 95       	com	r24
     974:	94 2f       	mov	r25, r20
     976:	98 23       	and	r25, r24
     978:	97 bb       	out	0x17, r25	; 23
				  CLR_BIT(PORTB,pin_num);
     97a:	98 b3       	in	r25, 0x18	; 24
     97c:	89 23       	and	r24, r25
     97e:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     980:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  CLR_BIT(DDRB,pin_num);
				  CLR_BIT(PORTB,pin_num);
				  break;
     982:	08 95       	ret
				  case PC:
				  CLR_BIT(DDRC,pin_num);
     984:	44 b3       	in	r20, 0x14	; 20
     986:	21 e0       	ldi	r18, 0x01	; 1
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	b9 01       	movw	r22, r18
     98c:	02 c0       	rjmp	.+4      	; 0x992 <DIO_initpin+0x12c>
     98e:	66 0f       	add	r22, r22
     990:	77 1f       	adc	r23, r23
     992:	8a 95       	dec	r24
     994:	e2 f7       	brpl	.-8      	; 0x98e <DIO_initpin+0x128>
     996:	cb 01       	movw	r24, r22
     998:	80 95       	com	r24
     99a:	94 2f       	mov	r25, r20
     99c:	98 23       	and	r25, r24
     99e:	94 bb       	out	0x14, r25	; 20
				  CLR_BIT(PORTC,pin_num);
     9a0:	95 b3       	in	r25, 0x15	; 21
     9a2:	89 23       	and	r24, r25
     9a4:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     9a6:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  CLR_BIT(DDRC,pin_num);
				  CLR_BIT(PORTC,pin_num);
				  break;
     9a8:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
     9aa:	41 b3       	in	r20, 0x11	; 17
     9ac:	21 e0       	ldi	r18, 0x01	; 1
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	b9 01       	movw	r22, r18
     9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <DIO_initpin+0x152>
     9b4:	66 0f       	add	r22, r22
     9b6:	77 1f       	adc	r23, r23
     9b8:	8a 95       	dec	r24
     9ba:	e2 f7       	brpl	.-8      	; 0x9b4 <DIO_initpin+0x14e>
     9bc:	cb 01       	movw	r24, r22
     9be:	80 95       	com	r24
     9c0:	94 2f       	mov	r25, r20
     9c2:	98 23       	and	r25, r24
     9c4:	91 bb       	out	0x11, r25	; 17
				  CLR_BIT(PORTD,pin_num);
     9c6:	92 b3       	in	r25, 0x12	; 18
     9c8:	89 23       	and	r24, r25
     9ca:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     9cc:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
     9ce:	08 95       	ret
				  break;
			  }
			  break;

			  case INPULL:
			  switch(port)
     9d0:	91 30       	cpi	r25, 0x01	; 1
     9d2:	c9 f0       	breq	.+50     	; 0xa06 <DIO_initpin+0x1a0>
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <DIO_initpin+0x17a>
     9d6:	92 30       	cpi	r25, 0x02	; 2
     9d8:	49 f1       	breq	.+82     	; 0xa2c <DIO_initpin+0x1c6>
     9da:	93 30       	cpi	r25, 0x03	; 3
     9dc:	d1 f1       	breq	.+116    	; 0xa52 <DIO_initpin+0x1ec>
     9de:	52 c0       	rjmp	.+164    	; 0xa84 <DIO_initpin+0x21e>
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
     9e0:	4a b3       	in	r20, 0x1a	; 26
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	b9 01       	movw	r22, r18
     9e8:	02 c0       	rjmp	.+4      	; 0x9ee <DIO_initpin+0x188>
     9ea:	66 0f       	add	r22, r22
     9ec:	77 1f       	adc	r23, r23
     9ee:	8a 95       	dec	r24
     9f0:	e2 f7       	brpl	.-8      	; 0x9ea <DIO_initpin+0x184>
     9f2:	cb 01       	movw	r24, r22
     9f4:	96 2f       	mov	r25, r22
     9f6:	90 95       	com	r25
     9f8:	94 23       	and	r25, r20
     9fa:	9a bb       	out	0x1a, r25	; 26
				  SET_BIT(PORTA,pin_num);
     9fc:	9b b3       	in	r25, 0x1b	; 27
     9fe:	89 2b       	or	r24, r25
     a00:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     a02:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
				  SET_BIT(PORTA,pin_num);
				  break;
     a04:	08 95       	ret
				  case PB:
				  CLR_BIT(DDRB,pin_num);
     a06:	47 b3       	in	r20, 0x17	; 23
     a08:	21 e0       	ldi	r18, 0x01	; 1
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	b9 01       	movw	r22, r18
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <DIO_initpin+0x1ae>
     a10:	66 0f       	add	r22, r22
     a12:	77 1f       	adc	r23, r23
     a14:	8a 95       	dec	r24
     a16:	e2 f7       	brpl	.-8      	; 0xa10 <DIO_initpin+0x1aa>
     a18:	cb 01       	movw	r24, r22
     a1a:	96 2f       	mov	r25, r22
     a1c:	90 95       	com	r25
     a1e:	94 23       	and	r25, r20
     a20:	97 bb       	out	0x17, r25	; 23
				  SET_BIT(PORTB,pin_num);
     a22:	98 b3       	in	r25, 0x18	; 24
     a24:	89 2b       	or	r24, r25
     a26:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     a28:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  CLR_BIT(DDRB,pin_num);
				  SET_BIT(PORTB,pin_num);
				  break;
     a2a:	08 95       	ret
				  case PC:
				  CLR_BIT(DDRC,pin_num);
     a2c:	44 b3       	in	r20, 0x14	; 20
     a2e:	21 e0       	ldi	r18, 0x01	; 1
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	b9 01       	movw	r22, r18
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <DIO_initpin+0x1d4>
     a36:	66 0f       	add	r22, r22
     a38:	77 1f       	adc	r23, r23
     a3a:	8a 95       	dec	r24
     a3c:	e2 f7       	brpl	.-8      	; 0xa36 <DIO_initpin+0x1d0>
     a3e:	cb 01       	movw	r24, r22
     a40:	96 2f       	mov	r25, r22
     a42:	90 95       	com	r25
     a44:	94 23       	and	r25, r20
     a46:	94 bb       	out	0x14, r25	; 20
				  SET_BIT(PORTC,pin_num);
     a48:	95 b3       	in	r25, 0x15	; 21
     a4a:	89 2b       	or	r24, r25
     a4c:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     a4e:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  CLR_BIT(DDRC,pin_num);
				  SET_BIT(PORTC,pin_num);
				  break;
     a50:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
     a52:	41 b3       	in	r20, 0x11	; 17
     a54:	21 e0       	ldi	r18, 0x01	; 1
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	b9 01       	movw	r22, r18
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <DIO_initpin+0x1fa>
     a5c:	66 0f       	add	r22, r22
     a5e:	77 1f       	adc	r23, r23
     a60:	8a 95       	dec	r24
     a62:	e2 f7       	brpl	.-8      	; 0xa5c <DIO_initpin+0x1f6>
     a64:	cb 01       	movw	r24, r22
     a66:	96 2f       	mov	r25, r22
     a68:	90 95       	com	r25
     a6a:	94 23       	and	r25, r20
     a6c:	91 bb       	out	0x11, r25	; 17
				  SET_BIT(PORTD,pin_num);
     a6e:	92 b3       	in	r25, 0x12	; 18
     a70:	89 2b       	or	r24, r25
     a72:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     a74:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  SET_BIT(PORTD,pin_num);
				  break;
     a76:	08 95       	ret
				  error = WRONG_PORT_NUMBER;
				  break;
			  }
			  break;
			  default:
			  error = WRONG_PORT_NUMBER;
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	08 95       	ret
				  case PD:
				  SET_BIT( DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  SET_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     a84:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
     a86:	08 95       	ret

00000a88 <DIO_Init_All>:
	    return error;
    }
//////////////////////////////////////////////////////////////////////*/
//pin MODE
  void DIO_Init_All(void)
  {
     a88:	cf 93       	push	r28
	  DIO_Pin_type i;
	  for (i=PINA0; i<TOTAL_PINS; i++)
     a8a:	c0 e0       	ldi	r28, 0x00	; 0
     a8c:	09 c0       	rjmp	.+18     	; 0xaa0 <DIO_Init_All+0x18>
	  {
		  DIO_initpin(i,PinsStatusArray[i]);
     a8e:	ec 2f       	mov	r30, r28
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	ee 53       	subi	r30, 0x3E	; 62
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	60 81       	ld	r22, Z
     a98:	8c 2f       	mov	r24, r28
     a9a:	0e 94 33 04 	call	0x866	; 0x866 <DIO_initpin>
//////////////////////////////////////////////////////////////////////*/
//pin MODE
  void DIO_Init_All(void)
  {
	  DIO_Pin_type i;
	  for (i=PINA0; i<TOTAL_PINS; i++)
     a9e:	cf 5f       	subi	r28, 0xFF	; 255
     aa0:	c0 32       	cpi	r28, 0x20	; 32
     aa2:	a8 f3       	brcs	.-22     	; 0xa8e <DIO_Init_All+0x6>
	  {
		  DIO_initpin(i,PinsStatusArray[i]);
	  }
  }
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <DIO_writepin>:
	  return error;

  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
     aa8:	98 2f       	mov	r25, r24
     aaa:	96 95       	lsr	r25
     aac:	96 95       	lsr	r25
     aae:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     ab0:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error= DIO_OK;
	  if (pin_num<8)
	  {
		  switch (volt)
     ab2:	66 23       	and	r22, r22
     ab4:	09 f4       	brne	.+2      	; 0xab8 <DIO_writepin+0x10>
     ab6:	43 c0       	rjmp	.+134    	; 0xb3e <DIO_writepin+0x96>
     ab8:	61 30       	cpi	r22, 0x01	; 1
     aba:	09 f0       	breq	.+2      	; 0xabe <DIO_writepin+0x16>
     abc:	84 c0       	rjmp	.+264    	; 0xbc6 <DIO_writepin+0x11e>
		  {
			  case HIGH:

			  switch(port)
     abe:	91 30       	cpi	r25, 0x01	; 1
     ac0:	a1 f0       	breq	.+40     	; 0xaea <DIO_writepin+0x42>
     ac2:	28 f0       	brcs	.+10     	; 0xace <DIO_writepin+0x26>
     ac4:	92 30       	cpi	r25, 0x02	; 2
     ac6:	f9 f0       	breq	.+62     	; 0xb06 <DIO_writepin+0x5e>
     ac8:	93 30       	cpi	r25, 0x03	; 3
     aca:	59 f1       	breq	.+86     	; 0xb22 <DIO_writepin+0x7a>
     acc:	7e c0       	rjmp	.+252    	; 0xbca <DIO_writepin+0x122>
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
     ace:	4b b3       	in	r20, 0x1b	; 27
     ad0:	21 e0       	ldi	r18, 0x01	; 1
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	b9 01       	movw	r22, r18
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <DIO_writepin+0x34>
     ad8:	66 0f       	add	r22, r22
     ada:	77 1f       	adc	r23, r23
     adc:	8a 95       	dec	r24
     ade:	e2 f7       	brpl	.-8      	; 0xad8 <DIO_writepin+0x30>
     ae0:	cb 01       	movw	r24, r22
     ae2:	84 2b       	or	r24, r20
     ae4:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     ae6:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
				  break;
     ae8:	08 95       	ret
				  case PB:

				  SET_BIT(PORTB,pin_num);
     aea:	48 b3       	in	r20, 0x18	; 24
     aec:	21 e0       	ldi	r18, 0x01	; 1
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	b9 01       	movw	r22, r18
     af2:	02 c0       	rjmp	.+4      	; 0xaf8 <DIO_writepin+0x50>
     af4:	66 0f       	add	r22, r22
     af6:	77 1f       	adc	r23, r23
     af8:	8a 95       	dec	r24
     afa:	e2 f7       	brpl	.-8      	; 0xaf4 <DIO_writepin+0x4c>
     afc:	cb 01       	movw	r24, r22
     afe:	84 2b       	or	r24, r20
     b00:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     b02:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  SET_BIT(PORTB,pin_num);
				  break;
     b04:	08 95       	ret
				  case PC:

				  SET_BIT(PORTC,pin_num);
     b06:	45 b3       	in	r20, 0x15	; 21
     b08:	21 e0       	ldi	r18, 0x01	; 1
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	b9 01       	movw	r22, r18
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <DIO_writepin+0x6c>
     b10:	66 0f       	add	r22, r22
     b12:	77 1f       	adc	r23, r23
     b14:	8a 95       	dec	r24
     b16:	e2 f7       	brpl	.-8      	; 0xb10 <DIO_writepin+0x68>
     b18:	cb 01       	movw	r24, r22
     b1a:	84 2b       	or	r24, r20
     b1c:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     b1e:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  SET_BIT(PORTC,pin_num);
				  break;
     b20:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
     b22:	42 b3       	in	r20, 0x12	; 18
     b24:	21 e0       	ldi	r18, 0x01	; 1
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	b9 01       	movw	r22, r18
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <DIO_writepin+0x88>
     b2c:	66 0f       	add	r22, r22
     b2e:	77 1f       	adc	r23, r23
     b30:	8a 95       	dec	r24
     b32:	e2 f7       	brpl	.-8      	; 0xb2c <DIO_writepin+0x84>
     b34:	cb 01       	movw	r24, r22
     b36:	84 2b       	or	r24, r20
     b38:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     b3a:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
     b3c:	08 95       	ret
			  }
			  break;

			  case LOW:

			  switch(port)
     b3e:	91 30       	cpi	r25, 0x01	; 1
     b40:	a9 f0       	breq	.+42     	; 0xb6c <DIO_writepin+0xc4>
     b42:	28 f0       	brcs	.+10     	; 0xb4e <DIO_writepin+0xa6>
     b44:	92 30       	cpi	r25, 0x02	; 2
     b46:	09 f1       	breq	.+66     	; 0xb8a <DIO_writepin+0xe2>
     b48:	93 30       	cpi	r25, 0x03	; 3
     b4a:	71 f1       	breq	.+92     	; 0xba8 <DIO_writepin+0x100>
     b4c:	40 c0       	rjmp	.+128    	; 0xbce <DIO_writepin+0x126>
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
     b4e:	4b b3       	in	r20, 0x1b	; 27
     b50:	21 e0       	ldi	r18, 0x01	; 1
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	b9 01       	movw	r22, r18
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <DIO_writepin+0xb4>
     b58:	66 0f       	add	r22, r22
     b5a:	77 1f       	adc	r23, r23
     b5c:	8a 95       	dec	r24
     b5e:	e2 f7       	brpl	.-8      	; 0xb58 <DIO_writepin+0xb0>
     b60:	cb 01       	movw	r24, r22
     b62:	80 95       	com	r24
     b64:	84 23       	and	r24, r20
     b66:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     b68:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
				  break;
     b6a:	08 95       	ret
				  case PB:

				  CLR_BIT(PORTB,pin_num);
     b6c:	48 b3       	in	r20, 0x18	; 24
     b6e:	21 e0       	ldi	r18, 0x01	; 1
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	b9 01       	movw	r22, r18
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <DIO_writepin+0xd2>
     b76:	66 0f       	add	r22, r22
     b78:	77 1f       	adc	r23, r23
     b7a:	8a 95       	dec	r24
     b7c:	e2 f7       	brpl	.-8      	; 0xb76 <DIO_writepin+0xce>
     b7e:	cb 01       	movw	r24, r22
     b80:	80 95       	com	r24
     b82:	84 23       	and	r24, r20
     b84:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     b86:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  CLR_BIT(PORTB,pin_num);
				  break;
     b88:	08 95       	ret
				  case PC:

				  CLR_BIT(PORTC,pin_num);
     b8a:	45 b3       	in	r20, 0x15	; 21
     b8c:	21 e0       	ldi	r18, 0x01	; 1
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	b9 01       	movw	r22, r18
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <DIO_writepin+0xf0>
     b94:	66 0f       	add	r22, r22
     b96:	77 1f       	adc	r23, r23
     b98:	8a 95       	dec	r24
     b9a:	e2 f7       	brpl	.-8      	; 0xb94 <DIO_writepin+0xec>
     b9c:	cb 01       	movw	r24, r22
     b9e:	80 95       	com	r24
     ba0:	84 23       	and	r24, r20
     ba2:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     ba4:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  CLR_BIT(PORTC,pin_num);
				  break;
     ba6:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
     ba8:	42 b3       	in	r20, 0x12	; 18
     baa:	21 e0       	ldi	r18, 0x01	; 1
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	b9 01       	movw	r22, r18
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <DIO_writepin+0x10e>
     bb2:	66 0f       	add	r22, r22
     bb4:	77 1f       	adc	r23, r23
     bb6:	8a 95       	dec	r24
     bb8:	e2 f7       	brpl	.-8      	; 0xbb2 <DIO_writepin+0x10a>
     bba:	cb 01       	movw	r24, r22
     bbc:	80 95       	com	r24
     bbe:	84 23       	and	r24, r20
     bc0:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     bc2:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
     bc4:	08 95       	ret
			  }

			  break;

			  default:
			  error = WRONG_VALUE;
     bc6:	83 e0       	ldi	r24, 0x03	; 3
     bc8:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     bce:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
     bd0:	08 95       	ret

00000bd2 <EXI_Enable>:

void EXI_Init(void)
{
	EXI_TriggerEdge(EX_INT0,FALLING_EDGE);
	EXI_TriggerEdge(EX_INT1,FALLING_EDGE);
	EXI_TriggerEdge(EX_INT2,FALLING_EDGE);
     bd2:	81 30       	cpi	r24, 0x01	; 1
     bd4:	41 f0       	breq	.+16     	; 0xbe6 <EXI_Enable+0x14>
     bd6:	18 f0       	brcs	.+6      	; 0xbde <EXI_Enable+0xc>
     bd8:	82 30       	cpi	r24, 0x02	; 2
     bda:	49 f0       	breq	.+18     	; 0xbee <EXI_Enable+0x1c>
     bdc:	08 95       	ret
     bde:	8b b7       	in	r24, 0x3b	; 59
     be0:	80 64       	ori	r24, 0x40	; 64
     be2:	8b bf       	out	0x3b, r24	; 59
     be4:	08 95       	ret
     be6:	8b b7       	in	r24, 0x3b	; 59
     be8:	80 68       	ori	r24, 0x80	; 128
     bea:	8b bf       	out	0x3b, r24	; 59
     bec:	08 95       	ret
     bee:	8b b7       	in	r24, 0x3b	; 59
     bf0:	80 62       	ori	r24, 0x20	; 32
     bf2:	8b bf       	out	0x3b, r24	; 59
     bf4:	08 95       	ret

00000bf6 <EXI_TriggerEdge>:
     bf6:	81 30       	cpi	r24, 0x01	; 1
     bf8:	49 f1       	breq	.+82     	; 0xc4c <EXI_TriggerEdge+0x56>
     bfa:	20 f0       	brcs	.+8      	; 0xc04 <EXI_TriggerEdge+0xe>
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	09 f4       	brne	.+2      	; 0xc02 <EXI_TriggerEdge+0xc>
     c00:	49 c0       	rjmp	.+146    	; 0xc94 <EXI_TriggerEdge+0x9e>
     c02:	08 95       	ret
     c04:	61 30       	cpi	r22, 0x01	; 1
     c06:	69 f0       	breq	.+26     	; 0xc22 <EXI_TriggerEdge+0x2c>
     c08:	28 f0       	brcs	.+10     	; 0xc14 <EXI_TriggerEdge+0x1e>
     c0a:	62 30       	cpi	r22, 0x02	; 2
     c0c:	89 f0       	breq	.+34     	; 0xc30 <EXI_TriggerEdge+0x3a>
     c0e:	63 30       	cpi	r22, 0x03	; 3
     c10:	b1 f0       	breq	.+44     	; 0xc3e <EXI_TriggerEdge+0x48>
     c12:	08 95       	ret
     c14:	85 b7       	in	r24, 0x35	; 53
     c16:	8e 7f       	andi	r24, 0xFE	; 254
     c18:	85 bf       	out	0x35, r24	; 53
     c1a:	85 b7       	in	r24, 0x35	; 53
     c1c:	8d 7f       	andi	r24, 0xFD	; 253
     c1e:	85 bf       	out	0x35, r24	; 53
     c20:	08 95       	ret
     c22:	85 b7       	in	r24, 0x35	; 53
     c24:	81 60       	ori	r24, 0x01	; 1
     c26:	85 bf       	out	0x35, r24	; 53
     c28:	85 b7       	in	r24, 0x35	; 53
     c2a:	8d 7f       	andi	r24, 0xFD	; 253
     c2c:	85 bf       	out	0x35, r24	; 53
     c2e:	08 95       	ret
     c30:	85 b7       	in	r24, 0x35	; 53
     c32:	8e 7f       	andi	r24, 0xFE	; 254
     c34:	85 bf       	out	0x35, r24	; 53
     c36:	85 b7       	in	r24, 0x35	; 53
     c38:	82 60       	ori	r24, 0x02	; 2
     c3a:	85 bf       	out	0x35, r24	; 53
     c3c:	08 95       	ret
     c3e:	85 b7       	in	r24, 0x35	; 53
     c40:	81 60       	ori	r24, 0x01	; 1
     c42:	85 bf       	out	0x35, r24	; 53
     c44:	85 b7       	in	r24, 0x35	; 53
     c46:	82 60       	ori	r24, 0x02	; 2
     c48:	85 bf       	out	0x35, r24	; 53
     c4a:	08 95       	ret
     c4c:	61 30       	cpi	r22, 0x01	; 1
     c4e:	69 f0       	breq	.+26     	; 0xc6a <EXI_TriggerEdge+0x74>
     c50:	28 f0       	brcs	.+10     	; 0xc5c <EXI_TriggerEdge+0x66>
     c52:	62 30       	cpi	r22, 0x02	; 2
     c54:	89 f0       	breq	.+34     	; 0xc78 <EXI_TriggerEdge+0x82>
     c56:	63 30       	cpi	r22, 0x03	; 3
     c58:	b1 f0       	breq	.+44     	; 0xc86 <EXI_TriggerEdge+0x90>
     c5a:	08 95       	ret
     c5c:	85 b7       	in	r24, 0x35	; 53
     c5e:	8b 7f       	andi	r24, 0xFB	; 251
     c60:	85 bf       	out	0x35, r24	; 53
     c62:	85 b7       	in	r24, 0x35	; 53
     c64:	87 7f       	andi	r24, 0xF7	; 247
     c66:	85 bf       	out	0x35, r24	; 53
     c68:	08 95       	ret
     c6a:	85 b7       	in	r24, 0x35	; 53
     c6c:	84 60       	ori	r24, 0x04	; 4
     c6e:	85 bf       	out	0x35, r24	; 53
     c70:	85 b7       	in	r24, 0x35	; 53
     c72:	87 7f       	andi	r24, 0xF7	; 247
     c74:	85 bf       	out	0x35, r24	; 53
     c76:	08 95       	ret
     c78:	85 b7       	in	r24, 0x35	; 53
     c7a:	8b 7f       	andi	r24, 0xFB	; 251
     c7c:	85 bf       	out	0x35, r24	; 53
     c7e:	85 b7       	in	r24, 0x35	; 53
     c80:	88 60       	ori	r24, 0x08	; 8
     c82:	85 bf       	out	0x35, r24	; 53
     c84:	08 95       	ret
     c86:	85 b7       	in	r24, 0x35	; 53
     c88:	84 60       	ori	r24, 0x04	; 4
     c8a:	85 bf       	out	0x35, r24	; 53
     c8c:	85 b7       	in	r24, 0x35	; 53
     c8e:	88 60       	ori	r24, 0x08	; 8
     c90:	85 bf       	out	0x35, r24	; 53
     c92:	08 95       	ret
     c94:	62 30       	cpi	r22, 0x02	; 2
     c96:	19 f0       	breq	.+6      	; 0xc9e <EXI_TriggerEdge+0xa8>
     c98:	63 30       	cpi	r22, 0x03	; 3
     c9a:	29 f0       	breq	.+10     	; 0xca6 <EXI_TriggerEdge+0xb0>
     c9c:	08 c0       	rjmp	.+16     	; 0xcae <EXI_TriggerEdge+0xb8>
     c9e:	84 b7       	in	r24, 0x34	; 52
     ca0:	8f 7b       	andi	r24, 0xBF	; 191
     ca2:	84 bf       	out	0x34, r24	; 52
     ca4:	08 95       	ret
     ca6:	84 b7       	in	r24, 0x34	; 52
     ca8:	80 64       	ori	r24, 0x40	; 64
     caa:	84 bf       	out	0x34, r24	; 52
     cac:	08 95       	ret
     cae:	84 b7       	in	r24, 0x34	; 52
     cb0:	8f 7b       	andi	r24, 0xBF	; 191
     cb2:	84 bf       	out	0x34, r24	; 52
     cb4:	08 95       	ret

00000cb6 <EXI_SetCallBack>:
/************************************Call back functions*********************************************/
void EXI_SetCallBack(ExInterruptSource_type Interrupt,void(*LocalPtr)(void))
{
	
	
	switch(Interrupt){
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	49 f0       	breq	.+18     	; 0xccc <EXI_SetCallBack+0x16>
     cba:	18 f0       	brcs	.+6      	; 0xcc2 <EXI_SetCallBack+0xc>
     cbc:	82 30       	cpi	r24, 0x02	; 2
     cbe:	59 f0       	breq	.+22     	; 0xcd6 <EXI_SetCallBack+0x20>
     cc0:	08 95       	ret
		case EX_INT0:
		INT0_Fptr=LocalPtr;
     cc2:	70 93 e8 00 	sts	0x00E8, r23	; 0x8000e8 <INT0_Fptr+0x1>
     cc6:	60 93 e7 00 	sts	0x00E7, r22	; 0x8000e7 <INT0_Fptr>
		break;
     cca:	08 95       	ret
		case EX_INT1:
		INT1_Fptr=LocalPtr;
     ccc:	70 93 e6 00 	sts	0x00E6, r23	; 0x8000e6 <INT1_Fptr+0x1>
     cd0:	60 93 e5 00 	sts	0x00E5, r22	; 0x8000e5 <INT1_Fptr>
		break;
     cd4:	08 95       	ret
		case EX_INT2:
		INT2_Fptr=LocalPtr;
     cd6:	70 93 e4 00 	sts	0x00E4, r23	; 0x8000e4 <INT2_Fptr+0x1>
     cda:	60 93 e3 00 	sts	0x00E3, r22	; 0x8000e3 <INT2_Fptr>
     cde:	08 95       	ret

00000ce0 <__vector_1>:




ISR(INT0_vect)
{  
     ce0:	1f 92       	push	r1
     ce2:	0f 92       	push	r0
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	0f 92       	push	r0
     ce8:	11 24       	eor	r1, r1
     cea:	2f 93       	push	r18
     cec:	3f 93       	push	r19
     cee:	4f 93       	push	r20
     cf0:	5f 93       	push	r21
     cf2:	6f 93       	push	r22
     cf4:	7f 93       	push	r23
     cf6:	8f 93       	push	r24
     cf8:	9f 93       	push	r25
     cfa:	af 93       	push	r26
     cfc:	bf 93       	push	r27
     cfe:	ef 93       	push	r30
     d00:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
     d02:	e0 91 e7 00 	lds	r30, 0x00E7	; 0x8000e7 <INT0_Fptr>
     d06:	f0 91 e8 00 	lds	r31, 0x00E8	; 0x8000e8 <INT0_Fptr+0x1>
     d0a:	30 97       	sbiw	r30, 0x00	; 0
     d0c:	09 f0       	breq	.+2      	; 0xd10 <__vector_1+0x30>
	{
		INT0_Fptr();
     d0e:	09 95       	icall
	}
}
     d10:	ff 91       	pop	r31
     d12:	ef 91       	pop	r30
     d14:	bf 91       	pop	r27
     d16:	af 91       	pop	r26
     d18:	9f 91       	pop	r25
     d1a:	8f 91       	pop	r24
     d1c:	7f 91       	pop	r23
     d1e:	6f 91       	pop	r22
     d20:	5f 91       	pop	r21
     d22:	4f 91       	pop	r20
     d24:	3f 91       	pop	r19
     d26:	2f 91       	pop	r18
     d28:	0f 90       	pop	r0
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	0f 90       	pop	r0
     d2e:	1f 90       	pop	r1
     d30:	18 95       	reti

00000d32 <__vector_2>:
ISR(INT1_vect)
{
     d32:	1f 92       	push	r1
     d34:	0f 92       	push	r0
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	0f 92       	push	r0
     d3a:	11 24       	eor	r1, r1
     d3c:	2f 93       	push	r18
     d3e:	3f 93       	push	r19
     d40:	4f 93       	push	r20
     d42:	5f 93       	push	r21
     d44:	6f 93       	push	r22
     d46:	7f 93       	push	r23
     d48:	8f 93       	push	r24
     d4a:	9f 93       	push	r25
     d4c:	af 93       	push	r26
     d4e:	bf 93       	push	r27
     d50:	ef 93       	push	r30
     d52:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
     d54:	e0 91 e5 00 	lds	r30, 0x00E5	; 0x8000e5 <INT1_Fptr>
     d58:	f0 91 e6 00 	lds	r31, 0x00E6	; 0x8000e6 <INT1_Fptr+0x1>
     d5c:	30 97       	sbiw	r30, 0x00	; 0
     d5e:	09 f0       	breq	.+2      	; 0xd62 <__vector_2+0x30>
	{
		INT1_Fptr();
     d60:	09 95       	icall
	}
}
     d62:	ff 91       	pop	r31
     d64:	ef 91       	pop	r30
     d66:	bf 91       	pop	r27
     d68:	af 91       	pop	r26
     d6a:	9f 91       	pop	r25
     d6c:	8f 91       	pop	r24
     d6e:	7f 91       	pop	r23
     d70:	6f 91       	pop	r22
     d72:	5f 91       	pop	r21
     d74:	4f 91       	pop	r20
     d76:	3f 91       	pop	r19
     d78:	2f 91       	pop	r18
     d7a:	0f 90       	pop	r0
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	0f 90       	pop	r0
     d80:	1f 90       	pop	r1
     d82:	18 95       	reti

00000d84 <__vector_3>:
ISR(INT2_vect)
{
     d84:	1f 92       	push	r1
     d86:	0f 92       	push	r0
     d88:	0f b6       	in	r0, 0x3f	; 63
     d8a:	0f 92       	push	r0
     d8c:	11 24       	eor	r1, r1
     d8e:	2f 93       	push	r18
     d90:	3f 93       	push	r19
     d92:	4f 93       	push	r20
     d94:	5f 93       	push	r21
     d96:	6f 93       	push	r22
     d98:	7f 93       	push	r23
     d9a:	8f 93       	push	r24
     d9c:	9f 93       	push	r25
     d9e:	af 93       	push	r26
     da0:	bf 93       	push	r27
     da2:	ef 93       	push	r30
     da4:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
     da6:	e0 91 e3 00 	lds	r30, 0x00E3	; 0x8000e3 <INT2_Fptr>
     daa:	f0 91 e4 00 	lds	r31, 0x00E4	; 0x8000e4 <INT2_Fptr+0x1>
     dae:	30 97       	sbiw	r30, 0x00	; 0
     db0:	09 f0       	breq	.+2      	; 0xdb4 <__vector_3+0x30>
	{
		INT2_Fptr();
     db2:	09 95       	icall
	}
}
     db4:	ff 91       	pop	r31
     db6:	ef 91       	pop	r30
     db8:	bf 91       	pop	r27
     dba:	af 91       	pop	r26
     dbc:	9f 91       	pop	r25
     dbe:	8f 91       	pop	r24
     dc0:	7f 91       	pop	r23
     dc2:	6f 91       	pop	r22
     dc4:	5f 91       	pop	r21
     dc6:	4f 91       	pop	r20
     dc8:	3f 91       	pop	r19
     dca:	2f 91       	pop	r18
     dcc:	0f 90       	pop	r0
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	0f 90       	pop	r0
     dd2:	1f 90       	pop	r1
     dd4:	18 95       	reti

00000dd6 <waveGen>:
	TIMER0_OV_SetCallBack(waveGen);
	
} 

void waveGen()
{  static u32 OV=0;
     dd6:	0f 93       	push	r16
     dd8:	1f 93       	push	r17
	TCNT0=6;
     dda:	86 e0       	ldi	r24, 0x06	; 6
     ddc:	82 bf       	out	0x32, r24	; 50
	OV++;
     dde:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <OV.2039>
     de2:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <OV.2039+0x1>
     de6:	a0 91 eb 00 	lds	r26, 0x00EB	; 0x8000eb <OV.2039+0x2>
     dea:	b0 91 ec 00 	lds	r27, 0x00EC	; 0x8000ec <OV.2039+0x3>
     dee:	01 96       	adiw	r24, 0x01	; 1
     df0:	a1 1d       	adc	r26, r1
     df2:	b1 1d       	adc	r27, r1
     df4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <OV.2039>
     df8:	90 93 ea 00 	sts	0x00EA, r25	; 0x8000ea <OV.2039+0x1>
     dfc:	a0 93 eb 00 	sts	0x00EB, r26	; 0x8000eb <OV.2039+0x2>
     e00:	b0 93 ec 00 	sts	0x00EC, r27	; 0x8000ec <OV.2039+0x3>
	if (OV==(u32_OFFTicks+1))
     e04:	00 91 ed 00 	lds	r16, 0x00ED	; 0x8000ed <u32_OFFTicks>
     e08:	10 91 ee 00 	lds	r17, 0x00EE	; 0x8000ee <u32_OFFTicks+0x1>
     e0c:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <u32_OFFTicks+0x2>
     e10:	30 91 f0 00 	lds	r19, 0x00F0	; 0x8000f0 <u32_OFFTicks+0x3>
     e14:	b9 01       	movw	r22, r18
     e16:	a8 01       	movw	r20, r16
     e18:	4f 5f       	subi	r20, 0xFF	; 255
     e1a:	5f 4f       	sbci	r21, 0xFF	; 255
     e1c:	6f 4f       	sbci	r22, 0xFF	; 255
     e1e:	7f 4f       	sbci	r23, 0xFF	; 255
     e20:	84 17       	cp	r24, r20
     e22:	95 07       	cpc	r25, r21
     e24:	a6 07       	cpc	r26, r22
     e26:	b7 07       	cpc	r27, r23
     e28:	29 f4       	brne	.+10     	; 0xe34 <waveGen+0x5e>
	{
		DIO_writepin(PINB0,HIGH);//
     e2a:	61 e0       	ldi	r22, 0x01	; 1
     e2c:	88 e0       	ldi	r24, 0x08	; 8
     e2e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
     e32:	21 c0       	rjmp	.+66     	; 0xe76 <waveGen+0xa0>
	}
	else if (OV==(u32_ONTicks+u32_OFFTicks+2))
     e34:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <u32_ONTicks>
     e38:	50 91 f2 00 	lds	r21, 0x00F2	; 0x8000f2 <u32_ONTicks+0x1>
     e3c:	60 91 f3 00 	lds	r22, 0x00F3	; 0x8000f3 <u32_ONTicks+0x2>
     e40:	70 91 f4 00 	lds	r23, 0x00F4	; 0x8000f4 <u32_ONTicks+0x3>
     e44:	40 0f       	add	r20, r16
     e46:	51 1f       	adc	r21, r17
     e48:	62 1f       	adc	r22, r18
     e4a:	73 1f       	adc	r23, r19
     e4c:	4e 5f       	subi	r20, 0xFE	; 254
     e4e:	5f 4f       	sbci	r21, 0xFF	; 255
     e50:	6f 4f       	sbci	r22, 0xFF	; 255
     e52:	7f 4f       	sbci	r23, 0xFF	; 255
     e54:	84 17       	cp	r24, r20
     e56:	95 07       	cpc	r25, r21
     e58:	a6 07       	cpc	r26, r22
     e5a:	b7 07       	cpc	r27, r23
     e5c:	61 f4       	brne	.+24     	; 0xe76 <waveGen+0xa0>
	{
		DIO_writepin(PINB0,LOW);//
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	88 e0       	ldi	r24, 0x08	; 8
     e62:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
		OV=0;
     e66:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <OV.2039>
     e6a:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <OV.2039+0x1>
     e6e:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <OV.2039+0x2>
     e72:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <OV.2039+0x3>
	}
	
}
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	08 95       	ret

00000e7c <pwm_init>:
u32 u32_ONTicks=0,u32_OFFTicks=0;


void pwm_init()
{
	DIO_initpin(PINB0,OUTPUT);
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	88 e0       	ldi	r24, 0x08	; 8
     e80:	0e 94 33 04 	call	0x866	; 0x866 <DIO_initpin>
	TIMER0_Init(TIMER0_NORMAL_MODE);
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	0e 94 b6 07 	call	0xf6c	; 0xf6c <TIMER0_Init>
	TIMER0_OV_InterruptEnable();
     e8a:	0e 94 14 08 	call	0x1028	; 0x1028 <TIMER0_OV_InterruptEnable>
	TIMER0_OV_SetCallBack(waveGen);
     e8e:	8b ee       	ldi	r24, 0xEB	; 235
     e90:	96 e0       	ldi	r25, 0x06	; 6
     e92:	0e 94 e6 07 	call	0xfcc	; 0xfcc <TIMER0_OV_SetCallBack>
     e96:	08 95       	ret

00000e98 <PWM_set_duty>:
	
}


void PWM_set_duty(u8 u8_DutyCycle,u32 u32_Freq)
{
     e98:	8f 92       	push	r8
     e9a:	9f 92       	push	r9
     e9c:	af 92       	push	r10
     e9e:	bf 92       	push	r11
     ea0:	cf 92       	push	r12
     ea2:	df 92       	push	r13
     ea4:	ef 92       	push	r14
     ea6:	ff 92       	push	r15
     ea8:	cf 93       	push	r28
     eaa:	c8 2f       	mov	r28, r24
	f64 f64_wavePeriodTime = (f32)1 / u32_Freq*1000000;					         // The Periodic Time for the Generated Pulse in Seconds //
     eac:	cb 01       	movw	r24, r22
     eae:	ba 01       	movw	r22, r20
     eb0:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__floatunsisf>
     eb4:	9b 01       	movw	r18, r22
     eb6:	ac 01       	movw	r20, r24
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	80 e8       	ldi	r24, 0x80	; 128
     ebe:	9f e3       	ldi	r25, 0x3F	; 63
     ec0:	0e 94 3f 0a 	call	0x147e	; 0x147e <__divsf3>
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	34 e2       	ldi	r19, 0x24	; 36
     ec8:	44 e7       	ldi	r20, 0x74	; 116
     eca:	59 e4       	ldi	r21, 0x49	; 73
     ecc:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__mulsf3>
     ed0:	4b 01       	movw	r8, r22
     ed2:	5c 01       	movw	r10, r24
	f64 f64_waveONTime = (f64_wavePeriodTime*u8_DutyCycle) / 100;		// The HIGH Level Time in Seconds //
     ed4:	6c 2f       	mov	r22, r28
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__floatsisf>
     ee0:	a5 01       	movw	r20, r10
     ee2:	94 01       	movw	r18, r8
     ee4:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__mulsf3>
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	48 ec       	ldi	r20, 0xC8	; 200
     eee:	52 e4       	ldi	r21, 0x42	; 66
     ef0:	0e 94 3f 0a 	call	0x147e	; 0x147e <__divsf3>
     ef4:	6b 01       	movw	r12, r22
     ef6:	7c 01       	movw	r14, r24
	f64 f64_waveOFFTime = f64_wavePeriodTime - f64_waveONTime;		   // The LOW Level Time in Seconds //
     ef8:	9b 01       	movw	r18, r22
     efa:	ac 01       	movw	r20, r24
     efc:	c5 01       	movw	r24, r10
     efe:	b4 01       	movw	r22, r8
     f00:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__subsf3>
     f04:	4b 01       	movw	r8, r22
     f06:	5c 01       	movw	r10, r24
	f64 f64_oneTickTime = 0.0;
	f64_oneTickTime = (f64) (((f64)PWM_PRESCALER/(f64)F_CPU)*1000000);   //1u at 8,8
	//LCD_WriteNumber(f64_wavePeriodTime) ;
	f64 f64_max_time = (256*f64_oneTickTime); //256u
	//LCD_WriteNumber( f64_max_time) ;
	u32_ONTicks     =  f64_waveONTime/(f64_max_time-6);
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	4a e7       	ldi	r20, 0x7A	; 122
     f0e:	53 e4       	ldi	r21, 0x43	; 67
     f10:	c7 01       	movw	r24, r14
     f12:	b6 01       	movw	r22, r12
     f14:	0e 94 3f 0a 	call	0x147e	; 0x147e <__divsf3>
     f18:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__fixunssfsi>
     f1c:	60 93 f1 00 	sts	0x00F1, r22	; 0x8000f1 <u32_ONTicks>
     f20:	70 93 f2 00 	sts	0x00F2, r23	; 0x8000f2 <u32_ONTicks+0x1>
     f24:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <u32_ONTicks+0x2>
     f28:	90 93 f4 00 	sts	0x00F4, r25	; 0x8000f4 <u32_ONTicks+0x3>
	u32_OFFTicks    =  f64_waveOFFTime/(f64_max_time-6);
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	4a e7       	ldi	r20, 0x7A	; 122
     f32:	53 e4       	ldi	r21, 0x43	; 67
     f34:	c5 01       	movw	r24, r10
     f36:	b4 01       	movw	r22, r8
     f38:	0e 94 3f 0a 	call	0x147e	; 0x147e <__divsf3>
     f3c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__fixunssfsi>
     f40:	60 93 ed 00 	sts	0x00ED, r22	; 0x8000ed <u32_OFFTicks>
     f44:	70 93 ee 00 	sts	0x00EE, r23	; 0x8000ee <u32_OFFTicks+0x1>
     f48:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <u32_OFFTicks+0x2>
     f4c:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <u32_OFFTicks+0x3>
	DIO_writepin(PINB0,HIGH);
     f50:	61 e0       	ldi	r22, 0x01	; 1
     f52:	88 e0       	ldi	r24, 0x08	; 8
     f54:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_writepin>
}
     f58:	cf 91       	pop	r28
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	df 90       	pop	r13
     f60:	cf 90       	pop	r12
     f62:	bf 90       	pop	r11
     f64:	af 90       	pop	r10
     f66:	9f 90       	pop	r9
     f68:	8f 90       	pop	r8
     f6a:	08 95       	ret

00000f6c <TIMER0_Init>:
	TIMER_2_init(NORMAL_MODE);
	TIMER_2_setIntialValue(0);
	TIMER_2_start(PRECALER_1);
	TIMER_2_OvfNum(ovfNum2);
	
}
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	69 f0       	breq	.+26     	; 0xf8a <TIMER0_Init+0x1e>
     f70:	28 f0       	brcs	.+10     	; 0xf7c <TIMER0_Init+0x10>
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	89 f0       	breq	.+34     	; 0xf98 <TIMER0_Init+0x2c>
     f76:	83 30       	cpi	r24, 0x03	; 3
     f78:	b1 f0       	breq	.+44     	; 0xfa6 <TIMER0_Init+0x3a>
     f7a:	08 95       	ret
     f7c:	83 b7       	in	r24, 0x33	; 51
     f7e:	8f 7b       	andi	r24, 0xBF	; 191
     f80:	83 bf       	out	0x33, r24	; 51
     f82:	83 b7       	in	r24, 0x33	; 51
     f84:	87 7f       	andi	r24, 0xF7	; 247
     f86:	83 bf       	out	0x33, r24	; 51
     f88:	08 95       	ret
     f8a:	83 b7       	in	r24, 0x33	; 51
     f8c:	80 64       	ori	r24, 0x40	; 64
     f8e:	83 bf       	out	0x33, r24	; 51
     f90:	83 b7       	in	r24, 0x33	; 51
     f92:	87 7f       	andi	r24, 0xF7	; 247
     f94:	83 bf       	out	0x33, r24	; 51
     f96:	08 95       	ret
     f98:	83 b7       	in	r24, 0x33	; 51
     f9a:	8f 7b       	andi	r24, 0xBF	; 191
     f9c:	83 bf       	out	0x33, r24	; 51
     f9e:	83 b7       	in	r24, 0x33	; 51
     fa0:	88 60       	ori	r24, 0x08	; 8
     fa2:	83 bf       	out	0x33, r24	; 51
     fa4:	08 95       	ret
     fa6:	83 b7       	in	r24, 0x33	; 51
     fa8:	80 64       	ori	r24, 0x40	; 64
     faa:	83 bf       	out	0x33, r24	; 51
     fac:	83 b7       	in	r24, 0x33	; 51
     fae:	88 60       	ori	r24, 0x08	; 8
     fb0:	83 bf       	out	0x33, r24	; 51
     fb2:	08 95       	ret

00000fb4 <timer_start>:
     fb4:	88 30       	cpi	r24, 0x08	; 8
     fb6:	40 f4       	brcc	.+16     	; 0xfc8 <timer_start+0x14>
     fb8:	93 b7       	in	r25, 0x33	; 51
     fba:	98 7f       	andi	r25, 0xF8	; 248
     fbc:	93 bf       	out	0x33, r25	; 51
     fbe:	93 b7       	in	r25, 0x33	; 51
     fc0:	89 2b       	or	r24, r25
     fc2:	83 bf       	out	0x33, r24	; 51
     fc4:	84 e0       	ldi	r24, 0x04	; 4
     fc6:	08 95       	ret
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	08 95       	ret

00000fcc <TIMER0_OV_SetCallBack>:
     fcc:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <Timer0_OVF_Fptr+0x1>
     fd0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Timer0_OVF_Fptr>
     fd4:	08 95       	ret

00000fd6 <__vector_11>:
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	2f 93       	push	r18
     fe2:	3f 93       	push	r19
     fe4:	4f 93       	push	r20
     fe6:	5f 93       	push	r21
     fe8:	6f 93       	push	r22
     fea:	7f 93       	push	r23
     fec:	8f 93       	push	r24
     fee:	9f 93       	push	r25
     ff0:	af 93       	push	r26
     ff2:	bf 93       	push	r27
     ff4:	ef 93       	push	r30
     ff6:	ff 93       	push	r31
     ff8:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <Timer0_OVF_Fptr>
     ffc:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <Timer0_OVF_Fptr+0x1>
    1000:	30 97       	sbiw	r30, 0x00	; 0
    1002:	09 f0       	breq	.+2      	; 0x1006 <__vector_11+0x30>
    1004:	09 95       	icall
    1006:	ff 91       	pop	r31
    1008:	ef 91       	pop	r30
    100a:	bf 91       	pop	r27
    100c:	af 91       	pop	r26
    100e:	9f 91       	pop	r25
    1010:	8f 91       	pop	r24
    1012:	7f 91       	pop	r23
    1014:	6f 91       	pop	r22
    1016:	5f 91       	pop	r21
    1018:	4f 91       	pop	r20
    101a:	3f 91       	pop	r19
    101c:	2f 91       	pop	r18
    101e:	0f 90       	pop	r0
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	0f 90       	pop	r0
    1024:	1f 90       	pop	r1
    1026:	18 95       	reti

00001028 <TIMER0_OV_InterruptEnable>:
    1028:	89 b7       	in	r24, 0x39	; 57
    102a:	81 60       	ori	r24, 0x01	; 1
    102c:	89 bf       	out	0x39, r24	; 57
    102e:	08 95       	ret

00001030 <Timer1_Init>:
    1030:	82 30       	cpi	r24, 0x02	; 2
    1032:	29 f1       	breq	.+74     	; 0x107e <Timer1_Init+0x4e>
    1034:	28 f4       	brcc	.+10     	; 0x1040 <Timer1_Init+0x10>
    1036:	88 23       	and	r24, r24
    1038:	41 f0       	breq	.+16     	; 0x104a <Timer1_Init+0x1a>
    103a:	81 30       	cpi	r24, 0x01	; 1
    103c:	99 f0       	breq	.+38     	; 0x1064 <Timer1_Init+0x34>
    103e:	45 c0       	rjmp	.+138    	; 0x10ca <Timer1_Init+0x9a>
    1040:	83 30       	cpi	r24, 0x03	; 3
    1042:	51 f1       	breq	.+84     	; 0x1098 <Timer1_Init+0x68>
    1044:	84 30       	cpi	r24, 0x04	; 4
    1046:	a9 f1       	breq	.+106    	; 0x10b2 <Timer1_Init+0x82>
    1048:	40 c0       	rjmp	.+128    	; 0x10ca <Timer1_Init+0x9a>
    104a:	8f b5       	in	r24, 0x2f	; 47
    104c:	8e 7f       	andi	r24, 0xFE	; 254
    104e:	8f bd       	out	0x2f, r24	; 47
    1050:	8f b5       	in	r24, 0x2f	; 47
    1052:	8d 7f       	andi	r24, 0xFD	; 253
    1054:	8f bd       	out	0x2f, r24	; 47
    1056:	8e b5       	in	r24, 0x2e	; 46
    1058:	87 7f       	andi	r24, 0xF7	; 247
    105a:	8e bd       	out	0x2e, r24	; 46
    105c:	8e b5       	in	r24, 0x2e	; 46
    105e:	8f 7e       	andi	r24, 0xEF	; 239
    1060:	8e bd       	out	0x2e, r24	; 46
    1062:	33 c0       	rjmp	.+102    	; 0x10ca <Timer1_Init+0x9a>
    1064:	8f b5       	in	r24, 0x2f	; 47
    1066:	8e 7f       	andi	r24, 0xFE	; 254
    1068:	8f bd       	out	0x2f, r24	; 47
    106a:	8f b5       	in	r24, 0x2f	; 47
    106c:	8d 7f       	andi	r24, 0xFD	; 253
    106e:	8f bd       	out	0x2f, r24	; 47
    1070:	8e b5       	in	r24, 0x2e	; 46
    1072:	88 60       	ori	r24, 0x08	; 8
    1074:	8e bd       	out	0x2e, r24	; 46
    1076:	8e b5       	in	r24, 0x2e	; 46
    1078:	80 61       	ori	r24, 0x10	; 16
    107a:	8e bd       	out	0x2e, r24	; 46
    107c:	26 c0       	rjmp	.+76     	; 0x10ca <Timer1_Init+0x9a>
    107e:	8f b5       	in	r24, 0x2f	; 47
    1080:	8e 7f       	andi	r24, 0xFE	; 254
    1082:	8f bd       	out	0x2f, r24	; 47
    1084:	8f b5       	in	r24, 0x2f	; 47
    1086:	8d 7f       	andi	r24, 0xFD	; 253
    1088:	8f bd       	out	0x2f, r24	; 47
    108a:	8e b5       	in	r24, 0x2e	; 46
    108c:	88 60       	ori	r24, 0x08	; 8
    108e:	8e bd       	out	0x2e, r24	; 46
    1090:	8e b5       	in	r24, 0x2e	; 46
    1092:	8f 7e       	andi	r24, 0xEF	; 239
    1094:	8e bd       	out	0x2e, r24	; 46
    1096:	19 c0       	rjmp	.+50     	; 0x10ca <Timer1_Init+0x9a>
    1098:	8f b5       	in	r24, 0x2f	; 47
    109a:	8e 7f       	andi	r24, 0xFE	; 254
    109c:	8f bd       	out	0x2f, r24	; 47
    109e:	8f b5       	in	r24, 0x2f	; 47
    10a0:	82 60       	ori	r24, 0x02	; 2
    10a2:	8f bd       	out	0x2f, r24	; 47
    10a4:	8e b5       	in	r24, 0x2e	; 46
    10a6:	88 60       	ori	r24, 0x08	; 8
    10a8:	8e bd       	out	0x2e, r24	; 46
    10aa:	8e b5       	in	r24, 0x2e	; 46
    10ac:	80 61       	ori	r24, 0x10	; 16
    10ae:	8e bd       	out	0x2e, r24	; 46
    10b0:	0c c0       	rjmp	.+24     	; 0x10ca <Timer1_Init+0x9a>
    10b2:	8f b5       	in	r24, 0x2f	; 47
    10b4:	81 60       	ori	r24, 0x01	; 1
    10b6:	8f bd       	out	0x2f, r24	; 47
    10b8:	8f b5       	in	r24, 0x2f	; 47
    10ba:	82 60       	ori	r24, 0x02	; 2
    10bc:	8f bd       	out	0x2f, r24	; 47
    10be:	8e b5       	in	r24, 0x2e	; 46
    10c0:	88 60       	ori	r24, 0x08	; 8
    10c2:	8e bd       	out	0x2e, r24	; 46
    10c4:	8e b5       	in	r24, 0x2e	; 46
    10c6:	80 61       	ori	r24, 0x10	; 16
    10c8:	8e bd       	out	0x2e, r24	; 46
    10ca:	8e b5       	in	r24, 0x2e	; 46
    10cc:	88 7f       	andi	r24, 0xF8	; 248
    10ce:	8e bd       	out	0x2e, r24	; 46
    10d0:	8e b5       	in	r24, 0x2e	; 46
    10d2:	68 2b       	or	r22, r24
    10d4:	6e bd       	out	0x2e, r22	; 46
    10d6:	08 95       	ret

000010d8 <__vector_9>:
    10d8:	1f 92       	push	r1
    10da:	0f 92       	push	r0
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	0f 92       	push	r0
    10e0:	11 24       	eor	r1, r1
    10e2:	2f 93       	push	r18
    10e4:	3f 93       	push	r19
    10e6:	4f 93       	push	r20
    10e8:	5f 93       	push	r21
    10ea:	6f 93       	push	r22
    10ec:	7f 93       	push	r23
    10ee:	8f 93       	push	r24
    10f0:	9f 93       	push	r25
    10f2:	af 93       	push	r26
    10f4:	bf 93       	push	r27
    10f6:	ef 93       	push	r30
    10f8:	ff 93       	push	r31
    10fa:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <Timer1_OVF_Fptr>
    10fe:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <Timer1_OVF_Fptr+0x1>
    1102:	30 97       	sbiw	r30, 0x00	; 0
    1104:	09 f0       	breq	.+2      	; 0x1108 <__vector_9+0x30>
    1106:	09 95       	icall
    1108:	ff 91       	pop	r31
    110a:	ef 91       	pop	r30
    110c:	bf 91       	pop	r27
    110e:	af 91       	pop	r26
    1110:	9f 91       	pop	r25
    1112:	8f 91       	pop	r24
    1114:	7f 91       	pop	r23
    1116:	6f 91       	pop	r22
    1118:	5f 91       	pop	r21
    111a:	4f 91       	pop	r20
    111c:	3f 91       	pop	r19
    111e:	2f 91       	pop	r18
    1120:	0f 90       	pop	r0
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	0f 90       	pop	r0
    1126:	1f 90       	pop	r1
    1128:	18 95       	reti

0000112a <__vector_8>:
    112a:	1f 92       	push	r1
    112c:	0f 92       	push	r0
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	0f 92       	push	r0
    1132:	11 24       	eor	r1, r1
    1134:	2f 93       	push	r18
    1136:	3f 93       	push	r19
    1138:	4f 93       	push	r20
    113a:	5f 93       	push	r21
    113c:	6f 93       	push	r22
    113e:	7f 93       	push	r23
    1140:	8f 93       	push	r24
    1142:	9f 93       	push	r25
    1144:	af 93       	push	r26
    1146:	bf 93       	push	r27
    1148:	ef 93       	push	r30
    114a:	ff 93       	push	r31
    114c:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <Timer1_OCB_Fptr>
    1150:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <Timer1_OCB_Fptr+0x1>
    1154:	30 97       	sbiw	r30, 0x00	; 0
    1156:	09 f0       	breq	.+2      	; 0x115a <__vector_8+0x30>
    1158:	09 95       	icall
    115a:	ff 91       	pop	r31
    115c:	ef 91       	pop	r30
    115e:	bf 91       	pop	r27
    1160:	af 91       	pop	r26
    1162:	9f 91       	pop	r25
    1164:	8f 91       	pop	r24
    1166:	7f 91       	pop	r23
    1168:	6f 91       	pop	r22
    116a:	5f 91       	pop	r21
    116c:	4f 91       	pop	r20
    116e:	3f 91       	pop	r19
    1170:	2f 91       	pop	r18
    1172:	0f 90       	pop	r0
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	0f 90       	pop	r0
    1178:	1f 90       	pop	r1
    117a:	18 95       	reti

0000117c <__vector_6>:
    117c:	1f 92       	push	r1
    117e:	0f 92       	push	r0
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	0f 92       	push	r0
    1184:	11 24       	eor	r1, r1
    1186:	2f 93       	push	r18
    1188:	3f 93       	push	r19
    118a:	4f 93       	push	r20
    118c:	5f 93       	push	r21
    118e:	6f 93       	push	r22
    1190:	7f 93       	push	r23
    1192:	8f 93       	push	r24
    1194:	9f 93       	push	r25
    1196:	af 93       	push	r26
    1198:	bf 93       	push	r27
    119a:	ef 93       	push	r30
    119c:	ff 93       	push	r31
    119e:	e0 91 ff 00 	lds	r30, 0x00FF	; 0x8000ff <Timer1_ICU_Fptr>
    11a2:	f0 91 00 01 	lds	r31, 0x0100	; 0x800100 <Timer1_ICU_Fptr+0x1>
    11a6:	30 97       	sbiw	r30, 0x00	; 0
    11a8:	09 f0       	breq	.+2      	; 0x11ac <__vector_6+0x30>
    11aa:	09 95       	icall
    11ac:	ff 91       	pop	r31
    11ae:	ef 91       	pop	r30
    11b0:	bf 91       	pop	r27
    11b2:	af 91       	pop	r26
    11b4:	9f 91       	pop	r25
    11b6:	8f 91       	pop	r24
    11b8:	7f 91       	pop	r23
    11ba:	6f 91       	pop	r22
    11bc:	5f 91       	pop	r21
    11be:	4f 91       	pop	r20
    11c0:	3f 91       	pop	r19
    11c2:	2f 91       	pop	r18
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	0f 90       	pop	r0
    11ca:	1f 90       	pop	r1
    11cc:	18 95       	reti

000011ce <TIMER_2_init>:
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	f1 f0       	breq	.+60     	; 0x120e <TIMER_2_init+0x40>
    11d2:	28 f0       	brcs	.+10     	; 0x11de <TIMER_2_init+0x10>
    11d4:	82 30       	cpi	r24, 0x02	; 2
    11d6:	99 f0       	breq	.+38     	; 0x11fe <TIMER_2_init+0x30>
    11d8:	83 30       	cpi	r24, 0x03	; 3
    11da:	49 f0       	breq	.+18     	; 0x11ee <TIMER_2_init+0x20>
    11dc:	20 c0       	rjmp	.+64     	; 0x121e <TIMER_2_init+0x50>
    11de:	85 b5       	in	r24, 0x25	; 37
    11e0:	8f 7b       	andi	r24, 0xBF	; 191
    11e2:	85 bd       	out	0x25, r24	; 37
    11e4:	85 b5       	in	r24, 0x25	; 37
    11e6:	87 7f       	andi	r24, 0xF7	; 247
    11e8:	85 bd       	out	0x25, r24	; 37
    11ea:	84 e0       	ldi	r24, 0x04	; 4
    11ec:	08 95       	ret
    11ee:	85 b5       	in	r24, 0x25	; 37
    11f0:	80 64       	ori	r24, 0x40	; 64
    11f2:	85 bd       	out	0x25, r24	; 37
    11f4:	85 b5       	in	r24, 0x25	; 37
    11f6:	87 7f       	andi	r24, 0xF7	; 247
    11f8:	85 bd       	out	0x25, r24	; 37
    11fa:	84 e0       	ldi	r24, 0x04	; 4
    11fc:	08 95       	ret
    11fe:	85 b5       	in	r24, 0x25	; 37
    1200:	8f 7b       	andi	r24, 0xBF	; 191
    1202:	85 bd       	out	0x25, r24	; 37
    1204:	85 b5       	in	r24, 0x25	; 37
    1206:	88 60       	ori	r24, 0x08	; 8
    1208:	85 bd       	out	0x25, r24	; 37
    120a:	84 e0       	ldi	r24, 0x04	; 4
    120c:	08 95       	ret
    120e:	85 b5       	in	r24, 0x25	; 37
    1210:	80 64       	ori	r24, 0x40	; 64
    1212:	85 bd       	out	0x25, r24	; 37
    1214:	85 b5       	in	r24, 0x25	; 37
    1216:	88 60       	ori	r24, 0x08	; 8
    1218:	85 bd       	out	0x25, r24	; 37
    121a:	84 e0       	ldi	r24, 0x04	; 4
    121c:	08 95       	ret
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	08 95       	ret

00001222 <TIMER_2_setIntialValue>:
    1222:	84 bd       	out	0x24, r24	; 36
    1224:	84 e0       	ldi	r24, 0x04	; 4
    1226:	08 95       	ret

00001228 <TIMER_2_start>:
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	87 30       	cpi	r24, 0x07	; 7
    122c:	91 05       	cpc	r25, r1
    122e:	08 f0       	brcs	.+2      	; 0x1232 <TIMER_2_start+0xa>
    1230:	52 c0       	rjmp	.+164    	; 0x12d6 <TIMER_2_start+0xae>
    1232:	fc 01       	movw	r30, r24
    1234:	e6 5d       	subi	r30, 0xD6	; 214
    1236:	ff 4f       	sbci	r31, 0xFF	; 255
    1238:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__tablejump2__>
    123c:	85 b5       	in	r24, 0x25	; 37
    123e:	81 60       	ori	r24, 0x01	; 1
    1240:	85 bd       	out	0x25, r24	; 37
    1242:	85 b5       	in	r24, 0x25	; 37
    1244:	8d 7f       	andi	r24, 0xFD	; 253
    1246:	85 bd       	out	0x25, r24	; 37
    1248:	85 b5       	in	r24, 0x25	; 37
    124a:	8b 7f       	andi	r24, 0xFB	; 251
    124c:	85 bd       	out	0x25, r24	; 37
    124e:	84 e0       	ldi	r24, 0x04	; 4
    1250:	08 95       	ret
    1252:	85 b5       	in	r24, 0x25	; 37
    1254:	82 60       	ori	r24, 0x02	; 2
    1256:	85 bd       	out	0x25, r24	; 37
    1258:	85 b5       	in	r24, 0x25	; 37
    125a:	8e 7f       	andi	r24, 0xFE	; 254
    125c:	85 bd       	out	0x25, r24	; 37
    125e:	85 b5       	in	r24, 0x25	; 37
    1260:	8b 7f       	andi	r24, 0xFB	; 251
    1262:	85 bd       	out	0x25, r24	; 37
    1264:	84 e0       	ldi	r24, 0x04	; 4
    1266:	08 95       	ret
    1268:	85 b5       	in	r24, 0x25	; 37
    126a:	81 60       	ori	r24, 0x01	; 1
    126c:	85 bd       	out	0x25, r24	; 37
    126e:	85 b5       	in	r24, 0x25	; 37
    1270:	82 60       	ori	r24, 0x02	; 2
    1272:	85 bd       	out	0x25, r24	; 37
    1274:	85 b5       	in	r24, 0x25	; 37
    1276:	8b 7f       	andi	r24, 0xFB	; 251
    1278:	85 bd       	out	0x25, r24	; 37
    127a:	84 e0       	ldi	r24, 0x04	; 4
    127c:	08 95       	ret
    127e:	85 b5       	in	r24, 0x25	; 37
    1280:	84 60       	ori	r24, 0x04	; 4
    1282:	85 bd       	out	0x25, r24	; 37
    1284:	85 b5       	in	r24, 0x25	; 37
    1286:	8d 7f       	andi	r24, 0xFD	; 253
    1288:	85 bd       	out	0x25, r24	; 37
    128a:	85 b5       	in	r24, 0x25	; 37
    128c:	8e 7f       	andi	r24, 0xFE	; 254
    128e:	85 bd       	out	0x25, r24	; 37
    1290:	84 e0       	ldi	r24, 0x04	; 4
    1292:	08 95       	ret
    1294:	85 b5       	in	r24, 0x25	; 37
    1296:	81 60       	ori	r24, 0x01	; 1
    1298:	85 bd       	out	0x25, r24	; 37
    129a:	85 b5       	in	r24, 0x25	; 37
    129c:	8d 7f       	andi	r24, 0xFD	; 253
    129e:	85 bd       	out	0x25, r24	; 37
    12a0:	85 b5       	in	r24, 0x25	; 37
    12a2:	84 60       	ori	r24, 0x04	; 4
    12a4:	85 bd       	out	0x25, r24	; 37
    12a6:	84 e0       	ldi	r24, 0x04	; 4
    12a8:	08 95       	ret
    12aa:	85 b5       	in	r24, 0x25	; 37
    12ac:	84 60       	ori	r24, 0x04	; 4
    12ae:	85 bd       	out	0x25, r24	; 37
    12b0:	85 b5       	in	r24, 0x25	; 37
    12b2:	8e 7f       	andi	r24, 0xFE	; 254
    12b4:	85 bd       	out	0x25, r24	; 37
    12b6:	85 b5       	in	r24, 0x25	; 37
    12b8:	82 60       	ori	r24, 0x02	; 2
    12ba:	85 bd       	out	0x25, r24	; 37
    12bc:	84 e0       	ldi	r24, 0x04	; 4
    12be:	08 95       	ret
    12c0:	85 b5       	in	r24, 0x25	; 37
    12c2:	81 60       	ori	r24, 0x01	; 1
    12c4:	85 bd       	out	0x25, r24	; 37
    12c6:	85 b5       	in	r24, 0x25	; 37
    12c8:	82 60       	ori	r24, 0x02	; 2
    12ca:	85 bd       	out	0x25, r24	; 37
    12cc:	85 b5       	in	r24, 0x25	; 37
    12ce:	84 60       	ori	r24, 0x04	; 4
    12d0:	85 bd       	out	0x25, r24	; 37
    12d2:	84 e0       	ldi	r24, 0x04	; 4
    12d4:	08 95       	ret
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	08 95       	ret

000012da <TIMER_2_INT>:




void TIMER_2_INT(){
	sei();
    12da:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);
    12dc:	89 b7       	in	r24, 0x39	; 57
    12de:	80 64       	ori	r24, 0x40	; 64
    12e0:	89 bf       	out	0x39, r24	; 57
	TIMER_2_init(NORMAL_MODE);
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	0e 94 e7 08 	call	0x11ce	; 0x11ce <TIMER_2_init>
	TIMER_2_setIntialValue(0);
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	0e 94 11 09 	call	0x1222	; 0x1222 <TIMER_2_setIntialValue>
	TIMER_2_start(PRECALER_1);
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	0e 94 14 09 	call	0x1228	; 0x1228 <TIMER_2_start>
    12f4:	08 95       	ret

000012f6 <__vector_5>:




ISR(TIMER2_OV_vect)
{
    12f6:	1f 92       	push	r1
    12f8:	0f 92       	push	r0
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	0f 92       	push	r0
    12fe:	11 24       	eor	r1, r1
    1300:	4f 93       	push	r20
    1302:	5f 93       	push	r21
    1304:	6f 93       	push	r22
    1306:	7f 93       	push	r23
    1308:	8f 93       	push	r24
    130a:	9f 93       	push	r25
    130c:	af 93       	push	r26
    130e:	bf 93       	push	r27
	if(car_flag == 1)
    1310:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <car_flag>
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	c9 f5       	brne	.+114    	; 0x138a <__vector_5+0x94>
	{
		
		if (ovf < mode_ovf ){
    1318:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <ovf>
    131c:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <ovf+0x1>
    1320:	a0 91 f8 00 	lds	r26, 0x00F8	; 0x8000f8 <ovf+0x2>
    1324:	b0 91 f9 00 	lds	r27, 0x00F9	; 0x8000f9 <ovf+0x3>
    1328:	40 91 fa 00 	lds	r20, 0x00FA	; 0x8000fa <mode_ovf>
    132c:	50 91 fb 00 	lds	r21, 0x00FB	; 0x8000fb <mode_ovf+0x1>
    1330:	60 91 fc 00 	lds	r22, 0x00FC	; 0x8000fc <mode_ovf+0x2>
    1334:	70 91 fd 00 	lds	r23, 0x00FD	; 0x8000fd <mode_ovf+0x3>
    1338:	84 17       	cp	r24, r20
    133a:	95 07       	cpc	r25, r21
    133c:	a6 07       	cpc	r26, r22
    133e:	b7 07       	cpc	r27, r23
    1340:	64 f4       	brge	.+24     	; 0x135a <__vector_5+0x64>
			ovf++;
    1342:	01 96       	adiw	r24, 0x01	; 1
    1344:	a1 1d       	adc	r26, r1
    1346:	b1 1d       	adc	r27, r1
    1348:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <ovf>
    134c:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <ovf+0x1>
    1350:	a0 93 f8 00 	sts	0x00F8, r26	; 0x8000f8 <ovf+0x2>
    1354:	b0 93 f9 00 	sts	0x00F9, r27	; 0x8000f9 <ovf+0x3>
    1358:	18 c0       	rjmp	.+48     	; 0x138a <__vector_5+0x94>
		}
		else if ( ovf == mode_ovf && mode_ovf!=0)
    135a:	84 17       	cp	r24, r20
    135c:	95 07       	cpc	r25, r21
    135e:	a6 07       	cpc	r26, r22
    1360:	b7 07       	cpc	r27, r23
    1362:	99 f4       	brne	.+38     	; 0x138a <__vector_5+0x94>
    1364:	45 2b       	or	r20, r21
    1366:	46 2b       	or	r20, r22
    1368:	47 2b       	or	r20, r23
    136a:	79 f0       	breq	.+30     	; 0x138a <__vector_5+0x94>
		{
			ovf =0 ;
    136c:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <ovf>
    1370:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <ovf+0x1>
    1374:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <ovf+0x2>
    1378:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <ovf+0x3>
			if (car_mode ==0)
    137c:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <car_mode>
    1380:	81 11       	cpse	r24, r1
    1382:	03 c0       	rjmp	.+6      	; 0x138a <__vector_5+0x94>
			{
				car_mode=1;	
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <car_mode>
			
		}
		
		
	}
}
    138a:	bf 91       	pop	r27
    138c:	af 91       	pop	r26
    138e:	9f 91       	pop	r25
    1390:	8f 91       	pop	r24
    1392:	7f 91       	pop	r23
    1394:	6f 91       	pop	r22
    1396:	5f 91       	pop	r21
    1398:	4f 91       	pop	r20
    139a:	0f 90       	pop	r0
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	0f 90       	pop	r0
    13a0:	1f 90       	pop	r1
    13a2:	18 95       	reti

000013a4 <__subsf3>:
    13a4:	50 58       	subi	r21, 0x80	; 128

000013a6 <__addsf3>:
    13a6:	bb 27       	eor	r27, r27
    13a8:	aa 27       	eor	r26, r26
    13aa:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__addsf3x>
    13ae:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__fp_round>
    13b2:	0e 94 26 0b 	call	0x164c	; 0x164c <__fp_pscA>
    13b6:	38 f0       	brcs	.+14     	; 0x13c6 <__addsf3+0x20>
    13b8:	0e 94 2d 0b 	call	0x165a	; 0x165a <__fp_pscB>
    13bc:	20 f0       	brcs	.+8      	; 0x13c6 <__addsf3+0x20>
    13be:	39 f4       	brne	.+14     	; 0x13ce <__addsf3+0x28>
    13c0:	9f 3f       	cpi	r25, 0xFF	; 255
    13c2:	19 f4       	brne	.+6      	; 0x13ca <__addsf3+0x24>
    13c4:	26 f4       	brtc	.+8      	; 0x13ce <__addsf3+0x28>
    13c6:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_nan>
    13ca:	0e f4       	brtc	.+2      	; 0x13ce <__addsf3+0x28>
    13cc:	e0 95       	com	r30
    13ce:	e7 fb       	bst	r30, 7
    13d0:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_inf>

000013d4 <__addsf3x>:
    13d4:	e9 2f       	mov	r30, r25
    13d6:	0e 94 45 0b 	call	0x168a	; 0x168a <__fp_split3>
    13da:	58 f3       	brcs	.-42     	; 0x13b2 <__addsf3+0xc>
    13dc:	ba 17       	cp	r27, r26
    13de:	62 07       	cpc	r22, r18
    13e0:	73 07       	cpc	r23, r19
    13e2:	84 07       	cpc	r24, r20
    13e4:	95 07       	cpc	r25, r21
    13e6:	20 f0       	brcs	.+8      	; 0x13f0 <__addsf3x+0x1c>
    13e8:	79 f4       	brne	.+30     	; 0x1408 <__addsf3x+0x34>
    13ea:	a6 f5       	brtc	.+104    	; 0x1454 <__addsf3x+0x80>
    13ec:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__fp_zero>
    13f0:	0e f4       	brtc	.+2      	; 0x13f4 <__addsf3x+0x20>
    13f2:	e0 95       	com	r30
    13f4:	0b 2e       	mov	r0, r27
    13f6:	ba 2f       	mov	r27, r26
    13f8:	a0 2d       	mov	r26, r0
    13fa:	0b 01       	movw	r0, r22
    13fc:	b9 01       	movw	r22, r18
    13fe:	90 01       	movw	r18, r0
    1400:	0c 01       	movw	r0, r24
    1402:	ca 01       	movw	r24, r20
    1404:	a0 01       	movw	r20, r0
    1406:	11 24       	eor	r1, r1
    1408:	ff 27       	eor	r31, r31
    140a:	59 1b       	sub	r21, r25
    140c:	99 f0       	breq	.+38     	; 0x1434 <__addsf3x+0x60>
    140e:	59 3f       	cpi	r21, 0xF9	; 249
    1410:	50 f4       	brcc	.+20     	; 0x1426 <__addsf3x+0x52>
    1412:	50 3e       	cpi	r21, 0xE0	; 224
    1414:	68 f1       	brcs	.+90     	; 0x1470 <__addsf3x+0x9c>
    1416:	1a 16       	cp	r1, r26
    1418:	f0 40       	sbci	r31, 0x00	; 0
    141a:	a2 2f       	mov	r26, r18
    141c:	23 2f       	mov	r18, r19
    141e:	34 2f       	mov	r19, r20
    1420:	44 27       	eor	r20, r20
    1422:	58 5f       	subi	r21, 0xF8	; 248
    1424:	f3 cf       	rjmp	.-26     	; 0x140c <__addsf3x+0x38>
    1426:	46 95       	lsr	r20
    1428:	37 95       	ror	r19
    142a:	27 95       	ror	r18
    142c:	a7 95       	ror	r26
    142e:	f0 40       	sbci	r31, 0x00	; 0
    1430:	53 95       	inc	r21
    1432:	c9 f7       	brne	.-14     	; 0x1426 <__addsf3x+0x52>
    1434:	7e f4       	brtc	.+30     	; 0x1454 <__addsf3x+0x80>
    1436:	1f 16       	cp	r1, r31
    1438:	ba 0b       	sbc	r27, r26
    143a:	62 0b       	sbc	r22, r18
    143c:	73 0b       	sbc	r23, r19
    143e:	84 0b       	sbc	r24, r20
    1440:	ba f0       	brmi	.+46     	; 0x1470 <__addsf3x+0x9c>
    1442:	91 50       	subi	r25, 0x01	; 1
    1444:	a1 f0       	breq	.+40     	; 0x146e <__addsf3x+0x9a>
    1446:	ff 0f       	add	r31, r31
    1448:	bb 1f       	adc	r27, r27
    144a:	66 1f       	adc	r22, r22
    144c:	77 1f       	adc	r23, r23
    144e:	88 1f       	adc	r24, r24
    1450:	c2 f7       	brpl	.-16     	; 0x1442 <__addsf3x+0x6e>
    1452:	0e c0       	rjmp	.+28     	; 0x1470 <__addsf3x+0x9c>
    1454:	ba 0f       	add	r27, r26
    1456:	62 1f       	adc	r22, r18
    1458:	73 1f       	adc	r23, r19
    145a:	84 1f       	adc	r24, r20
    145c:	48 f4       	brcc	.+18     	; 0x1470 <__addsf3x+0x9c>
    145e:	87 95       	ror	r24
    1460:	77 95       	ror	r23
    1462:	67 95       	ror	r22
    1464:	b7 95       	ror	r27
    1466:	f7 95       	ror	r31
    1468:	9e 3f       	cpi	r25, 0xFE	; 254
    146a:	08 f0       	brcs	.+2      	; 0x146e <__addsf3x+0x9a>
    146c:	b0 cf       	rjmp	.-160    	; 0x13ce <__addsf3+0x28>
    146e:	93 95       	inc	r25
    1470:	88 0f       	add	r24, r24
    1472:	08 f0       	brcs	.+2      	; 0x1476 <__addsf3x+0xa2>
    1474:	99 27       	eor	r25, r25
    1476:	ee 0f       	add	r30, r30
    1478:	97 95       	ror	r25
    147a:	87 95       	ror	r24
    147c:	08 95       	ret

0000147e <__divsf3>:
    147e:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__divsf3x>
    1482:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__fp_round>
    1486:	0e 94 2d 0b 	call	0x165a	; 0x165a <__fp_pscB>
    148a:	58 f0       	brcs	.+22     	; 0x14a2 <__divsf3+0x24>
    148c:	0e 94 26 0b 	call	0x164c	; 0x164c <__fp_pscA>
    1490:	40 f0       	brcs	.+16     	; 0x14a2 <__divsf3+0x24>
    1492:	29 f4       	brne	.+10     	; 0x149e <__divsf3+0x20>
    1494:	5f 3f       	cpi	r21, 0xFF	; 255
    1496:	29 f0       	breq	.+10     	; 0x14a2 <__divsf3+0x24>
    1498:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_inf>
    149c:	51 11       	cpse	r21, r1
    149e:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <__fp_szero>
    14a2:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_nan>

000014a6 <__divsf3x>:
    14a6:	0e 94 45 0b 	call	0x168a	; 0x168a <__fp_split3>
    14aa:	68 f3       	brcs	.-38     	; 0x1486 <__divsf3+0x8>

000014ac <__divsf3_pse>:
    14ac:	99 23       	and	r25, r25
    14ae:	b1 f3       	breq	.-20     	; 0x149c <__divsf3+0x1e>
    14b0:	55 23       	and	r21, r21
    14b2:	91 f3       	breq	.-28     	; 0x1498 <__divsf3+0x1a>
    14b4:	95 1b       	sub	r25, r21
    14b6:	55 0b       	sbc	r21, r21
    14b8:	bb 27       	eor	r27, r27
    14ba:	aa 27       	eor	r26, r26
    14bc:	62 17       	cp	r22, r18
    14be:	73 07       	cpc	r23, r19
    14c0:	84 07       	cpc	r24, r20
    14c2:	38 f0       	brcs	.+14     	; 0x14d2 <__divsf3_pse+0x26>
    14c4:	9f 5f       	subi	r25, 0xFF	; 255
    14c6:	5f 4f       	sbci	r21, 0xFF	; 255
    14c8:	22 0f       	add	r18, r18
    14ca:	33 1f       	adc	r19, r19
    14cc:	44 1f       	adc	r20, r20
    14ce:	aa 1f       	adc	r26, r26
    14d0:	a9 f3       	breq	.-22     	; 0x14bc <__divsf3_pse+0x10>
    14d2:	35 d0       	rcall	.+106    	; 0x153e <__divsf3_pse+0x92>
    14d4:	0e 2e       	mov	r0, r30
    14d6:	3a f0       	brmi	.+14     	; 0x14e6 <__divsf3_pse+0x3a>
    14d8:	e0 e8       	ldi	r30, 0x80	; 128
    14da:	32 d0       	rcall	.+100    	; 0x1540 <__divsf3_pse+0x94>
    14dc:	91 50       	subi	r25, 0x01	; 1
    14de:	50 40       	sbci	r21, 0x00	; 0
    14e0:	e6 95       	lsr	r30
    14e2:	00 1c       	adc	r0, r0
    14e4:	ca f7       	brpl	.-14     	; 0x14d8 <__divsf3_pse+0x2c>
    14e6:	2b d0       	rcall	.+86     	; 0x153e <__divsf3_pse+0x92>
    14e8:	fe 2f       	mov	r31, r30
    14ea:	29 d0       	rcall	.+82     	; 0x153e <__divsf3_pse+0x92>
    14ec:	66 0f       	add	r22, r22
    14ee:	77 1f       	adc	r23, r23
    14f0:	88 1f       	adc	r24, r24
    14f2:	bb 1f       	adc	r27, r27
    14f4:	26 17       	cp	r18, r22
    14f6:	37 07       	cpc	r19, r23
    14f8:	48 07       	cpc	r20, r24
    14fa:	ab 07       	cpc	r26, r27
    14fc:	b0 e8       	ldi	r27, 0x80	; 128
    14fe:	09 f0       	breq	.+2      	; 0x1502 <__divsf3_pse+0x56>
    1500:	bb 0b       	sbc	r27, r27
    1502:	80 2d       	mov	r24, r0
    1504:	bf 01       	movw	r22, r30
    1506:	ff 27       	eor	r31, r31
    1508:	93 58       	subi	r25, 0x83	; 131
    150a:	5f 4f       	sbci	r21, 0xFF	; 255
    150c:	3a f0       	brmi	.+14     	; 0x151c <__divsf3_pse+0x70>
    150e:	9e 3f       	cpi	r25, 0xFE	; 254
    1510:	51 05       	cpc	r21, r1
    1512:	78 f0       	brcs	.+30     	; 0x1532 <__divsf3_pse+0x86>
    1514:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_inf>
    1518:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <__fp_szero>
    151c:	5f 3f       	cpi	r21, 0xFF	; 255
    151e:	e4 f3       	brlt	.-8      	; 0x1518 <__divsf3_pse+0x6c>
    1520:	98 3e       	cpi	r25, 0xE8	; 232
    1522:	d4 f3       	brlt	.-12     	; 0x1518 <__divsf3_pse+0x6c>
    1524:	86 95       	lsr	r24
    1526:	77 95       	ror	r23
    1528:	67 95       	ror	r22
    152a:	b7 95       	ror	r27
    152c:	f7 95       	ror	r31
    152e:	9f 5f       	subi	r25, 0xFF	; 255
    1530:	c9 f7       	brne	.-14     	; 0x1524 <__divsf3_pse+0x78>
    1532:	88 0f       	add	r24, r24
    1534:	91 1d       	adc	r25, r1
    1536:	96 95       	lsr	r25
    1538:	87 95       	ror	r24
    153a:	97 f9       	bld	r25, 7
    153c:	08 95       	ret
    153e:	e1 e0       	ldi	r30, 0x01	; 1
    1540:	66 0f       	add	r22, r22
    1542:	77 1f       	adc	r23, r23
    1544:	88 1f       	adc	r24, r24
    1546:	bb 1f       	adc	r27, r27
    1548:	62 17       	cp	r22, r18
    154a:	73 07       	cpc	r23, r19
    154c:	84 07       	cpc	r24, r20
    154e:	ba 07       	cpc	r27, r26
    1550:	20 f0       	brcs	.+8      	; 0x155a <__divsf3_pse+0xae>
    1552:	62 1b       	sub	r22, r18
    1554:	73 0b       	sbc	r23, r19
    1556:	84 0b       	sbc	r24, r20
    1558:	ba 0b       	sbc	r27, r26
    155a:	ee 1f       	adc	r30, r30
    155c:	88 f7       	brcc	.-30     	; 0x1540 <__divsf3_pse+0x94>
    155e:	e0 95       	com	r30
    1560:	08 95       	ret

00001562 <__fixunssfsi>:
    1562:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fp_splitA>
    1566:	88 f0       	brcs	.+34     	; 0x158a <__fixunssfsi+0x28>
    1568:	9f 57       	subi	r25, 0x7F	; 127
    156a:	98 f0       	brcs	.+38     	; 0x1592 <__fixunssfsi+0x30>
    156c:	b9 2f       	mov	r27, r25
    156e:	99 27       	eor	r25, r25
    1570:	b7 51       	subi	r27, 0x17	; 23
    1572:	b0 f0       	brcs	.+44     	; 0x15a0 <__fixunssfsi+0x3e>
    1574:	e1 f0       	breq	.+56     	; 0x15ae <__fixunssfsi+0x4c>
    1576:	66 0f       	add	r22, r22
    1578:	77 1f       	adc	r23, r23
    157a:	88 1f       	adc	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	1a f0       	brmi	.+6      	; 0x1586 <__fixunssfsi+0x24>
    1580:	ba 95       	dec	r27
    1582:	c9 f7       	brne	.-14     	; 0x1576 <__fixunssfsi+0x14>
    1584:	14 c0       	rjmp	.+40     	; 0x15ae <__fixunssfsi+0x4c>
    1586:	b1 30       	cpi	r27, 0x01	; 1
    1588:	91 f0       	breq	.+36     	; 0x15ae <__fixunssfsi+0x4c>
    158a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__fp_zero>
    158e:	b1 e0       	ldi	r27, 0x01	; 1
    1590:	08 95       	ret
    1592:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__fp_zero>
    1596:	67 2f       	mov	r22, r23
    1598:	78 2f       	mov	r23, r24
    159a:	88 27       	eor	r24, r24
    159c:	b8 5f       	subi	r27, 0xF8	; 248
    159e:	39 f0       	breq	.+14     	; 0x15ae <__fixunssfsi+0x4c>
    15a0:	b9 3f       	cpi	r27, 0xF9	; 249
    15a2:	cc f3       	brlt	.-14     	; 0x1596 <__fixunssfsi+0x34>
    15a4:	86 95       	lsr	r24
    15a6:	77 95       	ror	r23
    15a8:	67 95       	ror	r22
    15aa:	b3 95       	inc	r27
    15ac:	d9 f7       	brne	.-10     	; 0x15a4 <__fixunssfsi+0x42>
    15ae:	3e f4       	brtc	.+14     	; 0x15be <__fixunssfsi+0x5c>
    15b0:	90 95       	com	r25
    15b2:	80 95       	com	r24
    15b4:	70 95       	com	r23
    15b6:	61 95       	neg	r22
    15b8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ba:	8f 4f       	sbci	r24, 0xFF	; 255
    15bc:	9f 4f       	sbci	r25, 0xFF	; 255
    15be:	08 95       	ret

000015c0 <__floatunsisf>:
    15c0:	e8 94       	clt
    15c2:	09 c0       	rjmp	.+18     	; 0x15d6 <__floatsisf+0x12>

000015c4 <__floatsisf>:
    15c4:	97 fb       	bst	r25, 7
    15c6:	3e f4       	brtc	.+14     	; 0x15d6 <__floatsisf+0x12>
    15c8:	90 95       	com	r25
    15ca:	80 95       	com	r24
    15cc:	70 95       	com	r23
    15ce:	61 95       	neg	r22
    15d0:	7f 4f       	sbci	r23, 0xFF	; 255
    15d2:	8f 4f       	sbci	r24, 0xFF	; 255
    15d4:	9f 4f       	sbci	r25, 0xFF	; 255
    15d6:	99 23       	and	r25, r25
    15d8:	a9 f0       	breq	.+42     	; 0x1604 <__floatsisf+0x40>
    15da:	f9 2f       	mov	r31, r25
    15dc:	96 e9       	ldi	r25, 0x96	; 150
    15de:	bb 27       	eor	r27, r27
    15e0:	93 95       	inc	r25
    15e2:	f6 95       	lsr	r31
    15e4:	87 95       	ror	r24
    15e6:	77 95       	ror	r23
    15e8:	67 95       	ror	r22
    15ea:	b7 95       	ror	r27
    15ec:	f1 11       	cpse	r31, r1
    15ee:	f8 cf       	rjmp	.-16     	; 0x15e0 <__floatsisf+0x1c>
    15f0:	fa f4       	brpl	.+62     	; 0x1630 <__floatsisf+0x6c>
    15f2:	bb 0f       	add	r27, r27
    15f4:	11 f4       	brne	.+4      	; 0x15fa <__floatsisf+0x36>
    15f6:	60 ff       	sbrs	r22, 0
    15f8:	1b c0       	rjmp	.+54     	; 0x1630 <__floatsisf+0x6c>
    15fa:	6f 5f       	subi	r22, 0xFF	; 255
    15fc:	7f 4f       	sbci	r23, 0xFF	; 255
    15fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1600:	9f 4f       	sbci	r25, 0xFF	; 255
    1602:	16 c0       	rjmp	.+44     	; 0x1630 <__floatsisf+0x6c>
    1604:	88 23       	and	r24, r24
    1606:	11 f0       	breq	.+4      	; 0x160c <__floatsisf+0x48>
    1608:	96 e9       	ldi	r25, 0x96	; 150
    160a:	11 c0       	rjmp	.+34     	; 0x162e <__floatsisf+0x6a>
    160c:	77 23       	and	r23, r23
    160e:	21 f0       	breq	.+8      	; 0x1618 <__floatsisf+0x54>
    1610:	9e e8       	ldi	r25, 0x8E	; 142
    1612:	87 2f       	mov	r24, r23
    1614:	76 2f       	mov	r23, r22
    1616:	05 c0       	rjmp	.+10     	; 0x1622 <__floatsisf+0x5e>
    1618:	66 23       	and	r22, r22
    161a:	71 f0       	breq	.+28     	; 0x1638 <__floatsisf+0x74>
    161c:	96 e8       	ldi	r25, 0x86	; 134
    161e:	86 2f       	mov	r24, r22
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	2a f0       	brmi	.+10     	; 0x1630 <__floatsisf+0x6c>
    1626:	9a 95       	dec	r25
    1628:	66 0f       	add	r22, r22
    162a:	77 1f       	adc	r23, r23
    162c:	88 1f       	adc	r24, r24
    162e:	da f7       	brpl	.-10     	; 0x1626 <__floatsisf+0x62>
    1630:	88 0f       	add	r24, r24
    1632:	96 95       	lsr	r25
    1634:	87 95       	ror	r24
    1636:	97 f9       	bld	r25, 7
    1638:	08 95       	ret

0000163a <__fp_inf>:
    163a:	97 f9       	bld	r25, 7
    163c:	9f 67       	ori	r25, 0x7F	; 127
    163e:	80 e8       	ldi	r24, 0x80	; 128
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	08 95       	ret

00001646 <__fp_nan>:
    1646:	9f ef       	ldi	r25, 0xFF	; 255
    1648:	80 ec       	ldi	r24, 0xC0	; 192
    164a:	08 95       	ret

0000164c <__fp_pscA>:
    164c:	00 24       	eor	r0, r0
    164e:	0a 94       	dec	r0
    1650:	16 16       	cp	r1, r22
    1652:	17 06       	cpc	r1, r23
    1654:	18 06       	cpc	r1, r24
    1656:	09 06       	cpc	r0, r25
    1658:	08 95       	ret

0000165a <__fp_pscB>:
    165a:	00 24       	eor	r0, r0
    165c:	0a 94       	dec	r0
    165e:	12 16       	cp	r1, r18
    1660:	13 06       	cpc	r1, r19
    1662:	14 06       	cpc	r1, r20
    1664:	05 06       	cpc	r0, r21
    1666:	08 95       	ret

00001668 <__fp_round>:
    1668:	09 2e       	mov	r0, r25
    166a:	03 94       	inc	r0
    166c:	00 0c       	add	r0, r0
    166e:	11 f4       	brne	.+4      	; 0x1674 <__fp_round+0xc>
    1670:	88 23       	and	r24, r24
    1672:	52 f0       	brmi	.+20     	; 0x1688 <__fp_round+0x20>
    1674:	bb 0f       	add	r27, r27
    1676:	40 f4       	brcc	.+16     	; 0x1688 <__fp_round+0x20>
    1678:	bf 2b       	or	r27, r31
    167a:	11 f4       	brne	.+4      	; 0x1680 <__fp_round+0x18>
    167c:	60 ff       	sbrs	r22, 0
    167e:	04 c0       	rjmp	.+8      	; 0x1688 <__fp_round+0x20>
    1680:	6f 5f       	subi	r22, 0xFF	; 255
    1682:	7f 4f       	sbci	r23, 0xFF	; 255
    1684:	8f 4f       	sbci	r24, 0xFF	; 255
    1686:	9f 4f       	sbci	r25, 0xFF	; 255
    1688:	08 95       	ret

0000168a <__fp_split3>:
    168a:	57 fd       	sbrc	r21, 7
    168c:	90 58       	subi	r25, 0x80	; 128
    168e:	44 0f       	add	r20, r20
    1690:	55 1f       	adc	r21, r21
    1692:	59 f0       	breq	.+22     	; 0x16aa <__fp_splitA+0x10>
    1694:	5f 3f       	cpi	r21, 0xFF	; 255
    1696:	71 f0       	breq	.+28     	; 0x16b4 <__fp_splitA+0x1a>
    1698:	47 95       	ror	r20

0000169a <__fp_splitA>:
    169a:	88 0f       	add	r24, r24
    169c:	97 fb       	bst	r25, 7
    169e:	99 1f       	adc	r25, r25
    16a0:	61 f0       	breq	.+24     	; 0x16ba <__fp_splitA+0x20>
    16a2:	9f 3f       	cpi	r25, 0xFF	; 255
    16a4:	79 f0       	breq	.+30     	; 0x16c4 <__fp_splitA+0x2a>
    16a6:	87 95       	ror	r24
    16a8:	08 95       	ret
    16aa:	12 16       	cp	r1, r18
    16ac:	13 06       	cpc	r1, r19
    16ae:	14 06       	cpc	r1, r20
    16b0:	55 1f       	adc	r21, r21
    16b2:	f2 cf       	rjmp	.-28     	; 0x1698 <__fp_split3+0xe>
    16b4:	46 95       	lsr	r20
    16b6:	f1 df       	rcall	.-30     	; 0x169a <__fp_splitA>
    16b8:	08 c0       	rjmp	.+16     	; 0x16ca <__fp_splitA+0x30>
    16ba:	16 16       	cp	r1, r22
    16bc:	17 06       	cpc	r1, r23
    16be:	18 06       	cpc	r1, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	f1 cf       	rjmp	.-30     	; 0x16a6 <__fp_splitA+0xc>
    16c4:	86 95       	lsr	r24
    16c6:	71 05       	cpc	r23, r1
    16c8:	61 05       	cpc	r22, r1
    16ca:	08 94       	sec
    16cc:	08 95       	ret

000016ce <__fp_zero>:
    16ce:	e8 94       	clt

000016d0 <__fp_szero>:
    16d0:	bb 27       	eor	r27, r27
    16d2:	66 27       	eor	r22, r22
    16d4:	77 27       	eor	r23, r23
    16d6:	cb 01       	movw	r24, r22
    16d8:	97 f9       	bld	r25, 7
    16da:	08 95       	ret

000016dc <__mulsf3>:
    16dc:	0e 94 81 0b 	call	0x1702	; 0x1702 <__mulsf3x>
    16e0:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__fp_round>
    16e4:	0e 94 26 0b 	call	0x164c	; 0x164c <__fp_pscA>
    16e8:	38 f0       	brcs	.+14     	; 0x16f8 <__mulsf3+0x1c>
    16ea:	0e 94 2d 0b 	call	0x165a	; 0x165a <__fp_pscB>
    16ee:	20 f0       	brcs	.+8      	; 0x16f8 <__mulsf3+0x1c>
    16f0:	95 23       	and	r25, r21
    16f2:	11 f0       	breq	.+4      	; 0x16f8 <__mulsf3+0x1c>
    16f4:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_inf>
    16f8:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_nan>
    16fc:	11 24       	eor	r1, r1
    16fe:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <__fp_szero>

00001702 <__mulsf3x>:
    1702:	0e 94 45 0b 	call	0x168a	; 0x168a <__fp_split3>
    1706:	70 f3       	brcs	.-36     	; 0x16e4 <__mulsf3+0x8>

00001708 <__mulsf3_pse>:
    1708:	95 9f       	mul	r25, r21
    170a:	c1 f3       	breq	.-16     	; 0x16fc <__mulsf3+0x20>
    170c:	95 0f       	add	r25, r21
    170e:	50 e0       	ldi	r21, 0x00	; 0
    1710:	55 1f       	adc	r21, r21
    1712:	62 9f       	mul	r22, r18
    1714:	f0 01       	movw	r30, r0
    1716:	72 9f       	mul	r23, r18
    1718:	bb 27       	eor	r27, r27
    171a:	f0 0d       	add	r31, r0
    171c:	b1 1d       	adc	r27, r1
    171e:	63 9f       	mul	r22, r19
    1720:	aa 27       	eor	r26, r26
    1722:	f0 0d       	add	r31, r0
    1724:	b1 1d       	adc	r27, r1
    1726:	aa 1f       	adc	r26, r26
    1728:	64 9f       	mul	r22, r20
    172a:	66 27       	eor	r22, r22
    172c:	b0 0d       	add	r27, r0
    172e:	a1 1d       	adc	r26, r1
    1730:	66 1f       	adc	r22, r22
    1732:	82 9f       	mul	r24, r18
    1734:	22 27       	eor	r18, r18
    1736:	b0 0d       	add	r27, r0
    1738:	a1 1d       	adc	r26, r1
    173a:	62 1f       	adc	r22, r18
    173c:	73 9f       	mul	r23, r19
    173e:	b0 0d       	add	r27, r0
    1740:	a1 1d       	adc	r26, r1
    1742:	62 1f       	adc	r22, r18
    1744:	83 9f       	mul	r24, r19
    1746:	a0 0d       	add	r26, r0
    1748:	61 1d       	adc	r22, r1
    174a:	22 1f       	adc	r18, r18
    174c:	74 9f       	mul	r23, r20
    174e:	33 27       	eor	r19, r19
    1750:	a0 0d       	add	r26, r0
    1752:	61 1d       	adc	r22, r1
    1754:	23 1f       	adc	r18, r19
    1756:	84 9f       	mul	r24, r20
    1758:	60 0d       	add	r22, r0
    175a:	21 1d       	adc	r18, r1
    175c:	82 2f       	mov	r24, r18
    175e:	76 2f       	mov	r23, r22
    1760:	6a 2f       	mov	r22, r26
    1762:	11 24       	eor	r1, r1
    1764:	9f 57       	subi	r25, 0x7F	; 127
    1766:	50 40       	sbci	r21, 0x00	; 0
    1768:	9a f0       	brmi	.+38     	; 0x1790 <__mulsf3_pse+0x88>
    176a:	f1 f0       	breq	.+60     	; 0x17a8 <__mulsf3_pse+0xa0>
    176c:	88 23       	and	r24, r24
    176e:	4a f0       	brmi	.+18     	; 0x1782 <__mulsf3_pse+0x7a>
    1770:	ee 0f       	add	r30, r30
    1772:	ff 1f       	adc	r31, r31
    1774:	bb 1f       	adc	r27, r27
    1776:	66 1f       	adc	r22, r22
    1778:	77 1f       	adc	r23, r23
    177a:	88 1f       	adc	r24, r24
    177c:	91 50       	subi	r25, 0x01	; 1
    177e:	50 40       	sbci	r21, 0x00	; 0
    1780:	a9 f7       	brne	.-22     	; 0x176c <__mulsf3_pse+0x64>
    1782:	9e 3f       	cpi	r25, 0xFE	; 254
    1784:	51 05       	cpc	r21, r1
    1786:	80 f0       	brcs	.+32     	; 0x17a8 <__mulsf3_pse+0xa0>
    1788:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_inf>
    178c:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <__fp_szero>
    1790:	5f 3f       	cpi	r21, 0xFF	; 255
    1792:	e4 f3       	brlt	.-8      	; 0x178c <__mulsf3_pse+0x84>
    1794:	98 3e       	cpi	r25, 0xE8	; 232
    1796:	d4 f3       	brlt	.-12     	; 0x178c <__mulsf3_pse+0x84>
    1798:	86 95       	lsr	r24
    179a:	77 95       	ror	r23
    179c:	67 95       	ror	r22
    179e:	b7 95       	ror	r27
    17a0:	f7 95       	ror	r31
    17a2:	e7 95       	ror	r30
    17a4:	9f 5f       	subi	r25, 0xFF	; 255
    17a6:	c1 f7       	brne	.-16     	; 0x1798 <__mulsf3_pse+0x90>
    17a8:	fe 2b       	or	r31, r30
    17aa:	88 0f       	add	r24, r24
    17ac:	91 1d       	adc	r25, r1
    17ae:	96 95       	lsr	r25
    17b0:	87 95       	ror	r24
    17b2:	97 f9       	bld	r25, 7
    17b4:	08 95       	ret

000017b6 <__udivmodsi4>:
    17b6:	a1 e2       	ldi	r26, 0x21	; 33
    17b8:	1a 2e       	mov	r1, r26
    17ba:	aa 1b       	sub	r26, r26
    17bc:	bb 1b       	sub	r27, r27
    17be:	fd 01       	movw	r30, r26
    17c0:	0d c0       	rjmp	.+26     	; 0x17dc <__udivmodsi4_ep>

000017c2 <__udivmodsi4_loop>:
    17c2:	aa 1f       	adc	r26, r26
    17c4:	bb 1f       	adc	r27, r27
    17c6:	ee 1f       	adc	r30, r30
    17c8:	ff 1f       	adc	r31, r31
    17ca:	a2 17       	cp	r26, r18
    17cc:	b3 07       	cpc	r27, r19
    17ce:	e4 07       	cpc	r30, r20
    17d0:	f5 07       	cpc	r31, r21
    17d2:	20 f0       	brcs	.+8      	; 0x17dc <__udivmodsi4_ep>
    17d4:	a2 1b       	sub	r26, r18
    17d6:	b3 0b       	sbc	r27, r19
    17d8:	e4 0b       	sbc	r30, r20
    17da:	f5 0b       	sbc	r31, r21

000017dc <__udivmodsi4_ep>:
    17dc:	66 1f       	adc	r22, r22
    17de:	77 1f       	adc	r23, r23
    17e0:	88 1f       	adc	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	1a 94       	dec	r1
    17e6:	69 f7       	brne	.-38     	; 0x17c2 <__udivmodsi4_loop>
    17e8:	60 95       	com	r22
    17ea:	70 95       	com	r23
    17ec:	80 95       	com	r24
    17ee:	90 95       	com	r25
    17f0:	9b 01       	movw	r18, r22
    17f2:	ac 01       	movw	r20, r24
    17f4:	bd 01       	movw	r22, r26
    17f6:	cf 01       	movw	r24, r30
    17f8:	08 95       	ret

000017fa <__divmodsi4>:
    17fa:	05 2e       	mov	r0, r21
    17fc:	97 fb       	bst	r25, 7
    17fe:	1e f4       	brtc	.+6      	; 0x1806 <__divmodsi4+0xc>
    1800:	00 94       	com	r0
    1802:	0e 94 14 0c 	call	0x1828	; 0x1828 <__negsi2>
    1806:	57 fd       	sbrc	r21, 7
    1808:	07 d0       	rcall	.+14     	; 0x1818 <__divmodsi4_neg2>
    180a:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__udivmodsi4>
    180e:	07 fc       	sbrc	r0, 7
    1810:	03 d0       	rcall	.+6      	; 0x1818 <__divmodsi4_neg2>
    1812:	4e f4       	brtc	.+18     	; 0x1826 <__divmodsi4_exit>
    1814:	0c 94 14 0c 	jmp	0x1828	; 0x1828 <__negsi2>

00001818 <__divmodsi4_neg2>:
    1818:	50 95       	com	r21
    181a:	40 95       	com	r20
    181c:	30 95       	com	r19
    181e:	21 95       	neg	r18
    1820:	3f 4f       	sbci	r19, 0xFF	; 255
    1822:	4f 4f       	sbci	r20, 0xFF	; 255
    1824:	5f 4f       	sbci	r21, 0xFF	; 255

00001826 <__divmodsi4_exit>:
    1826:	08 95       	ret

00001828 <__negsi2>:
    1828:	90 95       	com	r25
    182a:	80 95       	com	r24
    182c:	70 95       	com	r23
    182e:	61 95       	neg	r22
    1830:	7f 4f       	sbci	r23, 0xFF	; 255
    1832:	8f 4f       	sbci	r24, 0xFF	; 255
    1834:	9f 4f       	sbci	r25, 0xFF	; 255
    1836:	08 95       	ret

00001838 <__tablejump2__>:
    1838:	ee 0f       	add	r30, r30
    183a:	ff 1f       	adc	r31, r31
    183c:	05 90       	lpm	r0, Z+
    183e:	f4 91       	lpm	r31, Z
    1840:	e0 2d       	mov	r30, r0
    1842:	09 94       	ijmp

00001844 <__umulhisi3>:
    1844:	a2 9f       	mul	r26, r18
    1846:	b0 01       	movw	r22, r0
    1848:	b3 9f       	mul	r27, r19
    184a:	c0 01       	movw	r24, r0
    184c:	a3 9f       	mul	r26, r19
    184e:	70 0d       	add	r23, r0
    1850:	81 1d       	adc	r24, r1
    1852:	11 24       	eor	r1, r1
    1854:	91 1d       	adc	r25, r1
    1856:	b2 9f       	mul	r27, r18
    1858:	70 0d       	add	r23, r0
    185a:	81 1d       	adc	r24, r1
    185c:	11 24       	eor	r1, r1
    185e:	91 1d       	adc	r25, r1
    1860:	08 95       	ret

00001862 <_exit>:
    1862:	f8 94       	cli

00001864 <__stop_program>:
    1864:	ff cf       	rjmp	.-2      	; 0x1864 <__stop_program>
